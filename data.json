{
    "versions": [
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        "bch",
        "zec",
        "doge",
        "dash"
    ],
    "data": {
        "Blockchain": {
            "getbestblockhash": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getblock": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getblockchaininfo": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getblockcount": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getblockhash": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getblockheader": [
                18,
                17,
                16,
                15,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getblockstats": [
                18,
                17,
                "bch"
            ],
            "getchaintips": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getchaintxstats": [
                18,
                17,
                16,
                15,
                "bch"
            ],
            "getdifficulty": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getmempoolancestors": [
                18,
                17,
                16,
                15,
                13,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "getmempooldescendants": [
                18,
                17,
                16,
                15,
                13,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "getmempoolentry": [
                18,
                17,
                16,
                15,
                13,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "getmempoolinfo": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getrawmempool": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "gettxout": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "gettxoutproof": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "gettxoutsetinfo": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "preciousblock": [
                18,
                17,
                16,
                15,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "pruneblockchain": [
                18,
                17,
                16,
                15,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "savemempool": [
                18,
                17,
                16,
                "bch"
            ],
            "scantxoutset": [
                18,
                17
            ],
            "verifychain": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "verifytxoutproof": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getblockhashes": [
                "dash"
            ],
            "getblockheaders": [
                "dash"
            ],
            "getspecialtxes": [
                "dash"
            ],
            "getspentinfo": [
                "dash"
            ]
        },
        "Control": {
            "getinfo": [
                15,
                11,
                12,
                13,
                14,
                "zec",
                "dash",
                "doge"
            ],
            "getmemoryinfo": [
                18,
                17,
                16,
                15,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "getrpcinfo": [
                18
            ],
            "help": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "logging": [
                18,
                17,
                16
            ],
            "stop": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "uptime": [
                18,
                17,
                16,
                15,
                "bch"
            ],
            "debug": [
                "dash"
            ]
        },
        "Generating": {
            "generate": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "generatetoaddress": [
                18,
                17,
                16,
                15,
                13,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "getgenerate": [
                11,
                12,
                "zec"
            ],
            "setgenerate": [
                11,
                12,
                "zec"
            ]
        },
        "Mining": {
            "getblocktemplate": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getmininginfo": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getnetworkhashps": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "prioritisetransaction": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "submitblock": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "submitheader": [
                18
            ],
            "getblocksubsidy": [
                "zec"
            ],
            "getlocalsolps": [
                "zec"
            ],
            "getnetworksolps": [
                "zec"
            ],
            "getauxblock": [
                "doge"
            ]
        },
        "Network": {
            "addnode": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "clearbanned": [
                18,
                17,
                16,
                15,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "disconnectnode": [
                18,
                17,
                16,
                15,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getaddednodeinfo": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getconnectioncount": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getnettotals": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getnetworkinfo": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getnodeaddresses": [
                18
            ],
            "getpeerinfo": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "listbanned": [
                18,
                17,
                16,
                15,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "ping": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "setban": [
                18,
                17,
                16,
                15,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "setnetworkactive": [
                18,
                17,
                16,
                15,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "getdeprecationinfo": [
                "zec"
            ],
            "getexcessiveblock": [
                "bch"
            ],
            "setexcessiveblock": [
                "bch"
            ]
        },
        "Rawtransactions": {
            "analyzepsbt": [
                18
            ],
            "combinepsbt": [
                18,
                17
            ],
            "combinerawtransaction": [
                18,
                17,
                16,
                15,
                "bch"
            ],
            "converttopsbt": [
                18,
                17
            ],
            "createpsbt": [
                18,
                17
            ],
            "createrawtransaction": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "decodepsbt": [
                18,
                17
            ],
            "decoderawtransaction": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "decodescript": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "finalizepsbt": [
                18,
                17
            ],
            "fundrawtransaction": [
                18,
                17,
                16,
                15,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getrawtransaction": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "joinpsbts": [
                18
            ],
            "sendrawtransaction": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "signrawtransaction": [
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "signrawtransactionwithkey": [
                18,
                17,
                "bch"
            ],
            "testmempoolaccept": [
                18,
                17,
                "bch"
            ],
            "utxoupdatepsbt": [
                18
            ]
        },
        "Util": {
            "createmultisig": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "deriveaddresses": [
                18
            ],
            "estimatefee": [
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "estimatesmartfee": [
                18,
                17,
                16,
                15,
                12,
                13,
                14,
                "dash",
                "doge"
            ],
            "getdescriptorinfo": [
                18
            ],
            "signmessagewithprivkey": [
                18,
                17,
                16,
                15,
                13,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "validateaddress": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "verifymessage": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "estimatepriority": [
                11,
                12,
                13,
                14,
                "zec",
                "doge"
            ],
            "z_validateaddress": [
                "zec"
            ],
            "estimatesmartpriority": [
                12,
                13,
                14,
                "doge"
            ]
        },
        "Wallet": {
            "abandontransaction": [
                18,
                17,
                16,
                15,
                12,
                13,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "abortrescan": [
                18,
                17,
                16,
                15,
                "bch"
            ],
            "addmultisigaddress": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "addwitnessaddress": [
                15,
                13,
                14,
                "doge"
            ],
            "backupwallet": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "bumpfee": [
                18,
                17,
                16,
                15,
                14,
                "doge"
            ],
            "createwallet": [
                18,
                17
            ],
            "dumpprivkey": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "dumpwallet": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "encryptwallet": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getaccount": [
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getaccountaddress": [
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "dash",
                "doge"
            ],
            "getaddressbyaccount": [
                17
            ],
            "getaddressesbyaccount": [
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getaddressesbylabel": [
                18,
                17
            ],
            "getaddressinfo": [
                18,
                17,
                "bch"
            ],
            "getbalance": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getnewaddress": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getrawchangeaddress": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getreceivedbyaccount": [
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "dash",
                "doge"
            ],
            "getreceivedbyaddress": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getreceivedbylabel": [
                18,
                "bch"
            ],
            "gettransaction": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getunconfirmedbalance": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "getwalletinfo": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "importaddress": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "importmulti": [
                18,
                17,
                16,
                15,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "importprivkey": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "importprunedfunds": [
                18,
                17,
                16,
                15,
                13,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "importpubkey": [
                18,
                17,
                16,
                15,
                12,
                13,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "importwallet": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "keypoolrefill": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "listaccounts": [
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "listaddressgroupings": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "listlabels": [
                18,
                17
            ],
            "listlockunspent": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "listreceivedbyaccount": [
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "dash",
                "doge"
            ],
            "listreceivedbyaddress": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "listreceivedbylabel": [
                18,
                "bch"
            ],
            "listsinceblock": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "listtransactions": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "listunspent": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "listwalletdir": [
                18
            ],
            "listwallets": [
                18,
                17,
                16,
                15,
                "bch"
            ],
            "loadwallet": [
                18,
                17,
                "bch"
            ],
            "lockunspent": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "move": [
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "removeprunedfunds": [
                18,
                17,
                16,
                15,
                13,
                14,
                "bch",
                "dash",
                "doge"
            ],
            "rescanblockchain": [
                18,
                17,
                16,
                "bch"
            ],
            "sendfrom": [
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "sendmany": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "sendtoaddress": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "setaccount": [
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "dash",
                "doge"
            ],
            "sethdseed": [
                18,
                17
            ],
            "setlabel": [
                18,
                "bch"
            ],
            "settxfee": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "signmessage": [
                18,
                17,
                16,
                15,
                11,
                12,
                13,
                14,
                "zec",
                "bch",
                "dash",
                "doge"
            ],
            "signrawtransactionwithwallet": [
                18,
                17,
                "bch"
            ],
            "unloadwallet": [
                18,
                17
            ],
            "walletcreatefundedpsbt": [
                18,
                17
            ],
            "walletlock": [
                18,
                17,
                16,
                15
            ],
            "walletpassphrase": [
                18,
                17,
                16,
                15
            ],
            "walletpassphrasechange": [
                18,
                17,
                16,
                15
            ],
            "walletprocesspsbt": [
                18,
                17
            ],
            "z_exportkey": [
                "zec"
            ],
            "z_exportviewingkey": [
                "zec"
            ],
            "z_exportwallet": [
                "zec"
            ],
            "z_getbalance": [
                "zec"
            ],
            "z_getmigrationstatus": [
                "zec"
            ],
            "z_getnewaddress": [
                "zec"
            ],
            "z_getoperationresult": [
                "zec"
            ],
            "z_getoperationstatus": [
                "zec"
            ],
            "z_gettotalbalance": [
                "zec"
            ],
            "z_importkey": [
                "zec"
            ],
            "z_importviewingkey": [
                "zec"
            ],
            "z_importwallet": [
                "zec"
            ],
            "z_listaddresses": [
                "zec"
            ],
            "z_listoperationids": [
                "zec"
            ],
            "z_listreceivedbyaddress": [
                "zec"
            ],
            "z_listunspent": [
                "zec"
            ],
            "z_mergetoaddress": [
                "zec"
            ],
            "z_sendmany": [
                "zec"
            ],
            "z_setmigration": [
                "zec"
            ],
            "z_shieldcoinbase": [
                "zec"
            ],
            "zcbenchmark": [
                "zec"
            ],
            "zcrawjoinsplit": [
                "zec"
            ],
            "zcrawkeygen": [
                "zec"
            ],
            "zcrawreceive": [
                "zec"
            ],
            "zcsamplejoinsplit": [
                "zec"
            ],
            "getlabeladdress": [
                "bch"
            ],
            "dumphdinfo": [
                "dash"
            ],
            "importelectrumwallet": [
                "dash"
            ],
            "instantsendtoaddress": [
                "dash"
            ],
            "keepass": [
                "dash"
            ],
            "listaddressbalances": [
                "dash"
            ],
            "setprivatesendamount": [
                "dash"
            ],
            "setprivatesendrounds": [
                "dash"
            ]
        },
        "Zmq": {
            "getzmqnotifications": [
                18,
                17
            ]
        },
        "Disclosure": {
            "z_getpaymentdisclosure": [
                "zec"
            ],
            "z_validatepaymentdisclosure": [
                "zec"
            ]
        },
        "Addressindex": {
            "getaddressbalance": [
                "dash"
            ],
            "getaddressdeltas": [
                "dash"
            ],
            "getaddressmempool": [
                "dash"
            ],
            "getaddresstxids": [
                "dash"
            ],
            "getaddressutxos": [
                "dash"
            ]
        },
        "Dash": {
            "getgovernanceinfo": [
                "dash"
            ],
            "getpoolinfo": [
                "dash"
            ],
            "getsuperblockbudget": [
                "dash"
            ],
            "gobject": [
                "dash"
            ],
            "masternode": [
                "dash"
            ],
            "mnsync": [
                "dash"
            ],
            "privatesend": [
                "dash"
            ],
            "spork": [
                "dash"
            ],
            "voteraw": [
                "dash"
            ]
        },
        "Evo": {
            "bls": [
                "dash"
            ],
            "protx": [
                "dash"
            ],
            "quorum": [
                "dash"
            ]
        }
    },
    "help": {
        "15": {
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"   (string, required) The name of the account to move funds from. May be the default account using \".<br>2. \"toaccount\"     (string, required) The name of the account to move funds to. May be the default account using \".<br>3. amount            (numeric) Quantity of BTC to move between accounts.<br>4. (dummy)           (numeric, optional) Ignored. Remains for backward compatibility.<br>5. \"comment\"       (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false           (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 BTC from the default account to the account named tabby<br> bitcoin-cli move \" \"tabby\" 0.01<br><br>Move 0.01 BTC timotei to akiko with a comment and funds have 6 confirmations<br> bitcoin-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( include_watchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"                  (string, required) The transaction id<br>2. \"include_watchonly\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in BTC<br>  \"fee\": x.xxx,            (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                              \'send\' category of transactions.<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",      (string) DEPRECATED. The account name involved in the transaction, can be \" for the default account.<br>      \"address\" : \"address\",          (string) The bitcoin address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either \'send\' or \'receive\'<br>      \"amount\" : x.xxx,                 (numeric) The amount in BTC<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                       (numeric) the vout value<br>      \"fee\": x.xxx,                     (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                           \'send\' category of transactions.<br>      \"abandoned\": xxx                  (bool) \'true\' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                           \'send\' category of transactions.<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getinfo": "getinfo<br><br>DEPRECATED. Returns an object containing various state info.<br><br>Result:<br>{<br>  \"deprecation-warning\": \"...\" (string) warning that the getinfo command is deprecated and will be removed in 0.16<br>  \"version\": xxxxx,           (numeric) the server version<br>  \"protocolversion\": xxxxx,   (numeric) the protocol version<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet<br>  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server<br>  \"timeoffset\": xxxxx,        (numeric) the time offset<br>  \"connections\": xxxxx,       (numeric) the number of connections<br>  \"proxy\": \"host:port\",       (string, optional) the proxy used by the server<br>  \"difficulty\": xxxxxx,       (numeric) the current difficulty<br>  \"testnet\": true|false,      (boolean) if the server is using testnet or not<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in BTC/kB<br>  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for transactions in BTC/kB<br>  \"errors\": \"...\"             (string) any error messages<br>}<br><br>Examples:<br> bitcoin-cli getinfo <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getmempoolancestors": "getmempoolancestors txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool ancestors.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempoolancestors \"mytxid\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getreceivedbyaccount": "getreceivedbyaccount \"account\" ( minconf )<br><br>DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. \"account\"      (string, required) The selected account, may be the default account using \".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>Amount received by the default account with at least 1 confirmation<br> bitcoin-cli getreceivedbyaccount \"<br><br>Amount received at the tabby account including unconfirmed amounts with zero confirmations<br> bitcoin-cli getreceivedbyaccount \"tabby\" 0<br><br>The amount with at least 6 confirmations<br> bitcoin-cli getreceivedbyaccount \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "walletpassphrasechange": "walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"<br><br>Changes the wallet passphrase from \'oldpassphrase\' to \'newpassphrase\'.<br><br>Arguments:<br>1. \"oldpassphrase\"      (string) The current passphrase<br>2. \"newpassphrase\"      (string) The new passphrase<br><br>Examples:<br> bitcoin-cli walletpassphrasechange \"old one\" \"new one\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrasechange\", \"params\": [\"old one\", \"new one\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included manually (by blockhash).<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"blockhash\"   (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "combinerawtransaction": "combinerawtransaction [\"hexstring\",...]<br><br>Combine multiple partially signed transactions into one transaction.<br>The combined transaction may be another partially signed transaction or a <br>fully signed transaction.<br>Arguments:<br>1. \"txs\"         (string) A json array of hex strings of partially signed transactions<br>    [<br>      \"hexstring\"     (string) A transaction hash<br>      ,...<br>    ]<br><br>Result:<br>\"hex\"            (string) The hex-encoded raw transaction with signature(s)<br><br>Examples:<br> bitcoin-cli combinerawtransaction [\"myhex1\", \"myhex2\", \"myhex3\"]",
            "stop": "stop<br><br>Stop Bitcoin server.",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" ( options )<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add at most one change output to the outputs.<br>No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must be<br>in the wallet using importaddress or addmultisigaddress (to calculate fees).<br>You can see whether this is the case by checking the \"solvable\" field in the listunspent output.<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. \"hexstring\"           (string, required) The hex string of the raw transaction<br>2. options                 (object, optional)<br>   {<br>     \"changeAddress\"          (string, optional, default pool address) The bitcoin address to receive the change<br>     \"changePosition\"         (numeric, optional, default random) The index of the change output<br>     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only<br>     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs<br>     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (BTC per KB)<br>     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.<br>                              The fee will be equally deducted from the amount of each specified output.<br>                              The outputs are specified by their zero-based index, before any change output is added.<br>                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                              If no outputs are specified here, the sender pays the fee.<br>                                  [vout_index,...]<br>     \"replaceable\"            (boolean, optional) Marks this transaction as BIP125 replaceable.<br>                              Allows this transaction to be replaced by a transaction with higher fees<br>     \"conf_target\"            (numeric, optional) Confirmation target (in blocks)<br>     \"estimate_mode\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>         \"UNSET\"<br>         \"ECONOMICAL\"<br>         \"CONSERVATIVE\"<br>   }<br>                         for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee in BTC the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> bitcoin-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> bitcoin-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> bitcoin-cli sendrawtransaction \"signedtransactionhex",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB. Overwrites the paytxfee parameter.<br><br>Arguments:<br>1. amount         (numeric or string, required) The transaction fee in BTC/kB<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> bitcoin-cli settxfee 0.00001<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "prioritisetransaction": "prioritisetransaction <txid> <dummy value> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. dummy          (numeric, optional) API-Compatibility for previous API. Must be zero or null.<br>                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.<br>3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result:<br>true              (boolean) Returns true<br><br>Examples:<br> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "listreceivedbyaccount": "listreceivedbyaccount ( minconf include_empty include_watchonly)<br><br>DEPRECATED. List balances by account.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include accounts that haven\'t received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see \'importaddress\').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",  (string) The account name of the receiving account<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account<br>    \"confirmations\" : n,          (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"           (string) A comment for the address/transaction, if any<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaccount <br> bitcoin-cli listreceivedbyaccount 6 true<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> bitcoin-cli getchaintips <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getmempooldescendants": "getmempooldescendants txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool descendants.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempooldescendants \"mytxid\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Arguments:<br>1. \"script\"           (string, required) The hex-encoded script (or address)<br>2. \"label\"            (string, optional, default=\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Note: This call can take minutes to complete if rescan is true.<br>If you have the full public key, you should call importpubkey instead of this.<br><br>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated<br>as change, and not show up in many RPCs.<br><br>Examples:<br><br>Import a script with rescan<br> bitcoin-cli importaddress \"myscript\"<br><br>Import using a label without rescan<br> bitcoin-cli importaddress \"myscript\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myscript\", \"testing\", false] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"address\" amount ( \"comment\" \"comment_to\" subtractfeefromamount replaceable conf_target \"estimate_mode\")<br><br>Send an amount to a given address.<br><br>Arguments:<br>1. \"address\"            (string, required) The bitcoin address to send to.<br>2. \"amount\"             (numeric or string, required) The amount in BTC to send. eg 0.1<br>3. \"comment\"            (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment_to\"         (string, optional) A comment to store the name of the person or organization <br>                             to which you\'re sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less bitcoins than you enter in the amount field.<br>6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125<br>7. conf_target            (numeric, optional) Confirmation target (in blocks)<br>8. \"estimate_mode\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>       \"UNSET\"<br>       \"ECONOMICAL\"<br>       \"CONSERVATIVE\"<br><br>Result:<br>\"txid\"                  (string) The transaction id.<br><br>Examples:<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \" \" true<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getmempoolentry": "getmempoolentry txid<br><br>Returns mempool data for given transaction<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br><br>Result:<br>{                           (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>}<br><br>Examples:<br> bitcoin-cli getmempoolentry \"mytxid\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "removeprunedfunds": "removeprunedfunds \"txid\"<br><br>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.<br><br>Arguments:<br>1. \"txid\"           (string, required) The hex-encoded id of the transaction you are deleting<br><br>Examples:<br> bitcoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removeprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletname\": xxxxx,             (string) the wallet name<br>  \"walletversion\": xxxxx,          (numeric) the wallet version<br>  \"balance\": xxxxxxx,              (numeric) the total confirmed balance of the wallet in BTC<br>  \"unconfirmed_balance\": xxx,      (numeric) the total unconfirmed balance of the wallet in BTC<br>  \"immature_balance\": xxxxxx,      (numeric) the total immature balance of the wallet in BTC<br>  \"txcount\": xxxxxxx,              (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,         (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,             (numeric) how many new keys are pre-generated (only counts external keys)<br>  \"keypoolsize_hd_internal\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)<br>  \"unlocked_until\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,              (numeric) the transaction fee configuration, set in BTC/kB<br>  \"hdmasterkeyid\": \"<hash160>\"     (string) the Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> bitcoin-cli getwalletinfo <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "preciousblock": "preciousblock \"blockhash\"<br><br>Treats a block as if it were received before others with the same work.<br><br>A later preciousblock call can override the effect of an earlier one.<br><br>The effects of preciousblock are not retained across restarts.<br><br>Arguments:<br>1. \"blockhash\"   (string, required) the hash of the block to mark as precious<br><br>Result:<br><br>Examples:<br> bitcoin-cli preciousblock \"blockhash\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) the best block hash hex<br>  \"transactions\": n,      (numeric) The number of transactions<br>  \"txouts\": n,            (numeric) The number of output transactions<br>  \"bogosize\": n,          (numeric) A meaningless metric for UTXO set size<br>  \"hash_serialized_2\": \"hash\", (string) The serialized hash<br>  \"disk_size\": n,         (numeric) The estimated size of the chainstate on disk<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> bitcoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "addwitnessaddress": "addwitnessaddress \"address\"<br><br>Add a witness address for a script (with pubkey or redeemscript known). Requires a new wallet backup.<br>It returns the witness script.<br><br>Arguments:<br>1. \"address\"       (string, required) An address known to the wallet<br><br>Result:<br>\"witnessaddress\",  (string) The value of the new address (P2SH of witness script).<br>}",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"account\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.<br>Each key is a Bitcoin address or hex-encoded public key.<br>If \'account\' is specified (DEPRECATED), assign address to that account.<br><br>Arguments:<br>1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"         (string, required) A json array of bitcoin addresses or hex-encoded public keys<br>     [<br>       \"address\"  (string) bitcoin address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"account\"      (string, optional) DEPRECATED. An account to assign the addresses to.<br><br>Result:<br>\"address\"         (string) A bitcoin address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> bitcoin-cli addmultisigaddress 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getreceivedbyaddress": "getreceivedbyaddress \"address\" ( minconf )<br><br>Returns the total amount received by the given address in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in BTC received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 0<br><br>The amount with at least 6 confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", 6] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "gettxout": "gettxout \"txid\" n ( include_mempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"             (string, required) The transaction id<br>2. \"n\"                (numeric, required) vout number<br>3. \"include_mempool\"  (boolean, optional) Whether to include the mempool. Default: true.     Note that an unspent output that is spent in the mempool won\'t appear.<br><br>Result:<br>{<br>  \"bestblock\" : \"hash\",    (string) the block hash<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in BTC<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of bitcoin addresses<br>        \"address\"     (string) bitcoin address<br>        ,...<br>     ]<br>  },<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> bitcoin-cli listunspent <br><br>View the details<br> bitcoin-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"account\" minconf include_watchonly )<br><br>If account is not specified, returns the server\'s total available balance.<br>If account is specified (DEPRECATED), returns the balance in the account.<br>Note that the account \" is not the same as leaving the parameter out.<br>The server total may be different to the balance in the default \" account.<br><br>Arguments:<br>1. \"account\"         (string, optional) DEPRECATED. The account string may be given as a<br>                     specific account name to find the balance associated with wallet keys in<br>                     a named account, or as the empty string (\") to find the balance<br>                     associated with wallet keys not in any named account, or as \"*\" to find<br>                     the balance associated with all wallet keys regardless of account.<br>                     When this option is specified, it calculates the balance in a different<br>                     way than when it is not specified, and which can count spends twice when<br>                     there are conflicting pending transactions (such as those created by<br>                     the bumpfee command), temporarily resulting in low or even negative<br>                     balances. In general, account balance calculation is not considered<br>                     reliable and has resulted in confusing outcomes, so it is recommended to<br>                     avoid passing this argument.<br>2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see \'importaddress\')<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>The total amount in the wallet with 1 or more confirmations<br> bitcoin-cli getbalance <br><br>The total amount in the wallet at least 6 blocks confirmed<br> bitcoin-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "bumpfee": "bumpfee \"txid\" ( options ) <br><br>Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.<br>An opt-in RBF transaction with the given txid must be in the wallet.<br>The command will pay the additional fee by decreasing (or perhaps removing) its change output.<br>If the change output is not big enough to cover the increased fee, the command will currently fail<br>instead of adding new inputs to compensate. (A future implementation could improve this.)<br>The command will fail if the wallet or mempool contains a transaction that spends one of T\'s outputs.<br>By default, the new fee will be calculated automatically using estimatefee.<br>The user can specify a confirmation target for estimatefee.<br>Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.<br>At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee<br>returned by getnetworkinfo) to enter the node\'s mempool.<br><br>Arguments:<br>1. txid                  (string, required) The txid to be bumped<br>2. options               (object, optional)<br>   {<br>     \"confTarget\"        (numeric, optional) Confirmation target (in blocks)<br>     \"totalFee\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.<br>                         In rare cases, the actual fee paid might be slightly higher than the specified<br>                         totalFee if the tx change output has to be removed because it is too close to<br>                         the dust threshold.<br>     \"replaceable\"       (boolean, optional, default true) Whether the new transaction should still be<br>                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will<br>                         be left unchanged from the original. If false, any input sequence numbers in the<br>                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe<br>                         so the new transaction will not be explicitly bip-125 replaceable (though it may<br>                         still be replaceable in practice, for example if it has unconfirmed ancestors which<br>                         are replaceable).<br>     \"estimate_mode\"     (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>         \"UNSET\"<br>         \"ECONOMICAL\"<br>         \"CONSERVATIVE\"<br>   }<br><br>Result:<br>{<br>  \"txid\":    \"value\",   (string)  The id of the new transaction<br>  \"origfee\":  n,         (numeric) Fee of the replaced transaction<br>  \"fee\":      n,         (numeric) Fee of the new transaction<br>  \"errors\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)<br>}<br><br>Examples:<br><br>Bump the fee, get the new transaction\'s txid<br> bitcoin-cli bumpfee <txid>",
            "importprunedfunds": "importprunedfunds<br><br>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.<br><br>Arguments:<br>1. \"rawtransaction\" (string, required) A raw transaction in hex funding an already-existing address in wallet<br>2. \"txoutproof\"     (string, required) The hex output from gettxoutproof that contains the transaction",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server\'s total unconfirmed balance",
            "getblocktemplate": "getblocktemplate ( TemplateRequest )<br><br>If the request parameters include a \'mode\' key, that is used to explicitly select between the default \'template\' request or a \'proposal\'.<br>It returns data needed to construct a block to work on.<br>For full specification, see BIPs 22, 23, 9, and 145:<br>    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes<br>    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki<br><br>Arguments:<br>1. template_request         (json object, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted<br>       \"capabilities\":[     (array, optional) A list of strings<br>           \"support\"          (string) client side supported feature, \'longpoll\', \'coinbasetxn\', \'coinbasevalue\', \'proposal\', \'serverlist\', \'workid\'<br>           ,...<br>       ],<br>       \"rules\":[            (array, optional) A list of strings<br>           \"support\"          (string) client side supported softfork deployment<br>           ,...<br>       ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The preferred block version<br>  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced<br>  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments<br>      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule<br>      ,...<br>  },<br>  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions<br>  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal<br>         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)<br>         \"depends\" : [                (array) array of numbers <br>             n                          (numeric) transactions before this one (by 1-based index in \'transactions\' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn\'t one<br>         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero<br>         \"weight\" : n,                (numeric) total transaction weight, as counted for purposes of block limits<br>         \"required\" : true|false      (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase\'s scriptSig content<br>      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig<br>  },<br>  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)<br>  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",                (string) The hash target<br>  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                     (array of string) list of ways the block template may be changed <br>     \"value\"                          (string) A way the block template may be changed, e.g. \'time\', \'transactions\', \'prevblock\'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"weightlimit\" : n,                (numeric) limit of block weight<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> bitcoin-cli getblocktemplate <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getchaintxstats": "getchaintxstats ( nblocks blockhash )<br><br>Compute statistics about the total number and rate of transactions in the chain.<br><br>Arguments:<br>1. nblocks      (numeric, optional) Size of the window in number of blocks (default: one month).<br>2. \"blockhash\"  (string, optional) The hash of the block that ends the window.<br><br>Result:<br>{<br>  \"time\": xxxxx,        (numeric) The timestamp for the statistics in UNIX format.<br>  \"txcount\": xxxxx,     (numeric) The total number of transactions in the chain up to that point.<br>  \"txrate\": x.xx,       (numeric) The average rate of transactions per second in the window.<br>}<br><br>Examples:<br> bitcoin-cli getchaintxstats <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "generate": "generate nblocks ( maxtries )<br><br>Mine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> bitcoin-cli generate 11",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The IP address and port of the peer<br>    \"addrbind\":\"ip:port\",    (string) Bind address of the connection to the peer<br>    \"addrlocal\":\"ip:port\",   (string) Local address as reported by the peer<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time (if available)<br>    \"minping\": n,              (numeric) minimum observed ping time (if any at all)<br>    \"pingwait\": n,             (numeric) ping wait (if non-zero)<br>    \"version\": v,              (numeric) The peer version, such as 7001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"addnode\": true|false,     (boolean) Whether connection was due to addnode and is using an addnode slot<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we\'re currently asking from this peer<br>       ...<br>    ],<br>    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted<br>    \"bytessent_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes sent aggregated by message type<br>       ...<br>    },<br>    \"bytesrecv_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes received aggregated by message type<br>       ...<br>    }<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getpeerinfo <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networkactive\": true|false,           (bool) whether p2p networking is enabled<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in BTC/kB<br>  \"incrementalfee\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network warnings<br>}<br><br>Examples:<br> bitcoin-cli getnetworkinfo <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"        (string, required) The account name.<br><br>Result:<br>[                     (json array of string)<br>  \"address\"         (string) a bitcoin address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "logging": "logging [include,...] <exclude><br>Gets and sets the logging configuration.<br>When called without an argument, returns the list of categories that are currently being debug logged.<br>When called with arguments, adds or removes categories from debug logging.<br>The valid logging categories are: net, tor, mempool, http, bench, zmq, db, rpc, estimatefee, addrman, selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej, libevent, coindb, qt, leveldb<br>libevent logging is configured on startup and cannot be modified by this RPC during runtime.Arguments:<br>1. \"include\" (array of strings) add debug logging for these categories.<br>2. \"exclude\" (array of strings) remove debug logging for these categories.<br><br>Result: <categories>  (string): a list of the logging categories that are active.<br><br>Examples:<br> bitcoin-cli logging \"[\"all\"]\" \"[\"http\"]\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"logging\", \"params\": [[\"all\"], \"[libevent]\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts to add or remove a node from the addnode list.<br>Or try a connection to a node once.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) \'add\' to add a node to the list, \'remove\' to remove a node from the list, \'onetry\' to try a connection to the node once<br><br>Examples:<br> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "walletpassphrase": "walletpassphrase \"passphrase\" timeout<br><br>Stores the wallet decryption key in memory for \'timeout\' seconds.<br>This is needed prior to performing transactions related to private keys such as sending bitcoins<br><br>Arguments:<br>1. \"passphrase\"     (string, required) The wallet passphrase<br>2. timeout            (numeric, required) The time to keep the decryption key in seconds.<br><br>Note:<br>Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock<br>time that overrides the old one.<br><br>Examples:<br><br>Unlock the wallet for 60 seconds<br> bitcoin-cli walletpassphrase \"my pass phrase\" 60<br><br>Lock the wallet again (before 60 seconds)<br> bitcoin-cli walletlock <br><br>As json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrase\", \"params\": [\"my pass phrase\", 60] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock ([{\"txid\":\"txid\",\"vout\":n},...])<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.<br>A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf  [\"addresses\",...] [include_unsafe] [query_options])<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"      (string) A json array of bitcoin addresses to filter<br>    [<br>      \"address\"     (string) bitcoin address<br>      ,...<br>    ]<br>4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend<br>                  See description of \"safe\" attribute below.<br>5. query_options    (json, optional) JSON with query options<br>    {<br>      \"minimumAmount\"    (numeric or string, default=0) Minimum value of each UTXO in BTC<br>      \"maximumAmount\"    (numeric or string, default=unlimited) Maximum value of each UTXO in BTC<br>      \"maximumCount\"     (numeric or string, default=unlimited) Maximum number of UTXOs<br>      \"minimumSumAmount\" (numeric or string, default=unlimited) Minimum sum value of all UTXOs in BTC<br>    }<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",    (string) the bitcoin address<br>    \"account\" : \"account\",    (string) DEPRECATED. The associated account, or \" for the default account<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction output amount in BTC<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH<br>    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output<br>    \"solvable\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys<br>    \"safe\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions<br>                              from outside keys and unconfirmed replacement transactions are considered unsafe<br>                              and are not eligible for spending by fundrawtransaction and sendtoaddress.<br>  }<br>  ,...<br>]<br><br>Examples<br> bitcoin-cli listunspent <br> bitcoin-cli listunspent 6 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/<br> bitcoin-cli listunspent 6 9999999 \'[]\' true \'{ \"minimumAmount\": 0.005 }\'<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999, [] , true, { \"minimumAmount\": 0.005 } ] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> bitcoin-cli listbanned <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,\"data\":\"hex\",...} ( locktime ) ( replaceable )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction\'s inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"inputs\"                (array, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",    (string, required) The transaction id<br>         \"vout\":n,         (numeric, required) The output number<br>         \"sequence\":n      (numeric, optional) The sequence number<br>       } <br>       ,...<br>     ]<br>2. \"outputs\"               (object, required) a json object with outputs<br>    {<br>      \"address\": x.xxx,    (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the BTC amount<br>      \"data\": \"hex\"      (string, required) The key is \"data\", the value is hex encoded data<br>      ,...<br>    }<br>3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br>4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.<br>                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.<br><br>Result:<br>\"transaction\"              (string) hex string of the transaction<br><br>Examples:<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"data\":\"00010203\"}\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"data\":\"00010203\"}\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getaccountaddress": "getaccountaddress \"account\"<br><br>DEPRECATED. Returns the current Bitcoin address for receiving payments to this account.<br><br>Arguments:<br>1. \"account\"       (string, required) The account name for the address. It can also be set to the empty string \" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.<br><br>Result:<br>\"address\"          (string) The account bitcoin address<br><br>Examples:<br> bitcoin-cli getaccountaddress <br> bitcoin-cli getaccountaddress \"<br> bitcoin-cli getaccountaddress \"myaccount\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "setban": "setban \"subnet\" \"add|remove\" (bantime) (absolute)<br><br>Attempts to add or remove an IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"subnet\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)<br>2. \"command\"      (string, required) \'add\' to add an IP/Subnet to the list, \'remove\' to remove an IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400<br> bitcoin-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf include_empty include_watchonly)<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include addresses that haven\'t received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see \'importaddress\').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. The account of the receiving address. The default account is \".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in BTC received by the address<br>    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\",               (string) A comment for the address/transaction, if any<br>    \"txids\": [<br>       n,                                (numeric) The ids of transactions received with the address <br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaddress <br> bitcoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "listaccounts": "listaccounts ( minconf include_watchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see \'importaddress\')<br><br>Result:<br>{                      (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> bitcoin-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> bitcoin-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> bitcoin-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "estimatefee": "estimatefee nblocks<br><br>DEPRECATED. Please use estimatesmartfee for more intelligent estimates.<br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks. Uses virtual transaction size of transaction<br>as defined in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. nblocks     (numeric, required)<br><br>Result:<br>n              (numeric) estimated fee-per-kilobyte<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br>-1 is always returned for nblocks == 1 as it is impossible to calculate<br>a fee that is high enough to get reliably included in the next block.<br><br>Example:<br> bitcoin-cli estimatefee 6",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum feerate (BTC per KB) for tx to be accepted<br>}<br><br>Examples:<br> bitcoin-cli getmempoolinfo <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest blockchain.<br><br>Result:<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples:<br> bitcoin-cli getbestblockhash <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or \'null\' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\",   (string, required for P2SH or P2WSH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"privkeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or \'null\' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "walletlock": "walletlock<br><br>Removes the wallet encryption key from memory, locking the wallet.<br>After calling this method, you will need to call walletpassphrase again<br>before being able to call any methods which require the wallet to be unlocked.<br><br>Examples:<br><br>Set the passphrase for 2 minutes to perform a transaction<br> bitcoin-cli walletpassphrase \"my pass phrase\" 120<br><br>Perform a send (requires passphrase set)<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 1.0<br><br>Clear the passphrase since we are done before 2 minutes is up<br> bitcoin-cli walletlock <br><br>As json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletlock\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> bitcoin-cli getdifficulty <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"account\" )<br><br>Returns a new Bitcoin address for receiving payments.<br>If \'account\' is specified (DEPRECATED), it is added to the address book <br>so payments received with the address will be credited to \'account\'.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \" is used. It can also be set to the empty string \" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.<br><br>Result:<br>\"address\"    (string) The new bitcoin address<br><br>Examples:<br> bitcoin-cli getnewaddress <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Hint: use getmempoolentry to fetch a specific transaction from the mempool.<br><br>Arguments:<br>1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getrawmempool true<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding blockchain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",        (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\", (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,     (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,     (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal<br>  \"pruned\": xx,             (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,    (numeric) lowest-height complete block stored<br>  \"softforks\": [            (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",        (string) name of softfork<br>        \"version\": xx,         (numeric) block version<br>        \"reject\": {            (object) progress toward rejecting pre-softfork blocks<br>           \"status\": xx,       (boolean) true if threshold reached<br>        },<br>     }, ...<br>  ],<br>  \"bip9_softforks\": {          (object) status of BIP9 softforks in progress<br>     \"xxxx\" : {                (string) name of the softfork<br>        \"status\": \"xxxx\",    (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"<br>        \"bit\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)<br>        \"startTime\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning<br>        \"timeout\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in<br>        \"since\": xx,           (numeric) height of the first block to which the status applies<br>        \"statistics\": {        (object) numeric statistics about BIP9 signalling for a softfork (only for \"started\" status)<br>           \"period\": xx,       (numeric) the length in blocks of the BIP9 signalling period <br>           \"threshold\": xx,    (numeric) the number of blocks with the version bit set required to activate the feature <br>           \"elapsed\": xx,      (numeric) the number of blocks elapsed since the beginning of the current period <br>           \"count\": xx,        (numeric) the number of blocks with the version bit set in the current period <br>           \"possible\": xx      (boolean) returns false if there are not enough blocks left in this period to pass activation threshold <br>        }<br>     }<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getblockchaininfo <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "importprivkey": "importprivkey \"privkey\" ( \"label\" ) ( rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.<br><br>Arguments:<br>1. \"privkey\"          (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Dump a private key<br> bitcoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> bitcoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"testing\" false<br><br>Import using default blank label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "validateaddress": "validateaddress \"address\"<br><br>Return information about the given bitcoin address.<br><br>Arguments:<br>1. \"address\"     (string, required) The bitcoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"address\", (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"script\" : \"type\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash<br>  \"hex\" : \"hex\",                (string, optional) The redeemscript for the p2sh address<br>  \"addresses\"                   (string, optional) Array of addresses associated with the known redeemscript<br>    [<br>      \"address\"<br>      ,...<br>    ]<br>  \"sigsrequired\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output<br>  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key<br>  \"iscompressed\" : true|false,  (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \" is the default account<br>  \"timestamp\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)<br>  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available<br>  \"hdmasterkeyid\" : \"<hash160>\" (string, optional) The Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> bitcoin-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "pruneblockchain": "pruneblockchain<br><br>Arguments:<br>1. \"height\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp<br>                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.<br><br>Result:<br>n    (numeric) Height of the last block pruned.<br><br>Examples:<br> bitcoin-cli pruneblockchain 1000<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> bitcoin-cli getconnectioncount <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with \'passphrase\'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt your wallet<br> bitcoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending bitcoin<br> bitcoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can do something like sign<br> bitcoin-cli signmessage \"address\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> bitcoin-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash height<br><br>Returns hash of block in best-block-chain at height provided.<br><br>Arguments:<br>1. height         (numeric, required) The height index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> bitcoin-cli getblockhash 1000<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> bitcoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> bitcoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.<br>Imported scripts are not currently included in wallet dumps, these must be backed up separately.<br>Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by<br>only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename with path (either absolute or relative to bitcoind)<br><br>Result:<br>{                           (json object)<br>  \"filename\" : {        (string) The filename with full absolute path<br>}<br><br>Examples:<br> bitcoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getaccount": "getaccount \"address\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> bitcoin-cli getaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getnettotals <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "estimatesmartfee": "estimatesmartfee conf_target (\"estimate_mode\")<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within conf_target blocks if possible and return the number of blocks<br>for which the estimate is valid. Uses virtual transaction size as defined<br>in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)<br>2. \"estimate_mode\" (string, optional, default=CONSERVATIVE) The fee estimate mode.<br>                   Whether to return a more conservative estimate which also satisfies<br>                   a longer history. A conservative estimate potentially returns a<br>                   higher feerate and is more likely to be sufficient for the desired<br>                   target, but is not as responsive to short term drops in the<br>                   prevailing fee market.  Must be one of:<br>       \"UNSET\" (defaults to CONSERVATIVE)<br>       \"ECONOMICAL\"<br>       \"CONSERVATIVE\"<br><br>Result:<br>{<br>  \"feerate\" : x.x,     (numeric, optional) estimate fee-per-kilobyte (in BTC)<br>  \"errors\": [ str... ] (json array of strings, optional) Errors encountered during processing<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>The request target will be clamped between 2 and the highest target<br>fee estimation is able to return based on how long it has been running.<br>An error is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br><br>Example:<br> bitcoin-cli estimatesmartfee 6",
            "disconnectnode": "disconnectnode \"[address]\" [nodeid]<br><br>Immediately disconnects from the specified peer node.<br><br>Strictly one out of \'address\' and \'nodeid\' can be provided to identify the node.<br><br>To disconnect by nodeid, either set \'address\' to the empty string, or call using the named \'nodeid\' argument only.<br><br>Arguments:<br>1. \"address\"     (string, optional) The IP address/port of the node<br>2. \"nodeid\"      (number, optional) The node ID (see getpeerinfo for node IDs)<br><br>Examples:<br> bitcoin-cli disconnectnode \"192.168.0.6:8333\"<br> bitcoin-cli disconnectnode \" 1<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\", 1] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "setaccount": "setaccount \"address\" \"account\"<br><br>DEPRECATED. Sets the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to be associated with an account.<br>2. \"account\"         (string, required) The account to assign the address to.<br><br>Examples:<br> bitcoin-cli setaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"tabby\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"tabby\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\"<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hexstring\"      (string, required) The transaction hex string<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg \'pubkeyhash\'<br>         \"addresses\" : [           (json array of string)<br>           \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> bitcoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader \'hash\'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block \'hash\'.<br><br>Examples:<br> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] replaceable conf_target \"estimate_mode\")<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br><br>Arguments:<br>1. \"fromaccount\"         (string, required) DEPRECATED. The account to send the funds from. Should be \" for the default account<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in BTC is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefrom         (array, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"          (string) Subtract fee from this address<br>      ,...<br>    ]<br>6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125<br>7. conf_target            (numeric, optional) Confirmation target (in blocks)<br>8. \"estimate_mode\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>       \"UNSET\"<br>       \"ECONOMICAL\"<br>       \"CONSERVATIVE\"<br><br>Result:<br>\"txid\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \" \"[\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\", \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\", 6, \"testing\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> bitcoin-cli keypoolrefill <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress<br><br>Returns a new Bitcoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> bitcoin-cli getrawchangeaddress <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel nblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. nblocks      (numeric, optional, default=6, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> bitcoin-cli verifychain <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"address\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"address\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "abortrescan": "abortrescan<br><br>Stops current wallet rescan triggered e.g. by an importprivkey call.<br><br>Examples:<br><br>Import a private key<br> bitcoin-cli importprivkey \"mykey\"<br><br>Abort the running wallet rescan<br> bitcoin-cli abortrescan <br><br>As a JSON-RPC call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abortrescan\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "dumpprivkey": "dumpprivkey \"address\"<br><br>Reveals the private key corresponding to \'address\'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"address\"   (string, required) The bitcoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> bitcoin-cli dumpprivkey \"myaddress\"<br> bitcoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> bitcoin-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions ( \"account\" count skip include_watchonly)<br><br>Returns up to \'count\' most recent transactions skipping the first \'from\' transactions for account \'account\'.<br><br>Arguments:<br>1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. skip           (numeric, optional, default=0) The number of transactions to skip<br>4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see \'importaddress\')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \" for the default account.<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. \'move\' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. \'send\' and \'receive\' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the \'send\' category, and for the<br>                                         \'move\' category for moves outbound. It is positive for the \'receive\' category,<br>                                         and for the \'move\' category for inbound funds.<br>    \"label\": \"label\",       (string) A comment for the address/transaction, if any<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                         \'send\' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for \'send\' and <br>                                         \'receive\' category of transactions. Negative confirmations indicate the<br>                                         transaction conflicts with the block chain<br>    \"trusted\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for \'send\' and \'receive\'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for \'send\' and \'receive\'<br>                                          category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\", (string) The transaction id. Available for \'send\' and \'receive\' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for \'send\' and \'receive\' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"otheraccount\": \"accountname\",  (string) DEPRECATED. For the \'move\' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                     may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx          (bool) \'true\' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                         \'send\' category of transactions.<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> bitcoin-cli listtransactions <br><br>List transactions 100 to 120<br> bitcoin-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> bitcoin-cli ping <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblockweight\": nnn, (numeric) The last block weight<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"errors\": \"...\"            (string) Current errors<br>  \"networkhashps\": nnn,      (numeric) The network hashes per second<br>  \"pooledtx\": n              (numeric) The size of the mempool<br>  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)<br>}<br><br>Examples:<br> bitcoin-cli getmininginfo <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies current wallet file to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> bitcoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "signmessagewithprivkey": "signmessagewithprivkey \"privkey\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"privkey\"         (string, required) The private key to sign the message with.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Create the signature<br> bitcoin-cli signmessagewithprivkey \"privkey\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest blockchain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> bitcoin-cli getblockcount <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"       (string, required) A json array of keys which are bitcoin addresses or hex-encoded public keys<br>     [<br>       \"key\"    (string) bitcoin address or hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 addresses<br> bitcoin-cli createmultisig 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\"  ( \"dummy\" )<br><br>Attempts to submit new block to network.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"        (string, required) the hex-encoded block data to submit<br>2. \"dummy\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.<br><br>Result:<br><br>Examples:<br> bitcoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"address\",            (string) The bitcoin address<br>      amount,                 (numeric) The amount in BTC<br>      \"account\"             (string, optional) DEPRECATED. The account<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listaddressgroupings <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose )<br><br>NOTE: By default this function only works for mempool transactions. If the -txindex option is<br>enabled, it also works for blockchain transactions.<br>DEPRECATED: for now, it also works for transactions with unspent outputs.<br><br>Return the raw transaction data.<br><br>If verbose is \'true\', returns an Object with information about \'txid\'.<br>If verbose is \'false\' or omitted, returns a string that is serialized, hex-encoded data for \'txid\'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose       (bool, optional, default=false) If false, return a string, otherwise return a json object<br><br>Result (if verbose is not set or set to false):<br>\"data\"      (string) The serialized, hex-encoded data for \'txid\'<br><br>Result (if verbose is set to true):<br>{<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for \'txid\'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The serialized transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg \'pubkeyhash\'<br>         \"addresses\" : [           (json array of string)<br>           \"address\"        (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> bitcoin-cli getrawtransaction \"mytxid\"<br> bitcoin-cli getrawtransaction \"mytxid\" true<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", true] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "uptime": "uptime<br><br>Returns the total uptime of the server.<br><br>Result:<br>ttt        (numeric) The number of seconds that the server has been running<br><br>Examples:<br> bitcoin-cli uptime <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"uptime\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hexstring\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hexstring\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) bitcoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).<br>}<br><br>Examples:<br> bitcoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "setnetworkactive": "setnetworkactive true|false<br><br>Disable/enable all p2p network activity.<br><br>Arguments:<br>1. \"state\"        (boolean, required) true to enable networking, false to disable",
            "listsinceblock": "listsinceblock ( \"blockhash\" target_confirmations include_watchonly include_removed )<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted.<br>If \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included.<br>Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.<br><br>Arguments:<br>1. \"blockhash\"            (string, optional) The block hash to list transactions since<br>2. target_confirmations:    (numeric, optional, default=1) Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value<br>3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see \'importaddress\')<br>4. include_removed:         (bool, optional, default=true) Show transactions that were removed due to a reorg in the \"removed\" array<br>                                                           (not guaranteed to work on pruned nodes)<br><br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \" for the default account.<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. \'send\' has negative amounts, \'receive\' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the \'send\' category, and for the \'move\' category for moves <br>                                          outbound. It is positive for the \'receive\' category, and for the \'move\' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the \'send\' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for \'send\' and \'receive\' category of transactions.<br>                                          When it\'s < 0, it means the transaction conflicted that many blocks ago.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for \'send\' and \'receive\' category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for \'send\' and \'receive\' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for \'send\' and \'receive\' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for \'send\' and \'receive\' category of transactions.<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx,         (bool) \'true\' if the transaction has been abandoned (inputs are respendable). Only available for the \'send\' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"       (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"removed\": [<br>    <structure is the same as \"transactions\" above, only present if include_removed=true><br>    Note: transactions that were readded in the active chain will appear as-is in this array, and may thus have a positive confirmation count.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they\'ve reached 6 confirmations plus any new ones<br>}<br><br>Examples:<br> bitcoin-cli listsinceblock <br> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Arguments:<br>1. \"pubkey\"           (string, required) The hex-encoded public key<br>2. \"label\"            (string, optional, default=\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Import a public key with rescan<br> bitcoin-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> bitcoin-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> bitcoin-cli clearbanned <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already conflicted or abandoned.<br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br><br>Result:<br><br>Examples:<br> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( nblocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height      (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> bitcoin-cli getnetworkhashps <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getmemoryinfo": "getmemoryinfo (\"mode\")<br>Returns an object containing information about memory usage.<br>Arguments:<br>1. \"mode\" determines what kind of information is returned. This argument is optional, the default mode is \"stats\".<br>  - \"stats\" returns general statistics about memory usage in the daemon.<br>  - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).<br><br>Result (mode \"stats\"):<br>{<br>  \"locked\": {               (json object) Information about locked memory manager<br>    \"used\": xxxxx,          (numeric) Number of bytes used<br>    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas<br>    \"total\": xxxxxxx,       (numeric) Total number of bytes managed<br>    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.<br>    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks<br>    \"chunks_free\": xxxxx,   (numeric) Number unused chunks<br>  }<br>}<br><br>Result (mode \"mallocinfo\"):<br>\"<malloc version=\"1\">...\"<br><br>Examples:<br> bitcoin-cli getmemoryinfo <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "listwallets": "listwallets<br>Returns a list of currently loaded wallets.<br>For full information on the wallet, use \"getwalletinfo\"<br><br>Result:<br>[                         (json array of strings)<br>  \"walletname\"            (string) the wallet name<br>   ...<br>]<br><br>Examples:<br> bitcoin-cli listwallets <br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listwallets\", \"params\": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "sendfrom": "sendfrom \"fromaccount\" \"toaddress\" amount ( minconf \"comment\" \"comment_to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) The name of the account to send funds from. May be the default account using \".<br>                       Specifying an account does not influence coin selection, but it does associate the newly created<br>                       transaction with the account, so the account\'s balance computation and transaction history can reflect<br>                       the spend.<br>2. \"toaddress\"         (string, required) The bitcoin address to send funds to.<br>3. amount                (numeric or string, required) The amount in BTC (transaction fee is added on top).<br>4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                                     This is not part of the transaction, just kept in your wallet.<br>6. \"comment_to\"        (string, optional) An optional comment to store the name of the person or organization <br>                                     to which you\'re sending the transaction. This is not part of the transaction, <br>                                     it is just kept in your wallet.<br><br>Result:<br>\"txid\"                 (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 BTC from the default account to the address, must have at least 1 confirmation<br> bitcoin-cli sendfrom \" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> bitcoin-cli sendfrom \"tabby\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01 6 \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.01, 6, \"donation\", \"seans outpost\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "getaddednodeinfo": "getaddednodeinfo ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br><br>Arguments:<br>1. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node IP address or name (as provided to addnode)<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [                    (list of objects) Only when connected = true<br>       {<br>         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server IP and port we\'re connected to<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddednodeinfo \"192.168.0.201\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/",
            "importmulti": "importmulti \"requests\" ( \"options\" )<br><br>Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.<br><br>Arguments:<br>1. requests     (array, required) Data to be imported<br>  [     (array of json objects)<br>    {<br>      \"scriptPubKey\": \"<script>\" | { \"address\":\"<address>\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)<br>      \"timestamp\": timestamp | \"now\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),<br>                                                              or the string \"now\" to substitute the current synced blockchain time. The timestamp of the oldest<br>                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.<br>                                                              \"now\" can be specified to bypass scanning, for keys which are known to never have been used, and<br>                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key<br>                                                              creation time of all keys being imported by the importmulti call will be scanned.<br>      \"redeemscript\": \"<script>\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey<br>      \"pubkeys\": [\"<pubKey>\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript<br>      \"keys\": [\"<key>\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript<br>      \"internal\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments<br>      \"watchonly\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they\'re not spendable, only allowed if keys are empty<br>      \"label\": <label>                                      , (string, optional, default: \'\') Label to assign to the address (aka account name, for now), only allowed with internal=false<br>    }<br>  ,...<br>  ]<br>2. options                 (json, optional)<br>  {<br>     \"rescan\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports<br>  }<br><br>Examples:<br> bitcoin-cli importmulti \'[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]\'<br> bitcoin-cli importmulti \'[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]\' \'{ \"rescan\": false}\'<br><br>Response is an array with the same size as the input that has the execution result :<br>  [{ \"success\": true } , { \"success\": false, \"error\": { \"code\": -1, \"message\": \"Internal Server Error\"} }, ... ]",
            "generatetoaddress": "generatetoaddress nblocks address (maxtries)<br><br>Mine blocks immediately to a specified address (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. address      (string, required) The address to send the newly generated bitcoin to.<br>3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks to myaddress<br> bitcoin-cli generatetoaddress 11 \"myaddress",
            "getblock": "getblock \"blockhash\" ( verbosity ) <br><br>If verbosity is 0, returns a string that is serialized, hex-encoded data for block \'hash\'.<br>If verbosity is 1, returns an Object with information about block <hash>.<br>If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. <br><br>Arguments:<br>1. \"blockhash\"          (string, required) The block hash<br>2. verbosity              (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data<br><br>Result (for verbosity = 0):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block \'hash\'.<br><br>Result (for verbosity = 1):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"strippedsize\" : n,    (numeric) The block size excluding witness data<br>  \"weight\" : n           (numeric) The block weight as defined in BIP 141<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbosity = 2):<br>{<br>  ...,                     Same output as verbosity = 1.<br>  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.<br>         ,...<br>  ],<br>  ,...                     Same output as verbosity = 1.<br>}<br><br>Examples:<br> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary \'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:8332/"
        },
        "16": {
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"   (string, required) The name of the account to move funds from. May be the default account using \".<br>2. \"toaccount\"     (string, required) The name of the account to move funds to. May be the default account using \".<br>3. amount            (numeric) Quantity of BTC to move between accounts.<br>4. (dummy)           (numeric, optional) Ignored. Remains for backward compatibility.<br>5. \"comment\"       (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false           (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 BTC from the default account to the account named tabby<br> bitcoin-cli move \" \"tabby\" 0.01<br><br>Move 0.01 BTC timotei to akiko with a comment and funds have 6 confirmations<br> bitcoin-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( include_watchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"                  (string, required) The transaction id<br>2. \"include_watchonly\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in BTC<br>  \"fee\": x.xxx,            (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                              'send' category of transactions.<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",      (string) DEPRECATED. The account name involved in the transaction, can be \" for the default account.<br>      \"address\" : \"address\",          (string) The bitcoin address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx,                 (numeric) The amount in BTC<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                       (numeric) the vout value<br>      \"fee\": x.xxx,                     (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                           'send' category of transactions.<br>      \"abandoned\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                           'send' category of transactions.<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getinfo": "error code: -32601<br>error message:<br>getinfo<br><br>This call was removed in version 0.16.0. Use the appropriate fields from:<br>- getblockchaininfo: blocks, difficulty, chain<br>- getnetworkinfo: version, protocolversion, timeoffset, connections, proxy, relayfee, warnings<br>- getwalletinfo: balance, keypoololdest, keypoolsize, paytxfee, unlocked_until, walletversion<br><br>bitcoin-cli has the option -getinfo to collect and format these in the old format.",
            "getmempoolancestors": "getmempoolancestors txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool ancestors.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempoolancestors \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaccount": "getreceivedbyaccount \"account\" ( minconf )<br><br>DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. \"account\"      (string, required) The selected account, may be the default account using \".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>Amount received by the default account with at least 1 confirmation<br> bitcoin-cli getreceivedbyaccount \"<br><br>Amount received at the tabby account including unconfirmed amounts with zero confirmations<br> bitcoin-cli getreceivedbyaccount \"tabby\" 0<br><br>The amount with at least 6 confirmations<br> bitcoin-cli getreceivedbyaccount \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletpassphrasechange": "walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"<br><br>Changes the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.<br><br>Arguments:<br>1. \"oldpassphrase\"      (string) The current passphrase<br>2. \"newpassphrase\"      (string) The new passphrase<br><br>Examples:<br> bitcoin-cli walletpassphrasechange \"old one\" \"new one\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrasechange\", \"params\": [\"old one\", \"new one\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included manually (by blockhash).<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"blockhash\"   (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "combinerawtransaction": "combinerawtransaction [\"hexstring\",...]<br><br>Combine multiple partially signed transactions into one transaction.<br>The combined transaction may be another partially signed transaction or a <br>fully signed transaction.<br>Arguments:<br>1. \"txs\"         (string) A json array of hex strings of partially signed transactions<br>    [<br>      \"hexstring\"     (string) A transaction hash<br>      ,...<br>    ]<br><br>Result:<br>\"hex\"            (string) The hex-encoded raw transaction with signature(s)<br><br>Examples:<br> bitcoin-cli combinerawtransaction [\"myhex1\", \"myhex2\", \"myhex3\"]",
            "stop": "stop<br><br>Stop Bitcoin server.",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" ( options iswitness )<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add at most one change output to the outputs.<br>No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must be<br>in the wallet using importaddress or addmultisigaddress (to calculate fees).<br>You can see whether this is the case by checking the \"solvable\" field in the listunspent output.<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. \"hexstring\"           (string, required) The hex string of the raw transaction<br>2. options                 (object, optional)<br>   {<br>     \"changeAddress\"          (string, optional, default pool address) The bitcoin address to receive the change<br>     \"changePosition\"         (numeric, optional, default random) The index of the change output<br>     \"change_type\"            (string, optional) The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -changetype.<br>     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only<br>     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs<br>     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in BTC/kB<br>     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.<br>                              The fee will be equally deducted from the amount of each specified output.<br>                              The outputs are specified by their zero-based index, before any change output is added.<br>                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                              If no outputs are specified here, the sender pays the fee.<br>                                  [vout_index,...]<br>     \"replaceable\"            (boolean, optional) Marks this transaction as BIP125 replaceable.<br>                              Allows this transaction to be replaced by a transaction with higher fees<br>     \"conf_target\"            (numeric, optional) Confirmation target (in blocks)<br>     \"estimate_mode\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>         \"UNSET\"<br>         \"ECONOMICAL\"<br>         \"CONSERVATIVE\"<br>   }<br>                         for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}<br>3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction <br>                              If iswitness is not present, heuristic tests will be used in decoding<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee in BTC the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> bitcoin-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> bitcoin-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> bitcoin-cli sendrawtransaction \"signedtransactionhex",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB. Overwrites the paytxfee parameter.<br><br>Arguments:<br>1. amount         (numeric or string, required) The transaction fee in BTC/kB<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> bitcoin-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "prioritisetransaction": "prioritisetransaction <txid> <dummy value> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. dummy          (numeric, optional) API-Compatibility for previous API. Must be zero or null.<br>                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.<br>3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result:<br>true              (boolean) Returns true<br><br>Examples:<br> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaccount": "listreceivedbyaccount ( minconf include_empty include_watchonly)<br><br>DEPRECATED. List balances by account.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include accounts that haven't received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",  (string) The account name of the receiving account<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account<br>    \"confirmations\" : n,          (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"           (string) A comment for the address/transaction, if any<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaccount <br> bitcoin-cli listreceivedbyaccount 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> bitcoin-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempooldescendants": "getmempooldescendants txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool descendants.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempooldescendants \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Arguments:<br>1. \"script\"           (string, required) The hex-encoded script (or address)<br>2. \"label\"            (string, optional, default=\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls<br>may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br>If you have the full public key, you should call importpubkey instead of this.<br><br>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated<br>as change, and not show up in many RPCs.<br><br>Examples:<br><br>Import a script with rescan<br> bitcoin-cli importaddress \"myscript\"<br><br>Import using a label without rescan<br> bitcoin-cli importaddress \"myscript\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myscript\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"address\" amount ( \"comment\" \"comment_to\" subtractfeefromamount replaceable conf_target \"estimate_mode\")<br><br>Send an amount to a given address.<br><br>Requires wallet passphrase to be set with walletpassphrase call.<br>Arguments:<br>1. \"address\"            (string, required) The bitcoin address to send to.<br>2. \"amount\"             (numeric or string, required) The amount in BTC to send. eg 0.1<br>3. \"comment\"            (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment_to\"         (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less bitcoins than you enter in the amount field.<br>6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125<br>7. conf_target            (numeric, optional) Confirmation target (in blocks)<br>8. \"estimate_mode\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>       \"UNSET\"<br>       \"ECONOMICAL\"<br>       \"CONSERVATIVE\"<br><br>Result:<br>\"txid\"                  (string) The transaction id.<br><br>Examples:<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \" \" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolentry": "getmempoolentry txid<br><br>Returns mempool data for given transaction<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br><br>Result:<br>{                           (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>}<br><br>Examples:<br> bitcoin-cli getmempoolentry \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "removeprunedfunds": "removeprunedfunds \"txid\"<br><br>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.<br><br>Arguments:<br>1. \"txid\"           (string, required) The hex-encoded id of the transaction you are deleting<br><br>Examples:<br> bitcoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removeprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletname\": xxxxx,             (string) the wallet name<br>  \"walletversion\": xxxxx,          (numeric) the wallet version<br>  \"balance\": xxxxxxx,              (numeric) the total confirmed balance of the wallet in BTC<br>  \"unconfirmed_balance\": xxx,      (numeric) the total unconfirmed balance of the wallet in BTC<br>  \"immature_balance\": xxxxxx,      (numeric) the total immature balance of the wallet in BTC<br>  \"txcount\": xxxxxxx,              (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,         (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,             (numeric) how many new keys are pre-generated (only counts external keys)<br>  \"keypoolsize_hd_internal\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)<br>  \"unlocked_until\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,              (numeric) the transaction fee configuration, set in BTC/kB<br>  \"hdmasterkeyid\": \"<hash160>\"     (string, optional) the Hash160 of the HD master pubkey (only present when HD is enabled)<br>}<br><br>Examples:<br> bitcoin-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "preciousblock": "preciousblock \"blockhash\"<br><br>Treats a block as if it were received before others with the same work.<br><br>A later preciousblock call can override the effect of an earlier one.<br><br>The effects of preciousblock are not retained across restarts.<br><br>Arguments:<br>1. \"blockhash\"   (string, required) the hash of the block to mark as precious<br><br>Result:<br><br>Examples:<br> bitcoin-cli preciousblock \"blockhash\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) The hash of the block at the tip of the chain<br>  \"transactions\": n,      (numeric) The number of transactions with unspent outputs<br>  \"txouts\": n,            (numeric) The number of unspent transaction outputs<br>  \"bogosize\": n,          (numeric) A meaningless metric for UTXO set size<br>  \"hash_serialized_2\": \"hash\", (string) The serialized hash<br>  \"disk_size\": n,         (numeric) The estimated size of the chainstate on disk<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> bitcoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addwitnessaddress": "addwitnessaddress \"address\" ( p2sh )<br><br>DEPRECATED: set the address_type argument of getnewaddress, or option -addresstype=[bech32|p2sh-segwit] instead.<br>Add a witness address for a script (with pubkey or redeemscript known). Requires a new wallet backup.<br>It returns the witness script.<br><br>Arguments:<br>1. \"address\"       (string, required) An address known to the wallet<br>2. p2sh            (bool, optional, default=true) Embed inside P2SH<br><br>Result:<br>\"witnessaddress\",  (string) The value of the new address (P2SH or BIP173).<br>}",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"account\" \"address_type\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.<br>Each key is a Bitcoin address or hex-encoded public key.<br>This functionality is only intended for use with non-watchonly addresses.<br>See `importaddress` for watchonly p2sh address support.<br>If 'account' is specified (DEPRECATED), assign address to that account.<br><br>Arguments:<br>1. nrequired                      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"                         (string, required) A json array of bitcoin addresses or hex-encoded public keys<br>     [<br>       \"address\"                  (string) bitcoin address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"account\"                      (string, optional) DEPRECATED. An account to assign the addresses to.<br>4. \"address_type\"                 (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -addresstype.<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",    (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"         (string) The string value of the hex-encoded redemption script.<br>}<br><br>Result (DEPRECATED. To see this result in v0.16 instead, please start bitcoind with -deprecatedrpc=addmultisigaddress).<br>        clients should transition to the new output api before upgrading to v0.17.<br>\"address\"                         (string) A bitcoin address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> bitcoin-cli addmultisigaddress 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaddress": "getreceivedbyaddress \"address\" ( minconf )<br><br>Returns the total amount received by the given address in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in BTC received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 0<br><br>The amount with at least 6 confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxout": "gettxout \"txid\" n ( include_mempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"             (string, required) The transaction id<br>2. \"n\"                (numeric, required) vout number<br>3. \"include_mempool\"  (boolean, optional) Whether to include the mempool. Default: true.     Note that an unspent output that is spent in the mempool won't appear.<br><br>Result:<br>{<br>  \"bestblock\":  \"hash\",    (string) The hash of the block at the tip of the chain<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in BTC<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of bitcoin addresses<br>        \"address\"     (string) bitcoin address<br>        ,...<br>     ]<br>  },<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> bitcoin-cli listunspent <br><br>View the details<br> bitcoin-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"account\" minconf include_watchonly )<br><br>If account is not specified, returns the server's total available balance.<br>The available balance is what the wallet considers currently spendable, and is<br>thus affected by options which limit spendability such as -spendzeroconfchange.<br>If account is specified (DEPRECATED), returns the balance in the account.<br>Note that the account \" is not the same as leaving the parameter out.<br>The server total may be different to the balance in the default \" account.<br><br>Arguments:<br>1. \"account\"         (string, optional) DEPRECATED. The account string may be given as a<br>                     specific account name to find the balance associated with wallet keys in<br>                     a named account, or as the empty string (\") to find the balance<br>                     associated with wallet keys not in any named account, or as \"*\" to find<br>                     the balance associated with all wallet keys regardless of account.<br>                     When this option is specified, it calculates the balance in a different<br>                     way than when it is not specified, and which can count spends twice when<br>                     there are conflicting pending transactions (such as those created by<br>                     the bumpfee command), temporarily resulting in low or even negative<br>                     balances. In general, account balance calculation is not considered<br>                     reliable and has resulted in confusing outcomes, so it is recommended to<br>                     avoid passing this argument.<br>2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>The total amount in the wallet with 1 or more confirmations<br> bitcoin-cli getbalance <br><br>The total amount in the wallet at least 6 blocks confirmed<br> bitcoin-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "bumpfee": "bumpfee \"txid\" ( options ) <br><br>Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.<br>An opt-in RBF transaction with the given txid must be in the wallet.<br>The command will pay the additional fee by decreasing (or perhaps removing) its change output.<br>If the change output is not big enough to cover the increased fee, the command will currently fail<br>instead of adding new inputs to compensate. (A future implementation could improve this.)<br>The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.<br>By default, the new fee will be calculated automatically using estimatefee.<br>The user can specify a confirmation target for estimatefee.<br>Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.<br>At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee<br>returned by getnetworkinfo) to enter the node's mempool.<br><br>Arguments:<br>1. txid                  (string, required) The txid to be bumped<br>2. options               (object, optional)<br>   {<br>     \"confTarget\"        (numeric, optional) Confirmation target (in blocks)<br>     \"totalFee\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.<br>                         In rare cases, the actual fee paid might be slightly higher than the specified<br>                         totalFee if the tx change output has to be removed because it is too close to<br>                         the dust threshold.<br>     \"replaceable\"       (boolean, optional, default true) Whether the new transaction should still be<br>                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will<br>                         be left unchanged from the original. If false, any input sequence numbers in the<br>                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe<br>                         so the new transaction will not be explicitly bip-125 replaceable (though it may<br>                         still be replaceable in practice, for example if it has unconfirmed ancestors which<br>                         are replaceable).<br>     \"estimate_mode\"     (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>         \"UNSET\"<br>         \"ECONOMICAL\"<br>         \"CONSERVATIVE\"<br>   }<br><br>Result:<br>{<br>  \"txid\":    \"value\",   (string)  The id of the new transaction<br>  \"origfee\":  n,         (numeric) Fee of the replaced transaction<br>  \"fee\":      n,         (numeric) Fee of the new transaction<br>  \"errors\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)<br>}<br><br>Examples:<br><br>Bump the fee, get the new transaction's txid<br> bitcoin-cli bumpfee <txid>",
            "importprunedfunds": "importprunedfunds<br><br>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.<br><br>Arguments:<br>1. \"rawtransaction\" (string, required) A raw transaction in hex funding an already-existing address in wallet<br>2. \"txoutproof\"     (string, required) The hex output from gettxoutproof that contains the transaction",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getblocktemplate": "getblocktemplate ( TemplateRequest )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>For full specification, see BIPs 22, 23, 9, and 145:<br>    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes<br>    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki<br><br>Arguments:<br>1. template_request         (json object, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted<br>       \"capabilities\":[     (array, optional) A list of strings<br>           \"support\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>       ],<br>       \"rules\":[            (array, optional) A list of strings<br>           \"support\"          (string) client side supported softfork deployment<br>           ,...<br>       ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The preferred block version<br>  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced<br>  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments<br>      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule<br>      ,...<br>  },<br>  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions<br>  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal<br>         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)<br>         \"depends\" : [                (array) array of numbers <br>             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero<br>         \"weight\" : n,                (numeric) total transaction weight, as counted for purposes of block limits<br>         \"required\" : true|false      (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig<br>  },<br>  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)<br>  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",                (string) The hash target<br>  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                     (array of string) list of ways the block template may be changed <br>     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"weightlimit\" : n,                (numeric) limit of block weight<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> bitcoin-cli getblocktemplate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintxstats": "getchaintxstats ( nblocks blockhash )<br><br>Compute statistics about the total number and rate of transactions in the chain.<br><br>Arguments:<br>1. nblocks      (numeric, optional) Size of the window in number of blocks (default: one month).<br>2. \"blockhash\"  (string, optional) The hash of the block that ends the window.<br><br>Result:<br>{<br>  \"time\": xxxxx,                (numeric) The timestamp for the final block in the window in UNIX format.<br>  \"txcount\": xxxxx,             (numeric) The total number of transactions in the chain up to that point.<br>  \"window_block_count\": xxxxx,  (numeric) Size of the window in number of blocks.<br>  \"window_tx_count\": xxxxx,     (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0.<br>  \"window_interval\": xxxxx,     (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0.<br>  \"txrate\": x.xx,               (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0.<br>}<br><br>Examples:<br> bitcoin-cli getchaintxstats <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "generate": "generate nblocks ( maxtries )<br><br>Mine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> bitcoin-cli generate 11",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The IP address and port of the peer<br>    \"addrbind\":\"ip:port\",    (string) Bind address of the connection to the peer<br>    \"addrlocal\":\"ip:port\",   (string) Local address as reported by the peer<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time (if available)<br>    \"minping\": n,              (numeric) minimum observed ping time (if any at all)<br>    \"pingwait\": n,             (numeric) ping wait (if non-zero)<br>    \"version\": v,              (numeric) The peer version, such as 70001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"addnode\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ],<br>    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted<br>    \"bytessent_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes sent aggregated by message type<br>       ...<br>    },<br>    \"bytesrecv_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes received aggregated by message type<br>       ...<br>    }<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networkactive\": true|false,           (bool) whether p2p networking is enabled<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in BTC/kB<br>  \"incrementalfee\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network and blockchain warnings<br>}<br><br>Examples:<br> bitcoin-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"        (string, required) The account name.<br><br>Result:<br>[                     (json array of string)<br>  \"address\"         (string) a bitcoin address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "logging": "logging ( <include> <exclude> )<br>Gets and sets the logging configuration.<br>When called without an argument, returns the list of categories with status that are currently being debug logged or not.<br>When called with arguments, adds or removes categories from debug logging and return the lists above.<br>The arguments are evaluated in order \"include\", \"exclude\".<br>If an item is both included and excluded, it will thus end up being excluded.<br>The valid logging categories are: net, tor, mempool, http, bench, zmq, db, rpc, estimatefee, addrman, selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej, libevent, coindb, qt, leveldb<br>In addition, the following are available as category names with special meanings:<br>  - \"all\",  \"1\" : represent all logging categories.<br>  - \"none\", \"0\" : even if other logging categories are specified, ignore all of them.<br><br>Arguments:<br>1. \"include\"        (array of strings, optional) A json array of categories to add debug logging<br>     [<br>       \"category\"   (string) the valid logging category<br>       ,...<br>     ]<br>2. \"exclude\"        (array of strings, optional) A json array of categories to remove debug logging<br>     [<br>       \"category\"   (string) the valid logging category<br>       ,...<br>     ]<br><br>Result:<br>{                   (json object where keys are the logging categories, and values indicates its status<br>  \"category\": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active<br>  ...<br>}<br><br>Examples:<br> bitcoin-cli logging \"[\"all\"]\" \"[\"http\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"logging\", \"params\": [[\"all\"], \"[libevent]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts to add or remove a node from the addnode list.<br>Or try a connection to a node once.<br>Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be<br>full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletpassphrase": "walletpassphrase \"passphrase\" timeout<br><br>Stores the wallet decryption key in memory for 'timeout' seconds.<br>This is needed prior to performing transactions related to private keys such as sending bitcoins<br><br>Arguments:<br>1. \"passphrase\"     (string, required) The wallet passphrase<br>2. timeout            (numeric, required) The time to keep the decryption key in seconds; capped at 100000000 (~3 years).<br><br>Note:<br>Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock<br>time that overrides the old one.<br><br>Examples:<br><br>Unlock the wallet for 60 seconds<br> bitcoin-cli walletpassphrase \"my pass phrase\" 60<br><br>Lock the wallet again (before 60 seconds)<br> bitcoin-cli walletlock <br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrase\", \"params\": [\"my pass phrase\", 60] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock ([{\"txid\":\"txid\",\"vout\":n},...])<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.<br>A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf  [\"addresses\",...] [include_unsafe] [query_options])<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"      (string) A json array of bitcoin addresses to filter<br>    [<br>      \"address\"     (string) bitcoin address<br>      ,...<br>    ]<br>4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend<br>                  See description of \"safe\" attribute below.<br>5. query_options    (json, optional) JSON with query options<br>    {<br>      \"minimumAmount\"    (numeric or string, default=0) Minimum value of each UTXO in BTC<br>      \"maximumAmount\"    (numeric or string, default=unlimited) Maximum value of each UTXO in BTC<br>      \"maximumCount\"     (numeric or string, default=unlimited) Maximum number of UTXOs<br>      \"minimumSumAmount\" (numeric or string, default=unlimited) Minimum sum value of all UTXOs in BTC<br>    }<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",    (string) the bitcoin address<br>    \"account\" : \"account\",    (string) DEPRECATED. The associated account, or \" for the default account<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction output amount in BTC<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH<br>    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output<br>    \"solvable\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys<br>    \"safe\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions<br>                              from outside keys and unconfirmed replacement transactions are considered unsafe<br>                              and are not eligible for spending by fundrawtransaction and sendtoaddress.<br>  }<br>  ,...<br>]<br><br>Examples<br> bitcoin-cli listunspent <br> bitcoin-cli listunspent 6 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> bitcoin-cli listunspent 6 9999999 '[]' true '{ \"minimumAmount\": 0.005 }'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999, [] , true, { \"minimumAmount\": 0.005 } ] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> bitcoin-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,\"data\":\"hex\",...} ( locktime ) ( replaceable )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"inputs\"                (array, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",    (string, required) The transaction id<br>         \"vout\":n,         (numeric, required) The output number<br>         \"sequence\":n      (numeric, optional) The sequence number<br>       } <br>       ,...<br>     ]<br>2. \"outputs\"               (object, required) a json object with outputs<br>    {<br>      \"address\": x.xxx,    (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the BTC amount<br>      \"data\": \"hex\"      (string, required) The key is \"data\", the value is hex encoded data<br>      ,...<br>    }<br>3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br>4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.<br>                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.<br><br>Result:<br>\"transaction\"              (string) hex string of the transaction<br><br>Examples:<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"data\":\"00010203\"}\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"data\":\"00010203\"}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccountaddress": "getaccountaddress \"account\"<br><br>DEPRECATED. Returns the current Bitcoin address for receiving payments to this account.<br><br>Arguments:<br>1. \"account\"       (string, required) The account name for the address. It can also be set to the empty string \" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.<br><br>Result:<br>\"address\"          (string) The account bitcoin address<br><br>Examples:<br> bitcoin-cli getaccountaddress <br> bitcoin-cli getaccountaddress \"<br> bitcoin-cli getaccountaddress \"myaccount\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setban": "setban \"subnet\" \"add|remove\" (bantime) (absolute)<br><br>Attempts to add or remove an IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"subnet\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)<br>2. \"command\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400<br> bitcoin-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf include_empty include_watchonly)<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. The account of the receiving address. The default account is \".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in BTC received by the address<br>    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\",               (string) A comment for the address/transaction, if any<br>    \"txids\": [<br>       \"txid\",                         (string) The ids of transactions received with the address <br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaddress <br> bitcoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaccounts": "listaccounts ( minconf include_watchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see 'importaddress')<br><br>Result:<br>{                      (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> bitcoin-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> bitcoin-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> bitcoin-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "estimatefee": "estimatefee nblocks<br><br>DEPRECATED. Please use estimatesmartfee for more intelligent estimates.<br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks. Uses virtual transaction size of transaction<br>as defined in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. nblocks     (numeric, required)<br><br>Result:<br>n              (numeric) estimated fee-per-kilobyte<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br>-1 is always returned for nblocks == 1 as it is impossible to calculate<br>a fee that is high enough to get reliably included in the next block.<br><br>Example:<br> bitcoin-cli estimatefee 6",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum fee rate in BTC/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee<br>  \"minrelaytxfee\": xxxxx       (numeric) Current minimum relay fee for transactions<br>}<br><br>Examples:<br> bitcoin-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest blockchain.<br><br>Result:<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples:<br> bitcoin-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br>Requires wallet passphrase to be set with walletpassphrase call.<br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\",   (string, required for P2SH or P2WSH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"privkeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletlock": "walletlock<br><br>Removes the wallet encryption key from memory, locking the wallet.<br>After calling this method, you will need to call walletpassphrase again<br>before being able to call any methods which require the wallet to be unlocked.<br><br>Examples:<br><br>Set the passphrase for 2 minutes to perform a transaction<br> bitcoin-cli walletpassphrase \"my pass phrase\" 120<br><br>Perform a send (requires passphrase set)<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 1.0<br><br>Clear the passphrase since we are done before 2 minutes is up<br> bitcoin-cli walletlock <br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletlock\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> bitcoin-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"account\" \"address_type\" )<br><br>Returns a new Bitcoin address for receiving payments.<br>If 'account' is specified (DEPRECATED), it is added to the address book <br>so payments received with the address will be credited to 'account'.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \" is used. It can also be set to the empty string \" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.<br>2. \"address_type\"   (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -addresstype.<br><br>Result:<br>\"address\"    (string) The new bitcoin address<br><br>Examples:<br> bitcoin-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Hint: use getmempoolentry to fetch a specific transaction from the mempool.<br><br>Arguments:<br>1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding blockchain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",              (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,             (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,            (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\",       (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,         (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,         (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"initialblockdownload\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.<br>  \"chainwork\": \"xxxx\"           (string) total amount of work in active chain, in hexadecimal<br>  \"size_on_disk\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk<br>  \"pruned\": xx,                 (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)<br>  \"automatic_pruning\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)<br>  \"prune_target_size\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)<br>  \"softforks\": [                (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",           (string) name of softfork<br>        \"version\": xx,          (numeric) block version<br>        \"reject\": {             (object) progress toward rejecting pre-softfork blocks<br>           \"status\": xx,        (boolean) true if threshold reached<br>        },<br>     }, ...<br>  ],<br>  \"bip9_softforks\": {           (object) status of BIP9 softforks in progress<br>     \"xxxx\" : {                 (string) name of the softfork<br>        \"status\": \"xxxx\",       (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"<br>        \"bit\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)<br>        \"startTime\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning<br>        \"timeout\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in<br>        \"since\": xx,            (numeric) height of the first block to which the status applies<br>        \"statistics\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \"started\" status)<br>           \"period\": xx,        (numeric) the length in blocks of the BIP9 signalling period <br>           \"threshold\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature <br>           \"elapsed\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period <br>           \"count\": xx,         (numeric) the number of blocks with the version bit set in the current period <br>           \"possible\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold <br>        }<br>     }<br>  }<br>  \"warnings\" : \"...\",           (string) any network and blockchain warnings.<br>}<br><br>Examples:<br> bitcoin-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprivkey": "importprivkey \"privkey\" ( \"label\" ) ( rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.<br><br>Arguments:<br>1. \"privkey\"          (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls<br>may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br><br>Examples:<br><br>Dump a private key<br> bitcoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> bitcoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"testing\" false<br><br>Import using default blank label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "validateaddress": "validateaddress \"address\"<br><br>Return information about the given bitcoin address.<br><br>Arguments:<br>1. \"address\"     (string, required) The bitcoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"address\",        (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"isscript\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.<br>  \"iswitness\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version<br>  \"witness_version\" : version   (number, optional) For all witness output types, gives the version number.<br>  \"witness_program\" : \"hex\"     (string, optional) For all witness output types, gives the script or key hash present in the address.<br>  \"script\" : \"type\"             (string, optional) The output script type. Only if \"isscript\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown<br>  \"hex\" : \"hex\",                (string, optional) The redeemscript for the P2SH or P2WSH address<br>  \"addresses\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \"iswitness\" is false). This field is superseded by the \"pubkeys\" field and the address inside \"embedded\".<br>    [<br>      \"address\"<br>      ,...<br>    ]<br>  \"pubkeys\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \"script\" is \"multisig\")<br>    [<br>      \"pubkey\"<br>      ,...<br>    ]<br>  \"sigsrequired\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \"script\" is \"multisig\")<br>  \"pubkey\" : \"publickeyhex\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)<br>  \"embedded\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \"isvalid\", metadata (\"timestamp\", \"hdkeypath\", \"hdmasterkeyid\") and relation to the wallet (\"ismine\", \"iswatchonly\", \"account\").<br>  \"iscompressed\" : true|false,  (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \" is the default account<br>  \"timestamp\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)<br>  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available<br>  \"hdmasterkeyid\" : \"<hash160>\" (string, optional) The Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> bitcoin-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "pruneblockchain": "pruneblockchain<br><br>Arguments:<br>1. \"height\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp<br>                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.<br><br>Result:<br>n    (numeric) Height of the last block pruned.<br><br>Examples:<br> bitcoin-cli pruneblockchain 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> bitcoin-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt your wallet<br> bitcoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending bitcoin<br> bitcoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can do something like sign<br> bitcoin-cli signmessage \"address\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> bitcoin-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash height<br><br>Returns hash of block in best-block-chain at height provided.<br><br>Arguments:<br>1. height         (numeric, required) The height index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> bitcoin-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> bitcoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> bitcoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.<br>Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.<br>Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by<br>only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename with path (either absolute or relative to bitcoind)<br><br>Result:<br>{                           (json object)<br>  \"filename\" : {        (string) The filename with full absolute path<br>}<br><br>Examples:<br> bitcoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "rescanblockchain": "rescanblockchain (\"start_height\") (\"stop_height\")<br><br>Rescan the local blockchain for wallet related transactions.<br><br>Arguments:<br>1. \"start_height\"    (numeric, optional) block height where the rescan should start<br>2. \"stop_height\"     (numeric, optional) the last block height that should be scanned<br><br>Result:<br>{<br>  \"start_height\"     (numeric) The block height where the rescan has started. If omitted, rescan started from the genesis block.<br>  \"stop_height\"      (numeric) The height of the last rescanned block. If omitted, rescan stopped at the chain tip.<br>}<br><br>Examples:<br> bitcoin-cli rescanblockchain 100000 120000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"rescanblockchain\", \"params\": [100000, 120000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccount": "getaccount \"address\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> bitcoin-cli getaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "estimatesmartfee": "estimatesmartfee conf_target (\"estimate_mode\")<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within conf_target blocks if possible and return the number of blocks<br>for which the estimate is valid. Uses virtual transaction size as defined<br>in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)<br>2. \"estimate_mode\" (string, optional, default=CONSERVATIVE) The fee estimate mode.<br>                   Whether to return a more conservative estimate which also satisfies<br>                   a longer history. A conservative estimate potentially returns a<br>                   higher feerate and is more likely to be sufficient for the desired<br>                   target, but is not as responsive to short term drops in the<br>                   prevailing fee market.  Must be one of:<br>       \"UNSET\" (defaults to CONSERVATIVE)<br>       \"ECONOMICAL\"<br>       \"CONSERVATIVE\"<br><br>Result:<br>{<br>  \"feerate\" : x.x,     (numeric, optional) estimate fee rate in BTC/kB<br>  \"errors\": [ str... ] (json array of strings, optional) Errors encountered during processing<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>The request target will be clamped between 2 and the highest target<br>fee estimation is able to return based on how long it has been running.<br>An error is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br><br>Example:<br> bitcoin-cli estimatesmartfee 6",
            "disconnectnode": "disconnectnode \"[address]\" [nodeid]<br><br>Immediately disconnects from the specified peer node.<br><br>Strictly one out of 'address' and 'nodeid' can be provided to identify the node.<br><br>To disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.<br><br>Arguments:<br>1. \"address\"     (string, optional) The IP address/port of the node<br>2. \"nodeid\"      (number, optional) The node ID (see getpeerinfo for node IDs)<br><br>Examples:<br> bitcoin-cli disconnectnode \"192.168.0.6:8333\"<br> bitcoin-cli disconnectnode \" 1<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setaccount": "setaccount \"address\" \"account\"<br><br>DEPRECATED. Sets the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to be associated with an account.<br>2. \"account\"         (string, required) The account to assign the address to.<br><br>Examples:<br> bitcoin-cli setaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\" ( iswitness )<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hexstring\"      (string, required) The transaction hex string<br>2. iswitness          (boolean, optional) Whether the transaction hex is a serialized witness transaction<br>                         If iswitness is not present, heuristic tests will be used in decoding<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> bitcoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>  \"nTx\" : n,             (numeric) The number of transactions in the block.<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] replaceable conf_target \"estimate_mode\")<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br>Requires wallet passphrase to be set with walletpassphrase call.<br><br>Arguments:<br>1. \"fromaccount\"         (string, required) DEPRECATED. The account to send the funds from. Should be \" for the default account<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in BTC is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefrom         (array, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"          (string) Subtract fee from this address<br>      ,...<br>    ]<br>6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125<br>7. conf_target            (numeric, optional) Confirmation target (in blocks)<br>8. \"estimate_mode\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>       \"UNSET\"<br>       \"ECONOMICAL\"<br>       \"CONSERVATIVE\"<br><br>Result:<br>\"txid\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \" \"[\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\", {\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}, 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br>Requires wallet passphrase to be set with walletpassphrase call.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> bitcoin-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress ( \"address_type\" )<br><br>Returns a new Bitcoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Arguments:<br>1. \"address_type\"           (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -changetype.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> bitcoin-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel nblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. nblocks      (numeric, optional, default=6, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> bitcoin-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"address\" \"message\"<br><br>Sign a message with the private key of an address<br>Requires wallet passphrase to be set with walletpassphrase call.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"address\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abortrescan": "abortrescan<br><br>Stops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.<br><br>Examples:<br><br>Import a private key<br> bitcoin-cli importprivkey \"mykey\"<br><br>Abort the running wallet rescan<br> bitcoin-cli abortrescan <br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abortrescan\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpprivkey": "dumpprivkey \"address\"<br><br>Reveals the private key corresponding to 'address'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"address\"   (string, required) The bitcoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> bitcoin-cli dumpprivkey \"myaddress\"<br> bitcoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> bitcoin-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions ( \"account\" count skip include_watchonly)<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.<br><br>Arguments:<br>1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. skip           (numeric, optional, default=0) The number of transactions to skip<br>4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \" for the default account.<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. 'send' and 'receive' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the<br>                                         'move' category for moves outbound. It is positive for the 'receive' category,<br>                                         and for the 'move' category for inbound funds.<br>    \"label\": \"label\",       (string) A comment for the address/transaction, if any<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and <br>                                         'receive' category of transactions. Negative confirmations indicate the<br>                                         transaction conflicts with the block chain<br>    \"trusted\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"otheraccount\": \"accountname\",  (string) DEPRECATED. For the 'move' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                     may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                         'send' category of transactions.<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> bitcoin-cli listtransactions <br><br>List transactions 100 to 120<br> bitcoin-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> bitcoin-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblockweight\": nnn, (numeric) The last block weight<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"networkhashps\": nnn,      (numeric) The network hashes per second<br>  \"pooledtx\": n              (numeric) The size of the mempool<br>  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"warnings\": \"...\"          (string) any network and blockchain warnings<br>  \"errors\": \"...\"            (string) DEPRECATED. Same as warnings. Only shown when bitcoind is started with -deprecatedrpc=getmininginfo<br>}<br><br>Examples:<br> bitcoin-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies current wallet file to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> bitcoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessagewithprivkey": "signmessagewithprivkey \"privkey\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"privkey\"         (string, required) The private key to sign the message with.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Create the signature<br> bitcoin-cli signmessagewithprivkey \"privkey\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest blockchain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> bitcoin-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br>DEPRECATION WARNING: Using addresses with createmultisig is deprecated. Clients must<br>transition to using addmultisigaddress to create multisig addresses with addresses known<br>to the wallet before upgrading to v0.17. To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig<br><br>Arguments:<br>1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"                       (string, required) A json array of hex-encoded public keys<br>     [<br>       \"key\"                    (string) The hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 public keys<br> bitcoin-cli createmultisig 2 \"[\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\"  ( \"dummy\" )<br><br>Attempts to submit new block to network.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"        (string, required) the hex-encoded block data to submit<br>2. \"dummy\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.<br><br>Result:<br><br>Examples:<br> bitcoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"address\",            (string) The bitcoin address<br>      amount,                 (numeric) The amount in BTC<br>      \"account\"             (string, optional) DEPRECATED. The account<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose \"blockhash\" )<br><br>NOTE: By default this function only works for mempool transactions. If the -txindex option is<br>enabled, it also works for blockchain transactions. If the block which contains the transaction<br>is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is<br>provided, only that block will be searched and if the transaction is in the mempool or other<br>blocks, or if this node does not have the given block available, the transaction will not be found.<br>DEPRECATED: for now, it also works for transactions with unspent outputs.<br><br>Return the raw transaction data.<br><br>If verbose is 'true', returns an Object with information about 'txid'.<br>If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object<br>3. \"blockhash\" (string, optional) The block in which to look for the transaction<br><br>Result (if verbose is not set or set to false):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose is set to true):<br>{<br>  \"in_active_chain\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \"blockhash\" argument)<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The serialized transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"address\"        (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> bitcoin-cli getrawtransaction \"mytxid\"<br> bitcoin-cli getrawtransaction \"mytxid\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> bitcoin-cli getrawtransaction \"mytxid\" false \"myblockhash\"<br> bitcoin-cli getrawtransaction \"mytxid\" true \"myblockhash",
            "uptime": "uptime<br><br>Returns the total uptime of the server.<br><br>Result:<br>ttt        (numeric) The number of seconds that the server has been running<br><br>Examples:<br> bitcoin-cli uptime <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"uptime\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hexstring\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hexstring\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) bitcoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).<br>}<br><br>Examples:<br> bitcoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setnetworkactive": "setnetworkactive true|false<br><br>Disable/enable all p2p network activity.<br><br>Arguments:<br>1. \"state\"        (boolean, required) true to enable networking, false to disable",
            "listsinceblock": "listsinceblock ( \"blockhash\" target_confirmations include_watchonly include_removed )<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted.<br>If \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included.<br>Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.<br><br>Arguments:<br>1. \"blockhash\"            (string, optional) The block hash to list transactions since<br>2. target_confirmations:    (numeric, optional, default=1) Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value<br>3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br>4. include_removed:         (bool, optional, default=true) Show transactions that were removed due to a reorg in the \"removed\" array<br>                                                           (not guaranteed to work on pruned nodes)<br><br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \" for the default account.<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>                                          When it's < 0, it means the transaction conflicted that many blocks ago.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx,         (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"       (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"removed\": [<br>    <structure is the same as \"transactions\" above, only present if include_removed=true><br>    Note: transactions that were readded in the active chain will appear as-is in this array, and may thus have a positive confirmation count.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones<br>}<br><br>Examples:<br> bitcoin-cli listsinceblock <br> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Arguments:<br>1. \"pubkey\"           (string, required) The hex-encoded public key<br>2. \"label\"            (string, optional, default=\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls<br>may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br><br>Examples:<br><br>Import a public key with rescan<br> bitcoin-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> bitcoin-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> bitcoin-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already conflicted or abandoned.<br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br><br>Result:<br><br>Examples:<br> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( nblocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height      (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> bitcoin-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmemoryinfo": "getmemoryinfo (\"mode\")<br>Returns an object containing information about memory usage.<br>Arguments:<br>1. \"mode\" determines what kind of information is returned. This argument is optional, the default mode is \"stats\".<br>  - \"stats\" returns general statistics about memory usage in the daemon.<br>  - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).<br><br>Result (mode \"stats\"):<br>{<br>  \"locked\": {               (json object) Information about locked memory manager<br>    \"used\": xxxxx,          (numeric) Number of bytes used<br>    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas<br>    \"total\": xxxxxxx,       (numeric) Total number of bytes managed<br>    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.<br>    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks<br>    \"chunks_free\": xxxxx,   (numeric) Number unused chunks<br>  }<br>}<br><br>Result (mode \"mallocinfo\"):<br>\"<malloc version=\"1\">...\"<br><br>Examples:<br> bitcoin-cli getmemoryinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listwallets": "listwallets<br>Returns a list of currently loaded wallets.<br>For full information on the wallet, use \"getwalletinfo\"<br><br>Result:<br>[                         (json array of strings)<br>  \"walletname\"            (string) the wallet name<br>   ...<br>]<br><br>Examples:<br> bitcoin-cli listwallets <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listwallets\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendfrom": "sendfrom \"fromaccount\" \"toaddress\" amount ( minconf \"comment\" \"comment_to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.<br>Requires wallet passphrase to be set with walletpassphrase call.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) The name of the account to send funds from. May be the default account using \".<br>                       Specifying an account does not influence coin selection, but it does associate the newly created<br>                       transaction with the account, so the account's balance computation and transaction history can reflect<br>                       the spend.<br>2. \"toaddress\"         (string, required) The bitcoin address to send funds to.<br>3. amount                (numeric or string, required) The amount in BTC (transaction fee is added on top).<br>4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                                     This is not part of the transaction, just kept in your wallet.<br>6. \"comment_to\"        (string, optional) An optional comment to store the name of the person or organization <br>                                     to which you're sending the transaction. This is not part of the transaction, <br>                                     it is just kept in your wallet.<br><br>Result:<br>\"txid\"                 (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 BTC from the default account to the address, must have at least 1 confirmation<br> bitcoin-cli sendfrom \" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> bitcoin-cli sendfrom \"tabby\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01 6 \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddednodeinfo": "getaddednodeinfo ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br><br>Arguments:<br>1. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node IP address or name (as provided to addnode)<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [                    (list of objects) Only when connected = true<br>       {<br>         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server IP and port we're connected to<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddednodeinfo \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importmulti": "importmulti \"requests\" ( \"options\" )<br><br>Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.<br><br>Arguments:<br>1. requests     (array, required) Data to be imported<br>  [     (array of json objects)<br>    {<br>      \"scriptPubKey\": \"<script>\" | { \"address\":\"<address>\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)<br>      \"timestamp\": timestamp | \"now\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),<br>                                                              or the string \"now\" to substitute the current synced blockchain time. The timestamp of the oldest<br>                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.<br>                                                              \"now\" can be specified to bypass scanning, for keys which are known to never have been used, and<br>                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key<br>                                                              creation time of all keys being imported by the importmulti call will be scanned.<br>      \"redeemscript\": \"<script>\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey<br>      \"pubkeys\": [\"<pubKey>\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript<br>      \"keys\": [\"<key>\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript<br>      \"internal\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments<br>      \"watchonly\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty<br>      \"label\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false<br>    }<br>  ,...<br>  ]<br>2. options                 (json, optional)<br>  {<br>     \"rescan\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports<br>  }<br><br>Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls<br>may report that the imported keys, addresses or scripts exists but related transactions are still missing.<br><br>Examples:<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'<br><br>Response is an array with the same size as the input that has the execution result :<br>  [{ \"success\": true } , { \"success\": false, \"error\": { \"code\": -1, \"message\": \"Internal Server Error\"} }, ... ]",
            "generatetoaddress": "generatetoaddress nblocks address (maxtries)<br><br>Mine blocks immediately to a specified address (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. address      (string, required) The address to send the newly generated bitcoin to.<br>3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks to myaddress<br> bitcoin-cli generatetoaddress 11 \"myaddress",
            "getblock": "getblock \"blockhash\" ( verbosity ) <br><br>If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbosity is 1, returns an Object with information about block <hash>.<br>If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. <br><br>Arguments:<br>1. \"blockhash\"          (string, required) The block hash<br>2. verbosity              (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data<br><br>Result (for verbosity = 0):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Result (for verbosity = 1):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"strippedsize\" : n,    (numeric) The block size excluding witness data<br>  \"weight\" : n           (numeric) The block weight as defined in BIP 141<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"nTx\" : n,             (numeric) The number of transactions in the block.<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbosity = 2):<br>{<br>  ...,                     Same output as verbosity = 1.<br>  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.<br>         ,...<br>  ],<br>  ,...                     Same output as verbosity = 1.<br>}<br><br>Examples:<br> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
        },
        "17": {
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "finalizepsbt": "finalizepsbt \"psbt\" ( extract )<br>Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a<br>network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be<br>created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.<br>Implements the Finalizer and Extractor roles.<br><br>Arguments:<br>1. \"psbt\"                 (string) A base64 string of a PSBT<br>2. \"extract\"              (boolean, optional, default=true) If true and the transaction is complete, <br>                             extract and return the complete transaction in normal network serialization instead of the PSBT.<br><br>Result:<br>{<br>  \"psbt\" : \"value\",          (string) The base64-encoded partially signed transaction if not extracted<br>  \"hex\" : \"value\",           (string) The hex-encoded network transaction if extracted<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli finalizepsbt \"psbt",
            "move": "move (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)",
            "loadwallet": "loadwallet \"filename\"<br><br>Loads a wallet from a wallet file or directory.<br>Note that all wallet command-line options used when starting bitcoind will be<br>applied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet directory or .dat file.<br><br>Result:<br>{<br>  \"name\" :    <wallet_name>,        (string) The wallet name if loaded successfully.<br>  \"warning\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.<br>}<br><br>Examples:<br> bitcoin-cli loadwallet \"test.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"loadwallet\", \"params\": [\"test.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( include_watchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"                  (string, required) The transaction id<br>2. \"include_watchonly\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in BTC<br>  \"fee\": x.xxx,            (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                              'send' category of transactions.<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",      (string) DEPRECATED. This field will be removed in a V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name involved in the transaction, can be \" for the default account.<br>      \"address\" : \"address\",          (string) The bitcoin address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx,                 (numeric) The amount in BTC<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                       (numeric) the vout value<br>      \"fee\": x.xxx,                     (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                           'send' category of transactions.<br>      \"abandoned\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                           'send' category of transactions.<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getinfo": "error code: -32601<br>error message:<br>getinfo<br><br>This call was removed in version 0.16.0. Use the appropriate fields from:<br>- getblockchaininfo: blocks, difficulty, chain<br>- getnetworkinfo: version, protocolversion, timeoffset, connections, proxy, relayfee, warnings<br>- getwalletinfo: balance, keypoololdest, keypoolsize, paytxfee, unlocked_until, walletversion<br><br>bitcoin-cli has the option -getinfo to collect and format these in the old format.",
            "getmempoolancestors": "getmempoolancestors txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool ancestors.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC (DEPRECATED)<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"fees\" : {<br>        \"base\" : n,         (numeric) transaction fee in BTC<br>        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC<br>        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC<br>        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC<br>    }<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempoolancestors \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaccount": "getreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)",
            "walletpassphrasechange": "walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"<br><br>Changes the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.<br><br>Arguments:<br>1. \"oldpassphrase\"      (string) The current passphrase<br>2. \"newpassphrase\"      (string) The new passphrase<br><br>Examples:<br> bitcoin-cli walletpassphrasechange \"old one\" \"new one\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrasechange\", \"params\": [\"old one\", \"new one\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included manually (by blockhash).<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"blockhash\"   (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "combinerawtransaction": "combinerawtransaction [\"hexstring\",...]<br><br>Combine multiple partially signed transactions into one transaction.<br>The combined transaction may be another partially signed transaction or a <br>fully signed transaction.<br>Arguments:<br>1. \"txs\"         (string) A json array of hex strings of partially signed transactions<br>    [<br>      \"hexstring\"     (string) A transaction hash<br>      ,...<br>    ]<br><br>Result:<br>\"hex\"            (string) The hex-encoded raw transaction with signature(s)<br><br>Examples:<br> bitcoin-cli combinerawtransaction [\"myhex1\", \"myhex2\", \"myhex3\"]",
            "stop": "stop<br><br>Stop Bitcoin server.",
            "combinepsbt": "combinepsbt [\"psbt\",...]<br><br>Combine multiple partially signed Bitcoin transactions into one transaction.<br>Implements the Combiner role.<br><br>Arguments:<br>1. \"txs\"                   (string) A json array of base64 strings of partially signed transactions<br>    [<br>      \"psbt\"             (string) A base64 string of a PSBT<br>      ,...<br>    ]<br><br>Result:<br>  \"psbt\"          (string) The base64-encoded partially signed transaction<br><br>Examples:<br> bitcoin-cli combinepsbt [\"mybase64_1\", \"mybase64_2\", \"mybase64_3\"]",
            "sethdseed": "sethdseed ( \"newkeypool\" \"seed\" )<br><br>Set or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already<br>HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.<br><br>Note that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.<br><br>Arguments:<br>1. \"newkeypool\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.<br>                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.<br>                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing<br>                             keypool will be used until it has been depleted.<br>2. \"seed\"               (string, optional) The WIF private key to use as the new HD seed; if not provided a random seed will be used.<br>                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1<br><br>Examples:<br> bitcoin-cli sethdseed <br> bitcoin-cli sethdseed false<br> bitcoin-cli sethdseed true \"wifkey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sethdseed\", \"params\": [true, \"wifkey\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" ( options iswitness )<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add at most one change output to the outputs.<br>No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must be<br>in the wallet using importaddress or addmultisigaddress (to calculate fees).<br>You can see whether this is the case by checking the \"solvable\" field in the listunspent output.<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. \"hexstring\"           (string, required) The hex string of the raw transaction<br>2. options                 (object, optional)<br>   {<br>     \"changeAddress\"          (string, optional, default pool address) The bitcoin address to receive the change<br>     \"changePosition\"         (numeric, optional, default random) The index of the change output<br>     \"change_type\"            (string, optional) The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -changetype.<br>     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only<br>     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs<br>     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in BTC/kB<br>     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.<br>                              The fee will be equally deducted from the amount of each specified output.<br>                              The outputs are specified by their zero-based index, before any change output is added.<br>                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                              If no outputs are specified here, the sender pays the fee.<br>                                  [vout_index,...]<br>     \"replaceable\"            (boolean, optional) Marks this transaction as BIP125 replaceable.<br>                              Allows this transaction to be replaced by a transaction with higher fees<br>     \"conf_target\"            (numeric, optional) Confirmation target (in blocks)<br>     \"estimate_mode\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>         \"UNSET\"<br>         \"ECONOMICAL\"<br>         \"CONSERVATIVE\"<br>   }<br>                         for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}<br>3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction <br>                              If iswitness is not present, heuristic tests will be used in decoding<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee in BTC the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> bitcoin-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> bitcoin-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> bitcoin-cli sendrawtransaction \"signedtransactionhex",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.<br><br>Arguments:<br>1. amount         (numeric or string, required) The transaction fee in BTC/kB<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> bitcoin-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletcreatefundedpsbt": "walletcreatefundedpsbt [{\"txid\":\"id\",\"vout\":n},...] [{\"address\":amount},{\"data\":\"hex\"},...] ( locktime ) ( replaceable ) ( options bip32derivs )<br><br>Creates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough<br>Implements the Creator and Updater roles.<br><br>Arguments:<br>1. \"inputs\"                (array, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",      (string, required) The transaction id<br>         \"vout\":n,         (numeric, required) The output number<br>         \"sequence\":n      (numeric, optional) The sequence number<br>       } <br>       ,...<br>     ]<br>2. \"outputs\"               (array, required) a json array with outputs (key-value pairs)<br>   [<br>    {<br>      \"address\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC<br>    },<br>    {<br>      \"data\": \"hex\"        (obj, optional) A key-value pair. The key must be \"data\", the value is hex encoded data<br>    }<br>    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also<br>                             accepted as second parameter.<br>   ]<br>3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br>                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.<br>4. options                 (object, optional)<br>   {<br>     \"changeAddress\"          (string, optional, default pool address) The bitcoin address to receive the change<br>     \"changePosition\"         (numeric, optional, default random) The index of the change output<br>     \"change_type\"            (string, optional) The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -changetype.<br>     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only<br>     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs<br>     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in BTC/kB<br>     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.<br>                              The fee will be equally deducted from the amount of each specified output.<br>                              The outputs are specified by their zero-based index, before any change output is added.<br>                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                              If no outputs are specified here, the sender pays the fee.<br>                                  [vout_index,...]<br>     \"replaceable\"            (boolean, optional) Marks this transaction as BIP125 replaceable.<br>                              Allows this transaction to be replaced by a transaction with higher fees<br>     \"conf_target\"            (numeric, optional) Confirmation target (in blocks)<br>     \"estimate_mode\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>         \"UNSET\"<br>         \"ECONOMICAL\"<br>         \"CONSERVATIVE\"<br>   }<br>5. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them<br><br>Result:<br>{<br>  \"psbt\": \"value\",        (string)  The resulting raw transaction (base64-encoded string)<br>  \"fee\":       n,         (numeric) Fee in BTC the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli walletcreatefundedpsbt \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"data\":\"00010203\"}]",
            "prioritisetransaction": "prioritisetransaction <txid> <dummy value> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. dummy          (numeric, optional) API-Compatibility for previous API. Must be zero or null.<br>                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.<br>3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result:<br>true              (boolean) Returns true<br><br>Examples:<br> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaccount": "listreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> bitcoin-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempooldescendants": "getmempooldescendants txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool descendants.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC (DEPRECATED)<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"fees\" : {<br>        \"base\" : n,         (numeric) transaction fee in BTC<br>        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC<br>        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC<br>        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC<br>    }<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempooldescendants \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Arguments:<br>1. \"address\"          (string, required) The Bitcoin address (or hex-encoded script)<br>2. \"label\"            (string, optional, default=\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls<br>may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br>If you have the full public key, you should call importpubkey instead of this.<br><br>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated<br>as change, and not show up in many RPCs.<br><br>Examples:<br><br>Import an address with rescan<br> bitcoin-cli importaddress \"myaddress\"<br><br>Import using a label without rescan<br> bitcoin-cli importaddress \"myaddress\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"address\" amount ( \"comment\" \"comment_to\" subtractfeefromamount replaceable conf_target \"estimate_mode\")<br><br>Send an amount to a given address.<br><br>Arguments:<br>1. \"address\"            (string, required) The bitcoin address to send to.<br>2. \"amount\"             (numeric or string, required) The amount in BTC to send. eg 0.1<br>3. \"comment\"            (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment_to\"         (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less bitcoins than you enter in the amount field.<br>6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125<br>7. conf_target            (numeric, optional) Confirmation target (in blocks)<br>8. \"estimate_mode\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>       \"UNSET\"<br>       \"ECONOMICAL\"<br>       \"CONSERVATIVE\"<br><br>Result:<br>\"txid\"                  (string) The transaction id.<br><br>Examples:<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \" \" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolentry": "getmempoolentry txid<br><br>Returns mempool data for given transaction<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br><br>Result:<br>{                           (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC (DEPRECATED)<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"fees\" : {<br>        \"base\" : n,         (numeric) transaction fee in BTC<br>        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC<br>        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC<br>        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC<br>    }<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>}<br><br>Examples:<br> bitcoin-cli getmempoolentry \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "removeprunedfunds": "removeprunedfunds \"txid\"<br><br>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.<br><br>Arguments:<br>1. \"txid\"           (string, required) The hex-encoded id of the transaction you are deleting<br><br>Examples:<br> bitcoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removeprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletname\": xxxxx,               (string) the wallet name<br>  \"walletversion\": xxxxx,            (numeric) the wallet version<br>  \"balance\": xxxxxxx,                (numeric) the total confirmed balance of the wallet in BTC<br>  \"unconfirmed_balance\": xxx,        (numeric) the total unconfirmed balance of the wallet in BTC<br>  \"immature_balance\": xxxxxx,        (numeric) the total immature balance of the wallet in BTC<br>  \"txcount\": xxxxxxx,                (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,           (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)<br>  \"keypoolsize_hd_internal\": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)<br>  \"unlocked_until\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,                (numeric) the transaction fee configuration, set in BTC/kB<br>  \"hdseedid\": \"<hash160>\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)<br>  \"hdmasterkeyid\": \"<hash160>\"       (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.<br>  \"private_keys_enabled\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)<br>}<br><br>Examples:<br> bitcoin-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "preciousblock": "preciousblock \"blockhash\"<br><br>Treats a block as if it were received before others with the same work.<br><br>A later preciousblock call can override the effect of an earlier one.<br><br>The effects of preciousblock are not retained across restarts.<br><br>Arguments:<br>1. \"blockhash\"   (string, required) the hash of the block to mark as precious<br><br>Result:<br><br>Examples:<br> bitcoin-cli preciousblock \"blockhash\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) The hash of the block at the tip of the chain<br>  \"transactions\": n,      (numeric) The number of transactions with unspent outputs<br>  \"txouts\": n,            (numeric) The number of unspent transaction outputs<br>  \"bogosize\": n,          (numeric) A meaningless metric for UTXO set size<br>  \"hash_serialized_2\": \"hash\", (string) The serialized hash<br>  \"disk_size\": n,         (numeric) The estimated size of the chainstate on disk<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> bitcoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addwitnessaddress": "addwitnessaddress \"address\" ( p2sh )<br><br>DEPRECATED: set the address_type argument of getnewaddress, or option -addresstype=[bech32|p2sh-segwit] instead.<br>Add a witness address for a script (with pubkey or redeemscript known). Requires a new wallet backup.<br>It returns the witness script.<br><br>Arguments:<br>1. \"address\"       (string, required) An address known to the wallet<br>2. p2sh            (bool, optional, default=true) Embed inside P2SH<br><br>Result:<br>\"witnessaddress\",  (string) The value of the new address (P2SH or BIP173).<br>}",
            "unloadwallet": "unloadwallet ( \"wallet_name\" )<br>Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.<br>Specifying the wallet name on a wallet endpoint is invalid.<br>Arguments:<br>1. \"wallet_name\"    (string, optional) The name of the wallet to unload.<br><br>Examples:<br> bitcoin-cli unloadwallet wallet_name<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"unloadwallet\", \"params\": [wallet_name] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"label\" \"address_type\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.<br>Each key is a Bitcoin address or hex-encoded public key.<br>This functionality is only intended for use with non-watchonly addresses.<br>See `importaddress` for watchonly p2sh address support.<br>If 'label' is specified, assign address to that label.<br><br>Arguments:<br>1. nrequired                      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"                         (string, required) A json array of bitcoin addresses or hex-encoded public keys<br>     [<br>       \"address\"                  (string) bitcoin address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"label\"                        (string, optional) A label to assign the addresses to.<br>4. \"address_type\"                 (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -addresstype.<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",    (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"         (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> bitcoin-cli addmultisigaddress 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaddress": "getreceivedbyaddress \"address\" ( minconf )<br><br>Returns the total amount received by the given address in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in BTC received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 0<br><br>The amount with at least 6 confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodepsbt": "decodepsbt \"psbt\"<br><br>Return a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.<br><br>Arguments:<br>1. \"psbt\"            (string, required) The PSBT base64 string<br><br>Result:<br>{<br>  \"tx\" : {                   (json object) The decoded network-serialized unsigned transaction.<br>    ...                                      The layout is the same as the output of decoderawtransaction.<br>  },<br>  \"unknown\" : {                (json object) The unknown global fields<br>    \"key\" : \"value\"            (key-value pair) An unknown key-value pair<br>     ...<br>  },<br>  \"inputs\" : [                 (array of json objects)<br>    {<br>      \"non_witness_utxo\" : {   (json object, optional) Decoded network transaction for non-witness UTXOs<br>        ...<br>      },<br>      \"witness_utxo\" : {            (json object, optional) Transaction output for witness UTXOs<br>        \"amount\" : x.xxx,           (numeric) The value in BTC<br>        \"scriptPubKey\" : {          (json object)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>          \"address\" : \"address\"     (string) Bitcoin address if there is one<br>        }<br>      },<br>      \"partial_signatures\" : {             (json object, optional)<br>        \"pubkey\" : \"signature\",           (string) The public key and signature that corresponds to it.<br>        ,...<br>      }<br>      \"sighash\" : \"type\",                  (string, optional) The sighash type to be used<br>      \"redeem_script\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>        }<br>      \"witness_script\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>        }<br>      \"bip32_derivs\" : {          (json object, optional)<br>        \"pubkey\" : {                     (json object, optional) The public key with the derivation path as the value.<br>          \"master_fingerprint\" : \"fingerprint\"     (string) The fingerprint of the master key<br>          \"path\" : \"path\",                         (string) The path<br>        }<br>        ,...<br>      }<br>      \"final_scriptsig\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>        }<br>       \"final_scriptwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>      \"unknown\" : {                (json object) The unknown global fields<br>        \"key\" : \"value\"            (key-value pair) An unknown key-value pair<br>         ...<br>      },<br>    }<br>    ,...<br>  ]<br>  \"outputs\" : [                 (array of json objects)<br>    {<br>      \"redeem_script\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>        }<br>      \"witness_script\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>      }<br>      \"bip32_derivs\" : [          (array of json objects, optional)<br>        {<br>          \"pubkey\" : \"pubkey\",                     (string) The public key this path corresponds to<br>          \"master_fingerprint\" : \"fingerprint\"     (string) The fingerprint of the master key<br>          \"path\" : \"path\",                         (string) The path<br>          }<br>        }<br>        ,...<br>      ],<br>      \"unknown\" : {                (json object) The unknown global fields<br>        \"key\" : \"value\"            (key-value pair) An unknown key-value pair<br>         ...<br>      },<br>    }<br>    ,...<br>  ]<br>  \"fee\" : fee                      (numeric, optional) The transaction fee paid if all UTXOs slots in the PSBT have been filled.<br>}<br><br>Examples:<br> bitcoin-cli decodepsbt \"psbt",
            "gettxout": "gettxout \"txid\" n ( include_mempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"             (string, required) The transaction id<br>2. \"n\"                (numeric, required) vout number<br>3. \"include_mempool\"  (boolean, optional) Whether to include the mempool. Default: true.     Note that an unspent output that is spent in the mempool won't appear.<br><br>Result:<br>{<br>  \"bestblock\":  \"hash\",    (string) The hash of the block at the tip of the chain<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in BTC<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of bitcoin addresses<br>        \"address\"     (string) bitcoin address<br>        ,...<br>     ]<br>  },<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> bitcoin-cli listunspent <br><br>View the details<br> bitcoin-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"(dummy)\" minconf include_watchonly )<br><br>Returns the total available balance.<br>The available balance is what the wallet considers currently spendable, and is<br>thus affected by options which limit spendability such as -spendzeroconfchange.<br><br>Arguments:<br>1. (dummy)           (string, optional) Remains for backward compatibility. Must be excluded or set to \"*\".<br>2. minconf           (numeric, optional, default=0) Only include transactions confirmed at least this many times.<br>3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>The total amount in the wallet with 1 or more confirmations<br> bitcoin-cli getbalance <br><br>The total amount in the wallet at least 6 blocks confirmed<br> bitcoin-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "bumpfee": "bumpfee \"txid\" ( options ) <br><br>Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.<br>An opt-in RBF transaction with the given txid must be in the wallet.<br>The command will pay the additional fee by decreasing (or perhaps removing) its change output.<br>If the change output is not big enough to cover the increased fee, the command will currently fail<br>instead of adding new inputs to compensate. (A future implementation could improve this.)<br>The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.<br>By default, the new fee will be calculated automatically using estimatesmartfee.<br>The user can specify a confirmation target for estimatesmartfee.<br>Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.<br>At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee<br>returned by getnetworkinfo) to enter the node's mempool.<br><br>Arguments:<br>1. txid                  (string, required) The txid to be bumped<br>2. options               (object, optional)<br>   {<br>     \"confTarget\"        (numeric, optional) Confirmation target (in blocks)<br>     \"totalFee\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.<br>                         In rare cases, the actual fee paid might be slightly higher than the specified<br>                         totalFee if the tx change output has to be removed because it is too close to<br>                         the dust threshold.<br>     \"replaceable\"       (boolean, optional, default true) Whether the new transaction should still be<br>                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will<br>                         be left unchanged from the original. If false, any input sequence numbers in the<br>                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe<br>                         so the new transaction will not be explicitly bip-125 replaceable (though it may<br>                         still be replaceable in practice, for example if it has unconfirmed ancestors which<br>                         are replaceable).<br>     \"estimate_mode\"     (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>         \"UNSET\"<br>         \"ECONOMICAL\"<br>         \"CONSERVATIVE\"<br>   }<br><br>Result:<br>{<br>  \"txid\":    \"value\",   (string)  The id of the new transaction<br>  \"origfee\":  n,         (numeric) Fee of the replaced transaction<br>  \"fee\":      n,         (numeric) Fee of the new transaction<br>  \"errors\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)<br>}<br><br>Examples:<br><br>Bump the fee, get the new transaction's txid<br> bitcoin-cli bumpfee <txid>",
            "setlabel": "setlabel \"address\" \"label\"<br><br>Sets the label associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to be associated with a label.<br>2. \"label\"           (string, required) The label to assign to the address.<br><br>Examples:<br> bitcoin-cli setlabel \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setlabel\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprunedfunds": "importprunedfunds<br><br>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.<br><br>Arguments:<br>1. \"rawtransaction\" (string, required) A raw transaction in hex funding an already-existing address in wallet<br>2. \"txoutproof\"     (string, required) The hex output from gettxoutproof that contains the transaction",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getblocktemplate": "getblocktemplate ( TemplateRequest )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>For full specification, see BIPs 22, 23, 9, and 145:<br>    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes<br>    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki<br><br>Arguments:<br>1. template_request         (json object, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted<br>       \"capabilities\":[     (array, optional) A list of strings<br>           \"support\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>       ],<br>       \"rules\":[            (array, optional) A list of strings<br>           \"support\"          (string) client side supported softfork deployment<br>           ,...<br>       ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The preferred block version<br>  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced<br>  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments<br>      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule<br>      ,...<br>  },<br>  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions<br>  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal<br>         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)<br>         \"depends\" : [                (array) array of numbers <br>             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero<br>         \"weight\" : n,                (numeric) total transaction weight, as counted for purposes of block limits<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig<br>  },<br>  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)<br>  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",                (string) The hash target<br>  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                     (array of string) list of ways the block template may be changed <br>     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"weightlimit\" : n,                (numeric) limit of block weight<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> bitcoin-cli getblocktemplate {\"rules\": [\"segwit\"]}<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [{\"rules\": [\"segwit\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintxstats": "getchaintxstats ( nblocks blockhash )<br><br>Compute statistics about the total number and rate of transactions in the chain.<br><br>Arguments:<br>1. nblocks      (numeric, optional) Size of the window in number of blocks (default: one month).<br>2. \"blockhash\"  (string, optional) The hash of the block that ends the window.<br><br>Result:<br>{<br>  \"time\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.<br>  \"txcount\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.<br>  \"window_final_block_hash\": \"...\",      (string) The hash of the final block in the window.<br>  \"window_block_count\": xxxxx,           (numeric) Size of the window in number of blocks.<br>  \"window_tx_count\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0.<br>  \"window_interval\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0.<br>  \"txrate\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0.<br>}<br><br>Examples:<br> bitcoin-cli getchaintxstats <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressesbylabel": "getaddressesbylabel \"label\"<br><br>Returns the list of addresses assigned the specified label.<br><br>Arguments:<br>1. \"label\"  (string, required) The label.<br><br>Result:<br>{ (json object with addresses as keys)<br>  \"address\": { (json object with information about address)<br>    \"purpose\": \"string\" (string)  Purpose of address (\"send\" for sending address, \"receive\" for receiving address)<br>  },...<br>}<br><br>Examples:<br> bitcoin-cli getaddressesbylabel \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbylabel\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "generate": "generate nblocks ( maxtries )<br><br>Mine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> bitcoin-cli generate 11",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The IP address and port of the peer<br>    \"addrbind\":\"ip:port\",    (string) Bind address of the connection to the peer<br>    \"addrlocal\":\"ip:port\",   (string) Local address as reported by the peer<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time (if available)<br>    \"minping\": n,              (numeric) minimum observed ping time (if any at all)<br>    \"pingwait\": n,             (numeric) ping wait (if non-zero)<br>    \"version\": v,              (numeric) The peer version, such as 70001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"addnode\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ],<br>    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted<br>    \"bytessent_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes sent aggregated by message type<br>       ...<br>    },<br>    \"bytesrecv_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes received aggregated by message type<br>       ...<br>    }<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networkactive\": true|false,           (bool) whether p2p networking is enabled<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in BTC/kB<br>  \"incrementalfee\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network and blockchain warnings<br>}<br><br>Examples:<br> bitcoin-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressesbyaccount": "getaddressbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)",
            "logging": "logging ( <include> <exclude> )<br>Gets and sets the logging configuration.<br>When called without an argument, returns the list of categories with status that are currently being debug logged or not.<br>When called with arguments, adds or removes categories from debug logging and return the lists above.<br>The arguments are evaluated in order \"include\", \"exclude\".<br>If an item is both included and excluded, it will thus end up being excluded.<br>The valid logging categories are: net, tor, mempool, http, bench, zmq, db, rpc, estimatefee, addrman, selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej, libevent, coindb, qt, leveldb<br>In addition, the following are available as category names with special meanings:<br>  - \"all\",  \"1\" : represent all logging categories.<br>  - \"none\", \"0\" : even if other logging categories are specified, ignore all of them.<br><br>Arguments:<br>1. \"include\"        (array of strings, optional) A json array of categories to add debug logging<br>     [<br>       \"category\"   (string) the valid logging category<br>       ,...<br>     ]<br>2. \"exclude\"        (array of strings, optional) A json array of categories to remove debug logging<br>     [<br>       \"category\"   (string) the valid logging category<br>       ,...<br>     ]<br><br>Result:<br>{                   (json object where keys are the logging categories, and values indicates its status<br>  \"category\": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active<br>  ...<br>}<br><br>Examples:<br> bitcoin-cli logging \"[\"all\"]\" \"[\"http\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"logging\", \"params\": [[\"all\"], \"[libevent]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts to add or remove a node from the addnode list.<br>Or try a connection to a node once.<br>Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be<br>full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletpassphrase": "walletpassphrase \"passphrase\" timeout<br><br>Stores the wallet decryption key in memory for 'timeout' seconds.<br>This is needed prior to performing transactions related to private keys such as sending bitcoins<br><br>Arguments:<br>1. \"passphrase\"     (string, required) The wallet passphrase<br>2. timeout            (numeric, required) The time to keep the decryption key in seconds; capped at 100000000 (~3 years).<br><br>Note:<br>Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock<br>time that overrides the old one.<br><br>Examples:<br><br>Unlock the wallet for 60 seconds<br> bitcoin-cli walletpassphrase \"my pass phrase\" 60<br><br>Lock the wallet again (before 60 seconds)<br> bitcoin-cli walletlock <br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrase\", \"params\": [\"my pass phrase\", 60] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock ([{\"txid\":\"txid\",\"vout\":n},...])<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.<br>A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf  [\"addresses\",...] [include_unsafe] [query_options])<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"      (string) A json array of bitcoin addresses to filter<br>    [<br>      \"address\"     (string) bitcoin address<br>      ,...<br>    ]<br>4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend<br>                  See description of \"safe\" attribute below.<br>5. query_options    (json, optional) JSON with query options<br>    {<br>      \"minimumAmount\"    (numeric or string, default=0) Minimum value of each UTXO in BTC<br>      \"maximumAmount\"    (numeric or string, default=unlimited) Maximum value of each UTXO in BTC<br>      \"maximumCount\"     (numeric or string, default=unlimited) Maximum number of UTXOs<br>      \"minimumSumAmount\" (numeric or string, default=unlimited) Minimum sum value of all UTXOs in BTC<br>    }<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",    (string) the bitcoin address<br>    \"label\" : \"label\",        (string) The associated label, or \" for the default label<br>    \"account\" : \"account\",    (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The associated account, or \" for the default account<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction output amount in BTC<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH<br>    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output<br>    \"solvable\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys<br>    \"safe\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions<br>                              from outside keys and unconfirmed replacement transactions are considered unsafe<br>                              and are not eligible for spending by fundrawtransaction and sendtoaddress.<br>  }<br>  ,...<br>]<br><br>Examples<br> bitcoin-cli listunspent <br> bitcoin-cli listunspent 6 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> bitcoin-cli listunspent 6 9999999 '[]' true '{ \"minimumAmount\": 0.005 }'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999, [] , true, { \"minimumAmount\": 0.005 } ] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> bitcoin-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] [{\"address\":amount},{\"data\":\"hex\"},...] ( locktime ) ( replaceable )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"inputs\"                (array, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",      (string, required) The transaction id<br>         \"vout\":n,         (numeric, required) The output number<br>         \"sequence\":n      (numeric, optional) The sequence number<br>       } <br>       ,...<br>     ]<br>2. \"outputs\"               (array, required) a json array with outputs (key-value pairs)<br>   [<br>    {<br>      \"address\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC<br>    },<br>    {<br>      \"data\": \"hex\"        (obj, optional) A key-value pair. The key must be \"data\", the value is hex encoded data<br>    }<br>    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also<br>                             accepted as second parameter.<br>   ]<br>3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br>4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.<br>                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.<br><br>Result:<br>\"transaction\"              (string) hex string of the transaction<br><br>Examples:<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"address\":0.01}]\"<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"data\":\"00010203\"}]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"[{\"address\":0.01}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"[{\"data\":\"00010203\"}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createwallet": "createwallet \"wallet_name\" ( disable_private_keys )<br><br>Creates and loads a new wallet.<br><br>Arguments:<br>1. \"wallet_name\"          (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.<br>2. disable_private_keys   (boolean, optional, default: false) Disable the possibility of private keys (only watchonlys are possible in this mode).<br><br>Result:<br>{<br>  \"name\" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.<br>  \"warning\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.<br>}<br><br>Examples:<br> bitcoin-cli createwallet \"testwallet\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createwallet\", \"params\": [\"testwallet\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccountaddress": "getaccountaddress (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)",
            "setban": "setban \"subnet\" \"add|remove\" (bantime) (absolute)<br><br>Attempts to add or remove an IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"subnet\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)<br>2. \"command\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400<br> bitcoin-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlabels": "listlabels ( \"purpose\" )<br><br>Returns the list of all labels, or labels that are assigned to addresses with a specific purpose.<br><br>Arguments:<br>1. \"purpose\"    (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.<br><br>Result:<br>[               (json array of string)<br>  \"label\",      (string) Label name<br>  ...<br>]<br><br>Examples:<br><br>List all labels<br> bitcoin-cli listlabels <br><br>List labels that have receiving addresses<br> bitcoin-cli listlabels receive<br><br>List labels that have sending addresses<br> bitcoin-cli listlabels send<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlabels\", \"params\": [receive] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf include_empty include_watchonly address_filter )<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br>4. address_filter    (string, optional) If present, only return information on this address.<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. Backwards compatible alias for label.<br>    \"amount\" : x.xxx,                  (numeric) The total amount in BTC received by the address<br>    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\",               (string) The label of the receiving address. The default label is \".<br>    \"txids\": [<br>       \"txid\",                         (string) The ids of transactions received with the address <br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaddress <br> bitcoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true, \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaccounts": "listaccounts (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)",
            "estimatefee": "error code: -32<br>error message:<br>estimatefee was removed in v0.17.<br>Clients should use estimatesmartfee.",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum fee rate in BTC/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee<br>  \"minrelaytxfee\": xxxxx       (numeric) Current minimum relay fee for transactions<br>}<br><br>Examples:<br> bitcoin-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressinfo": "getaddressinfo \"address\"<br><br>Return information about the given bitcoin address. Some information requires the address<br>to be in the wallet.<br><br>Arguments:<br>1. \"address\"                    (string, required) The bitcoin address to get the information of.<br><br>Result:<br>{<br>  \"address\" : \"address\",        (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"iswitness\" : true|false,     (boolean) If the address is a witness address<br>  \"witness_version\" : version   (numeric, optional) The version number of the witness program<br>  \"witness_program\" : \"hex\"     (string, optional) The hex value of the witness program<br>  \"script\" : \"type\"             (string, optional) The output script type. Only if \"isscript\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown<br>  \"hex\" : \"hex\",                (string, optional) The redeemscript for the p2sh address<br>  \"pubkeys\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \"script\" is \"multisig\")<br>    [<br>      \"pubkey\"<br>      ,...<br>    ]<br>  \"sigsrequired\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \"script\" is \"multisig\")<br>  \"pubkey\" : \"publickeyhex\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)<br>  \"embedded\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\"timestamp\", \"hdkeypath\", \"hdseedid\") and relation to the wallet (\"ismine\", \"iswatchonly\", \"account\").<br>  \"iscompressed\" : true|false,  (boolean) If the address is compressed<br>  \"label\" :  \"label\"         (string) The label associated with the address, \" is the default account<br>  \"account\" : \"account\"         (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account associated with the address, \" is the default account<br>  \"timestamp\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)<br>  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available<br>  \"hdseedid\" : \"<hash160>\"      (string, optional) The Hash160 of the HD seed<br>  \"hdmasterkeyid\" : \"<hash160>\" (string, optional) alias for hdseedid maintained for backwards compatibility. Will be removed in V0.18.<br>  \"labels\"                      (object) Array of labels associated with the address.<br>    [<br>      { (json object of label data)<br>        \"name\": \"labelname\" (string) The label<br>        \"purpose\": \"string\" (string) Purpose of address (\"send\" for sending address, \"receive\" for receiving address)<br>      },...<br>    ]<br>}<br><br>Examples:<br> bitcoin-cli getaddressinfo \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressinfo\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest blockchain.<br><br>Result:<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples:<br> bitcoin-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "converttopsbt": "converttopsbt \"hexstring\" ( permitsigdata iswitness )<br><br>Converts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction<br>createpsbt and walletcreatefundedpsbt should be used for new applications.<br><br>Arguments:<br>1. \"hexstring\"              (string, required) The hex string of a raw transaction<br>2. permitsigdata           (boolean, optional, default=false) If true, any signatures in the input will be discarded and conversion.<br>                              will continue. If false, RPC will fail if any signatures are present.<br>3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction.<br>                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion<br>                              will be tried. If false, only non-witness deserialization wil be tried. Only has an effect if<br>                              permitsigdata is true.<br><br>Result:<br>  \"psbt\"        (string)  The resulting raw transaction (base64-encoded string)<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"data\":\"00010203\"}]\"<br><br>Convert the transaction to a PSBT<br> bitcoin-cli converttopsbt \"rawtransaction",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>DEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\",   (string, required for P2SH or P2WSH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"privkeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletlock": "walletlock<br><br>Removes the wallet encryption key from memory, locking the wallet.<br>After calling this method, you will need to call walletpassphrase again<br>before being able to call any methods which require the wallet to be unlocked.<br><br>Examples:<br><br>Set the passphrase for 2 minutes to perform a transaction<br> bitcoin-cli walletpassphrase \"my pass phrase\" 120<br><br>Perform a send (requires passphrase set)<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 1.0<br><br>Clear the passphrase since we are done before 2 minutes is up<br> bitcoin-cli walletlock <br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletlock\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> bitcoin-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"label\" \"address_type\" )<br><br>Returns a new Bitcoin address for receiving payments.<br>If 'label' is specified, it is added to the address book <br>so payments received with the address will be associated with 'label'.<br><br>Arguments:<br>1. \"label\"          (string, optional) The label name for the address to be linked to. If not provided, the default label \" is used. It can also be set to the empty string \" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.<br>2. \"address_type\"   (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -addresstype.<br><br>Result:<br>\"address\"    (string) The new bitcoin address<br><br>Examples:<br> bitcoin-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Hint: use getmempoolentry to fetch a specific transaction from the mempool.<br><br>Arguments:<br>1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC (DEPRECATED)<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"fees\" : {<br>        \"base\" : n,         (numeric) transaction fee in BTC<br>        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC<br>        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC<br>        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC<br>    }<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransactionwithwallet": "signrawtransactionwithwallet \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br><br><br>Arguments:<br>1. \"hexstring\"                      (string, required) The transaction hex string<br>2. \"prevtxs\"                        (string, optional) An json array of previous dependent transaction outputs<br>     [                              (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",               (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",     (string, required) script key<br>         \"redeemScript\": \"hex\",     (string, required for P2SH or P2WSH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"sighashtype\"                    (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",                  (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,          (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                      (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",              (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                   (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",          (string) The hex-encoded signature script<br>      \"sequence\" : n,               (numeric) Script sequence number<br>      \"error\" : \"text\"              (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransactionwithwallet \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransactionwithwallet\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding blockchain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",              (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,             (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,            (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\",       (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,         (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,         (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"initialblockdownload\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.<br>  \"chainwork\": \"xxxx\"           (string) total amount of work in active chain, in hexadecimal<br>  \"size_on_disk\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk<br>  \"pruned\": xx,                 (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)<br>  \"automatic_pruning\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)<br>  \"prune_target_size\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)<br>  \"softforks\": [                (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",           (string) name of softfork<br>        \"version\": xx,          (numeric) block version<br>        \"reject\": {             (object) progress toward rejecting pre-softfork blocks<br>           \"status\": xx,        (boolean) true if threshold reached<br>        },<br>     }, ...<br>  ],<br>  \"bip9_softforks\": {           (object) status of BIP9 softforks in progress<br>     \"xxxx\" : {                 (string) name of the softfork<br>        \"status\": \"xxxx\",       (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"<br>        \"bit\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)<br>        \"startTime\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning<br>        \"timeout\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in<br>        \"since\": xx,            (numeric) height of the first block to which the status applies<br>        \"statistics\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \"started\" status)<br>           \"period\": xx,        (numeric) the length in blocks of the BIP9 signalling period <br>           \"threshold\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature <br>           \"elapsed\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period <br>           \"count\": xx,         (numeric) the number of blocks with the version bit set in the current period <br>           \"possible\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold <br>        }<br>     }<br>  }<br>  \"warnings\" : \"...\",           (string) any network and blockchain warnings.<br>}<br><br>Examples:<br> bitcoin-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprivkey": "importprivkey \"privkey\" ( \"label\" ) ( rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.<br>Hint: use importmulti to import more than one private key.<br><br>Arguments:<br>1. \"privkey\"          (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls<br>may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br><br>Examples:<br><br>Dump a private key<br> bitcoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> bitcoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"testing\" false<br><br>Import using default blank label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "validateaddress": "validateaddress \"address\"<br><br>Return information about the given bitcoin address.<br>DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must<br>transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated<br>fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,<br>script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.<br><br>Arguments:<br>1. \"address\"                    (string, required) The bitcoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"address\",        (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"iswitness\" : true|false,     (boolean) If the address is a witness address<br>  \"witness_version\" : version   (numeric, optional) The version number of the witness program<br>  \"witness_program\" : \"hex\"     (string, optional) The hex value of the witness program<br>}<br><br>Examples:<br> bitcoin-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "pruneblockchain": "pruneblockchain<br><br>Arguments:<br>1. \"height\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp<br>                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.<br><br>Result:<br>n    (numeric) Height of the last block pruned.<br><br>Examples:<br> bitcoin-cli pruneblockchain 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> bitcoin-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt your wallet<br> bitcoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending bitcoin<br> bitcoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can do something like sign<br> bitcoin-cli signmessage \"address\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> bitcoin-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash height<br><br>Returns hash of block in best-block-chain at height provided.<br><br>Arguments:<br>1. height         (numeric, required) The height index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> bitcoin-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> bitcoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> bitcoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.<br>Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.<br>Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by<br>only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename with path (either absolute or relative to bitcoind)<br><br>Result:<br>{                           (json object)<br>  \"filename\" : {        (string) The filename with full absolute path<br>}<br><br>Examples:<br> bitcoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "rescanblockchain": "rescanblockchain (\"start_height\") (\"stop_height\")<br><br>Rescan the local blockchain for wallet related transactions.<br><br>Arguments:<br>1. \"start_height\"    (numeric, optional) block height where the rescan should start<br>2. \"stop_height\"     (numeric, optional) the last block height that should be scanned<br><br>Result:<br>{<br>  \"start_height\"     (numeric) The block height where the rescan has started. If omitted, rescan started from the genesis block.<br>  \"stop_height\"      (numeric) The height of the last rescanned block. If omitted, rescan stopped at the chain tip.<br>}<br><br>Examples:<br> bitcoin-cli rescanblockchain 100000 120000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"rescanblockchain\", \"params\": [100000, 120000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccount": "getaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletprocesspsbt": "walletprocesspsbt \"psbt\" ( sign \"sighashtype\" bip32derivs )<br><br>Update a PSBT with input information from our wallet and then sign inputs<br>that we can sign for.<br><br><br>Arguments:<br>1. \"psbt\"                      (string, required) The transaction base64 string<br>2. sign                          (boolean, optional, default=true) Also sign the transaction when updating<br>3. \"sighashtype\"            (string, optional, default=ALL) The signature hash type to sign with if not specified by the PSBT. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br>4. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them<br><br>Result:<br>{<br>  \"psbt\" : \"value\",          (string) The base64-encoded partially signed transaction<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli walletprocesspsbt \"psbt",
            "estimatesmartfee": "estimatesmartfee conf_target (\"estimate_mode\")<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within conf_target blocks if possible and return the number of blocks<br>for which the estimate is valid. Uses virtual transaction size as defined<br>in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)<br>2. \"estimate_mode\" (string, optional, default=CONSERVATIVE) The fee estimate mode.<br>                   Whether to return a more conservative estimate which also satisfies<br>                   a longer history. A conservative estimate potentially returns a<br>                   higher feerate and is more likely to be sufficient for the desired<br>                   target, but is not as responsive to short term drops in the<br>                   prevailing fee market.  Must be one of:<br>       \"UNSET\" (defaults to CONSERVATIVE)<br>       \"ECONOMICAL\"<br>       \"CONSERVATIVE\"<br><br>Result:<br>{<br>  \"feerate\" : x.x,     (numeric, optional) estimate fee rate in BTC/kB<br>  \"errors\": [ str... ] (json array of strings, optional) Errors encountered during processing<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>The request target will be clamped between 2 and the highest target<br>fee estimation is able to return based on how long it has been running.<br>An error is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br><br>Example:<br> bitcoin-cli estimatesmartfee 6",
            "disconnectnode": "disconnectnode \"[address]\" [nodeid]<br><br>Immediately disconnects from the specified peer node.<br><br>Strictly one out of 'address' and 'nodeid' can be provided to identify the node.<br><br>To disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.<br><br>Arguments:<br>1. \"address\"     (string, optional) The IP address/port of the node<br>2. \"nodeid\"      (number, optional) The node ID (see getpeerinfo for node IDs)<br><br>Examples:<br> bitcoin-cli disconnectnode \"192.168.0.6:8333\"<br> bitcoin-cli disconnectnode \" 1<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setaccount": "setaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)",
            "decoderawtransaction": "decoderawtransaction \"hexstring\" ( iswitness )<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hexstring\"      (string, required) The transaction hex string<br>2. iswitness          (boolean, optional) Whether the transaction hex is a serialized witness transaction<br>                         If iswitness is not present, heuristic tests will be used in decoding<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"weight\" : n,           (numeric) The transaction's weight (between vsize*4 - 3 and vsize*4)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> bitcoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>  \"nTx\" : n,             (numeric) The number of transactions in the block.<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendmany": "sendmany \" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] replaceable conf_target \"estimate_mode\")<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br>Note that the \"fromaccount\" argument has been removed in V0.17. To use this RPC with a \"fromaccount\" argument, restart<br>bitcoind with -deprecatedrpc=accounts<br><br><br>Arguments:<br>1. \"dummy\"               (string, required) Must be set to \" for backwards compatibility.<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in BTC is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefrom         (array, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"          (string) Subtract fee from this address<br>      ,...<br>    ]<br>6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125<br>7. conf_target            (numeric, optional) Confirmation target (in blocks)<br>8. \"estimate_mode\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>       \"UNSET\"<br>       \"ECONOMICAL\"<br>       \"CONSERVATIVE\"<br><br>Result:<br>\"txid\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \" \"[\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\", {\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}, 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> bitcoin-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransactionwithkey": "signrawtransactionwithkey \"hexstring\" [\"privatekey1\",...] ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second argument is an array of base58-encoded private<br>keys that will be the only keys used to sign the transaction.<br>The third optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br><br>Arguments:<br>1. \"hexstring\"                      (string, required) The transaction hex string<br>2. \"privkeys\"                       (string, required) A json array of base58-encoded private keys for signing<br>    [                               (json array of strings)<br>      \"privatekey\"                  (string) private key in base58-encoding<br>      ,...<br>    ]<br>3. \"prevtxs\"                        (string, optional) An json array of previous dependent transaction outputs<br>     [                              (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",               (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",     (string, required) script key<br>         \"redeemScript\": \"hex\",     (string, required for P2SH or P2WSH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>4. \"sighashtype\"                    (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",                  (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,          (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                      (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",              (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                   (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",          (string) The hex-encoded signature script<br>      \"sequence\" : n,               (numeric) Script sequence number<br>      \"error\" : \"text\"              (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransactionwithkey \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransactionwithkey\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress ( \"address_type\" )<br><br>Returns a new Bitcoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Arguments:<br>1. \"address_type\"           (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is set by -changetype.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> bitcoin-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel nblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. nblocks      (numeric, optional, default=6, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> bitcoin-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"address\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"address\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abortrescan": "abortrescan<br><br>Stops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.<br><br>Examples:<br><br>Import a private key<br> bitcoin-cli importprivkey \"mykey\"<br><br>Abort the running wallet rescan<br> bitcoin-cli abortrescan <br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abortrescan\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "testmempoolaccept": "testmempoolaccept [\"rawtxs\"] ( allowhighfees )<br><br>Returns if raw transaction (serialized, hex-encoded) would be accepted by mempool.<br><br>This checks if the transaction violates the consensus or policy rules.<br><br>See sendrawtransaction call.<br><br>Arguments:<br>1. [\"rawtxs\"]       (array, required) An array of hex strings of raw transactions.<br>                                        Length must be one for now.<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.<br>                            Length is exactly one for now.<br> {<br>  \"txid\"           (string) The transaction hash in hex<br>  \"allowed\"        (boolean) If the mempool allows this tx to be inserted<br>  \"reject-reason\"  (string) Rejection string (only present when 'allowed' is false)<br> }<br>]<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Test acceptance of the transaction (signed hex)<br> bitcoin-cli testmempoolaccept \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"testmempoolaccept\", \"params\": [[\"signedhex\"]] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpprivkey": "dumpprivkey \"address\"<br><br>Reveals the private key corresponding to 'address'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"address\"   (string, required) The bitcoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> bitcoin-cli dumpprivkey \"myaddress\"<br> bitcoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> bitcoin-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions (label count skip include_watchonly)<br><br>If a label name is provided, this will return only incoming transactions paying to addresses with the specified label.<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions.<br>Note that the \"account\" argument and \"otheraccount\" return value have been removed in V0.17. To use this RPC with an \"account\" argument, restart<br>bitcoind with -deprecatedrpc=accounts<br><br>Arguments:<br>1. \"label\"    (string, optional) If set, should be a valid label name to return only incoming transactions<br>              with the specified label, or \"*\" to disable filtering and return all transactions.<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. skip           (numeric, optional, default=0) The number of transactions to skip<br>4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction.<br>    \"category\":\"send|receive\", (string) The transaction category.<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and is positive<br>                                        for the 'receive' category,<br>    \"label\": \"label\",       (string) A comment for the address/transaction, if any<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Negative confirmations indicate the<br>                                         transaction conflicts with the block chain<br>    \"trusted\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\", (string) The transaction id.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                     may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                         'send' category of transactions.<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> bitcoin-cli listtransactions <br><br>List transactions 100 to 120<br> bitcoin-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> bitcoin-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblockweight\": nnn, (numeric) The last block weight<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"networkhashps\": nnn,      (numeric) The network hashes per second<br>  \"pooledtx\": n              (numeric) The size of the mempool<br>  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"warnings\": \"...\"          (string) any network and blockchain warnings<br>}<br><br>Examples:<br> bitcoin-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createpsbt": "createpsbt [{\"txid\":\"id\",\"vout\":n},...] [{\"address\":amount},{\"data\":\"hex\"},...] ( locktime ) ( replaceable )<br><br>Creates a transaction in the Partially Signed Transaction format.<br>Implements the Creator role.<br><br>Arguments:<br>1. \"inputs\"                (array, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",      (string, required) The transaction id<br>         \"vout\":n,         (numeric, required) The output number<br>         \"sequence\":n      (numeric, optional) The sequence number<br>       } <br>       ,...<br>     ]<br>2. \"outputs\"               (array, required) a json array with outputs (key-value pairs)<br>   [<br>    {<br>      \"address\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC<br>    },<br>    {<br>      \"data\": \"hex\"        (obj, optional) A key-value pair. The key must be \"data\", the value is hex encoded data<br>    }<br>    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also<br>                             accepted as second parameter.<br>   ]<br>3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br>4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.<br>                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.<br><br>Result:<br>  \"psbt\"        (string)  The resulting raw transaction (base64-encoded string)<br><br>Examples:<br> bitcoin-cli createpsbt \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"data\":\"00010203\"}]",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies current wallet file to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> bitcoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getzmqnotifications": "getzmqnotifications<br><br>Returns information about the active ZeroMQ notifications.<br><br>Result:<br>[<br>  {                        (json object)<br>    \"type\": \"pubhashtx\",   (string) Type of notification<br>    \"address\": \"...\"       (string) Address of the publisher<br>  },<br>  ...<br>]<br><br>Examples:<br> bitcoin-cli getzmqnotifications <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getzmqnotifications\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessagewithprivkey": "signmessagewithprivkey \"privkey\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"privkey\"         (string, required) The private key to sign the message with.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Create the signature<br> bitcoin-cli signmessagewithprivkey \"privkey\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest blockchain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> bitcoin-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbylabel": "getreceivedbylabel \"label\" ( minconf )<br><br>Returns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. \"label\"        (string, required) The selected label, may be the default label using \".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this label.<br><br>Examples:<br><br>Amount received by the default label with at least 1 confirmation<br> bitcoin-cli getreceivedbylabel \"<br><br>Amount received at the tabby label including unconfirmed amounts with zero confirmations<br> bitcoin-cli getreceivedbylabel \"tabby\" 0<br><br>The amount with at least 6 confirmations<br> bitcoin-cli getreceivedbylabel \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbylabel\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...] ( \"address_type\" )<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired                    (numeric, required) The number of required signatures out of the n keys.<br>2. \"keys\"                       (string, required) A json array of hex-encoded public keys<br>     [<br>       \"key\"                    (string) The hex-encoded public key<br>       ,...<br>     ]<br>3. \"address_type\"               (string, optional) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\". Default is legacy.<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 public keys<br> bitcoin-cli createmultisig 2 \"[\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\"  ( \"dummy\" )<br><br>Attempts to submit new block to network.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"        (string, required) the hex-encoded block data to submit<br>2. \"dummy\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.<br><br>Result:<br><br>Examples:<br> bitcoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"address\",            (string) The bitcoin address<br>      amount,                 (numeric) The amount in BTC<br>      \"label\"               (string, optional) The label<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose \"blockhash\" )<br><br>NOTE: By default this function only works for mempool transactions. If the -txindex option is<br>enabled, it also works for blockchain transactions. If the block which contains the transaction<br>is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is<br>provided, only that block will be searched and if the transaction is in the mempool or other<br>blocks, or if this node does not have the given block available, the transaction will not be found.<br>DEPRECATED: for now, it also works for transactions with unspent outputs.<br><br>Return the raw transaction data.<br><br>If verbose is 'true', returns an Object with information about 'txid'.<br>If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object<br>3. \"blockhash\" (string, optional) The block in which to look for the transaction<br><br>Result (if verbose is not set or set to false):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose is set to true):<br>{<br>  \"in_active_chain\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \"blockhash\" argument)<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The serialized transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"weight\" : n,           (numeric) The transaction's weight (between vsize*4-3 and vsize*4)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"address\"        (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> bitcoin-cli getrawtransaction \"mytxid\"<br> bitcoin-cli getrawtransaction \"mytxid\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> bitcoin-cli getrawtransaction \"mytxid\" false \"myblockhash\"<br> bitcoin-cli getrawtransaction \"mytxid\" true \"myblockhash",
            "uptime": "uptime<br><br>Returns the total uptime of the server.<br><br>Result:<br>ttt        (numeric) The number of seconds that the server has been running<br><br>Examples:<br> bitcoin-cli uptime <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"uptime\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hexstring\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hexstring\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) bitcoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).<br>}<br><br>Examples:<br> bitcoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setnetworkactive": "setnetworkactive true|false<br><br>Disable/enable all p2p network activity.<br><br>Arguments:<br>1. \"state\"        (boolean, required) true to enable networking, false to disable",
            "listsinceblock": "listsinceblock ( \"blockhash\" target_confirmations include_watchonly include_removed )<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted.<br>If \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included.<br>Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.<br><br>Arguments:<br>1. \"blockhash\"            (string, optional) The block hash to list transactions since<br>2. target_confirmations:    (numeric, optional, default=1) Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value<br>3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br>4. include_removed:         (bool, optional, default=true) Show transactions that were removed due to a reorg in the \"removed\" array<br>                                                           (not guaranteed to work on pruned nodes)<br><br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name associated with the transaction. Will be \" for the default account.<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>                                          When it's < 0, it means the transaction conflicted that many blocks ago.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx,         (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"       (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"removed\": [<br>    <structure is the same as \"transactions\" above, only present if include_removed=true><br>    Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones<br>}<br><br>Examples:<br> bitcoin-cli listsinceblock <br> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Arguments:<br>1. \"pubkey\"           (string, required) The hex-encoded public key<br>2. \"label\"            (string, optional, default=\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls<br>may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br><br>Examples:<br><br>Import a public key with rescan<br> bitcoin-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> bitcoin-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> bitcoin-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already abandoned.<br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br><br>Result:<br><br>Examples:<br> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( nblocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height      (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> bitcoin-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmemoryinfo": "getmemoryinfo (\"mode\")<br>Returns an object containing information about memory usage.<br>Arguments:<br>1. \"mode\" determines what kind of information is returned. This argument is optional, the default mode is \"stats\".<br>  - \"stats\" returns general statistics about memory usage in the daemon.<br>  - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).<br><br>Result (mode \"stats\"):<br>{<br>  \"locked\": {               (json object) Information about locked memory manager<br>    \"used\": xxxxx,          (numeric) Number of bytes used<br>    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas<br>    \"total\": xxxxxxx,       (numeric) Total number of bytes managed<br>    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.<br>    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks<br>    \"chunks_free\": xxxxx,   (numeric) Number unused chunks<br>  }<br>}<br><br>Result (mode \"mallocinfo\"):<br>\"<malloc version=\"1\">...\"<br><br>Examples:<br> bitcoin-cli getmemoryinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listwallets": "listwallets<br>Returns a list of currently loaded wallets.<br>For full information on the wallet, use \"getwalletinfo\"<br><br>Result:<br>[                         (json array of strings)<br>  \"walletname\"            (string) the wallet name<br>   ...<br>]<br><br>Examples:<br> bitcoin-cli listwallets <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listwallets\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendfrom": "sendfrom (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)",
            "getaddednodeinfo": "getaddednodeinfo ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br><br>Arguments:<br>1. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node IP address or name (as provided to addnode)<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [                    (list of objects) Only when connected = true<br>       {<br>         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server IP and port we're connected to<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddednodeinfo \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importmulti": "importmulti \"requests\" ( \"options\" )<br><br>Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.<br><br>Arguments:<br>1. requests     (array, required) Data to be imported<br>  [     (array of json objects)<br>    {<br>      \"scriptPubKey\": \"<script>\" | { \"address\":\"<address>\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)<br>      \"timestamp\": timestamp | \"now\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),<br>                                                              or the string \"now\" to substitute the current synced blockchain time. The timestamp of the oldest<br>                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.<br>                                                              \"now\" can be specified to bypass scanning, for keys which are known to never have been used, and<br>                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key<br>                                                              creation time of all keys being imported by the importmulti call will be scanned.<br>      \"redeemscript\": \"<script>\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey<br>      \"pubkeys\": [\"<pubKey>\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript<br>      \"keys\": [\"<key>\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript<br>      \"internal\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments<br>      \"watchonly\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty<br>      \"label\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false<br>    }<br>  ,...<br>  ]<br>2. options                 (json, optional)<br>  {<br>     \"rescan\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports<br>  }<br><br>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls<br>may report that the imported keys, addresses or scripts exists but related transactions are still missing.<br><br>Examples:<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'<br><br>Response is an array with the same size as the input that has the execution result :<br>  [{ \"success\": true } , { \"success\": false, \"error\": { \"code\": -1, \"message\": \"Internal Server Error\"} }, ... ]",
            "generatetoaddress": "generatetoaddress nblocks address (maxtries)<br><br>Mine blocks immediately to a specified address (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. address      (string, required) The address to send the newly generated bitcoin to.<br>3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks to myaddress<br> bitcoin-cli generatetoaddress 11 \"myaddress",
            "getblock": "getblock \"blockhash\" ( verbosity ) <br><br>If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbosity is 1, returns an Object with information about block <hash>.<br>If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. <br><br>Arguments:<br>1. \"blockhash\"          (string, required) The block hash<br>2. verbosity              (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data<br><br>Result (for verbosity = 0):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Result (for verbosity = 1):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"strippedsize\" : n,    (numeric) The block size excluding witness data<br>  \"weight\" : n           (numeric) The block weight as defined in BIP 141<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"nTx\" : n,             (numeric) The number of transactions in the block.<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbosity = 2):<br>{<br>  ...,                     Same output as verbosity = 1.<br>  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.<br>         ,...<br>  ],<br>  ,...                     Same output as verbosity = 1.<br>}<br><br>Examples:<br> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbylabel": "listreceivedbylabel ( minconf include_empty include_watchonly)<br><br>List received transactions by label.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include labels that haven't received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",  (string) DEPRECATED. Backwards compatible alias for label.<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this label<br>    \"confirmations\" : n,          (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"           (string) The label of the receiving address. The default label is \".<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbylabel <br> bitcoin-cli listreceivedbylabel 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbylabel\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
        },
        "18": {
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. command    (string, optional, default=all commands) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "finalizepsbt": "finalizepsbt \"psbt\" ( extract )<br>Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a<br>network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be<br>created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.<br>Implements the Finalizer and Extractor roles.<br><br>Arguments:<br>1. psbt       (string, required) A base64 string of a PSBT<br>2. extract    (boolean, optional, default=true) If true and the transaction is complete,<br>              extract and return the complete transaction in normal network serialization instead of the PSBT.<br><br>Result:<br>{<br>  \"psbt\" : \"value\",          (string) The base64-encoded partially signed transaction if not extracted<br>  \"hex\" : \"value\",           (string) The hex-encoded network transaction if extracted<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli finalizepsbt \"psbt",
            "loadwallet": "loadwallet \"filename\"<br><br>Loads a wallet from a wallet file or directory.<br>Note that all wallet command-line options used when starting bitcoind will be<br>applied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).<br><br>Arguments:<br>1. filename    (string, required) The wallet directory or .dat file.<br><br>Result:<br>{<br>  \"name\" :    <wallet_name>,        (string) The wallet name if loaded successfully.<br>  \"warning\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.<br>}<br><br>Examples:<br> bitcoin-cli loadwallet \"test.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"loadwallet\", \"params\": [\"test.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( include_watchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. txid                 (string, required) The transaction id<br>2. include_watchonly    (boolean, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in BTC<br>  \"fee\": x.xxx,            (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                              'send' category of transactions.<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>  \"details\" : [<br>    {<br>      \"address\" : \"address\",          (string) The bitcoin address involved in the transaction<br>      \"category\" :                      (string) The transaction category.<br>                   \"send\"                  Transactions sent.<br>                   \"receive\"               Non-coinbase transactions received.<br>                   \"generate\"              Coinbase transactions received with more than 100 confirmations.<br>                   \"immature\"              Coinbase transactions received with 100 or fewer confirmations.<br>                   \"orphan\"                Orphaned coinbase transactions received.<br>      \"amount\" : x.xxx,                 (numeric) The amount in BTC<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                       (numeric) the vout value<br>      \"fee\": x.xxx,                     (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                           'send' category of transactions.<br>      \"abandoned\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                           'send' category of transactions.<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolancestors": "getmempoolancestors \"txid\" ( verbose )<br><br>If txid is in the mempool, returns all in-mempool ancestors.<br><br>Arguments:<br>1. txid       (string, required) The transaction id (must be in mempool)<br>2. verbose    (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose = false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction<br>  ,...<br>]<br><br>Result (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC (DEPRECATED)<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"fees\" : {<br>        \"base\" : n,         (numeric) transaction fee in BTC<br>        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC<br>        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC<br>        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC<br>    }<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>    \"bip125-replaceable\" : true|false,  (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempoolancestors \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletpassphrasechange": "walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"<br><br>Changes the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.<br><br>Arguments:<br>1. oldpassphrase    (string, required) The current passphrase<br>2. newpassphrase    (string, required) The new passphrase<br><br>Examples:<br> bitcoin-cli walletpassphrasechange \"old one\" \"new one\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrasechange\", \"params\": [\"old one\", \"new one\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( \"blockhash\" )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included manually (by blockhash).<br><br>Arguments:<br>1. txids          (json array, required) A json array of txids to filter<br>     [<br>       \"txid\",    (string) A transaction hash<br>       ...<br>     ]<br>2. blockhash      (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "combinerawtransaction": "combinerawtransaction [\"hexstring\",...]<br><br>Combine multiple partially signed transactions into one transaction.<br>The combined transaction may be another partially signed transaction or a <br>fully signed transaction.<br>Arguments:<br>1. txs                 (json array, required) A json array of hex strings of partially signed transactions<br>     [<br>       \"hexstring\",    (string) A transaction hash<br>       ...<br>     ]<br><br>Result:<br>\"hex\"            (string) The hex-encoded raw transaction with signature(s)<br><br>Examples:<br> bitcoin-cli combinerawtransaction [\"myhex1\", \"myhex2\", \"myhex3\"]",
            "stop": "stop<br><br>Stop Bitcoin server.",
            "utxoupdatepsbt": "utxoupdatepsbt \"psbt\"<br><br>Updates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.<br><br>Arguments:<br>1. psbt    (string, required) A base64 string of a PSBT<br><br>Result:<br>  \"psbt\"          (string) The base64-encoded partially signed transaction with inputs updated<br><br>Examples:<br> bitcoin-cli utxoupdatepsbt \"psbt",
            "combinepsbt": "combinepsbt [\"psbt\",...]<br><br>Combine multiple partially signed Bitcoin transactions into one transaction.<br>Implements the Combiner role.<br><br>Arguments:<br>1. txs            (json array, required) A json array of base64 strings of partially signed transactions<br>     [<br>       \"psbt\",    (string) A base64 string of a PSBT<br>       ...<br>     ]<br><br>Result:<br>  \"psbt\"          (string) The base64-encoded partially signed transaction<br><br>Examples:<br> bitcoin-cli combinepsbt [\"mybase64_1\", \"mybase64_2\", \"mybase64_3\"]",
            "sethdseed": "sethdseed ( newkeypool \"seed\" )<br><br>Set or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already<br>HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.<br><br>Note that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.<br><br>Arguments:<br>1. newkeypool    (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.<br>                 If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.<br>                 If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing<br>                 keypool will be used until it has been depleted.<br>2. seed          (string, optional, default=random seed) The WIF private key to use as the new HD seed.<br>                 The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1<br><br>Examples:<br> bitcoin-cli sethdseed <br> bitcoin-cli sethdseed false<br> bitcoin-cli sethdseed true \"wifkey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sethdseed\", \"params\": [true, \"wifkey\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" ( options iswitness )<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add at most one change output to the outputs.<br>No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransactionwithkey<br> or signrawtransactionwithwallet for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must be<br>in the wallet using importaddress or addmultisigaddress (to calculate fees).<br>You can see whether this is the case by checking the \"solvable\" field in the listunspent output.<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. hexstring                          (string, required) The hex string of the raw transaction<br>2. options                            (json object, optional) for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}<br>     {<br>       \"changeAddress\": \"str\",        (string, optional, default=pool address) The bitcoin address to receive the change<br>       \"changePosition\": n,           (numeric, optional, default=random) The index of the change output<br>       \"change_type\": \"str\",          (string, optional, default=set by -changetype) The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\".<br>       \"includeWatching\": bool,       (boolean, optional, default=false) Also select inputs which are watch only<br>       \"lockUnspents\": bool,          (boolean, optional, default=false) Lock selected unspent outputs<br>       \"feeRate\": amount,             (numeric or string, optional, default=not set: makes wallet determine the fee) Set a specific fee rate in BTC/kB<br>       \"subtractFeeFromOutputs\": [    (json array, optional, default=empty array) A json array of integers.<br>                                      The fee will be equally deducted from the amount of each specified output.<br>                                      Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                                      If no outputs are specified here, the sender pays the fee.<br>         vout_index,                  (numeric) The zero-based output index, before a change output is added.<br>         ...<br>       ],<br>       \"replaceable\": bool,           (boolean, optional, default=fallback to wallet's default) Marks this transaction as BIP125 replaceable.<br>                                      Allows this transaction to be replaced by a transaction with higher fees<br>       \"conf_target\": n,              (numeric, optional, default=fallback to wallet's default) Confirmation target (in blocks)<br>       \"estimate_mode\": \"str\",        (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>                                      \"UNSET\"<br>                                      \"ECONOMICAL\"<br>                                      \"CONSERVATIVE\"<br>     }<br>3. iswitness                          (boolean, optional, default=depends on heuristic tests) Whether the transaction hex is a serialized witness transaction <br>                                      If iswitness is not present, heuristic tests will be used in decoding<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee in BTC the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> bitcoin-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> bitcoin-cli signrawtransactionwithwallet \"fundedtransactionhex\"<br><br>Send the transaction<br> bitcoin-cli sendrawtransaction \"signedtransactionhex",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.<br><br>Arguments:<br>1. amount    (numeric or string, required) The transaction fee in BTC/kB<br><br>Result:<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> bitcoin-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletcreatefundedpsbt": "walletcreatefundedpsbt [{\"txid\":\"hex\",\"vout\":n,\"sequence\":n},...] [{\"address\":amount},{\"data\":\"hex\"},...] ( locktime options bip32derivs )<br><br>Creates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough<br>Implements the Creator and Updater roles.<br><br>Arguments:<br>1. inputs                             (json array, required) A json array of json objects<br>     [<br>       {                              (json object)<br>         \"txid\": \"hex\",               (string, required) The transaction id<br>         \"vout\": n,                   (numeric, required) The output number<br>         \"sequence\": n,               (numeric, required) The sequence number<br>       },<br>       ...<br>     ]<br>2. outputs                            (json array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.<br>                                      That is, each address can only appear once and there can only be one 'data' object.<br>                                      For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also<br>                                      accepted as second parameter.<br>     [<br>       {                              (json object)<br>         \"address\": amount,           (numeric or string, required) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC<br>       },<br>       {                              (json object)<br>         \"data\": \"hex\",               (string, required) A key-value pair. The key must be \"data\", the value is hex-encoded data<br>       },<br>       ...<br>     ]<br>3. locktime                           (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br>4. options                            (json object, optional)<br>     {<br>       \"changeAddress\": \"hex\",        (string, optional, default=pool address) The bitcoin address to receive the change<br>       \"changePosition\": n,           (numeric, optional, default=random) The index of the change output<br>       \"change_type\": \"str\",          (string, optional, default=set by -changetype) The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\".<br>       \"includeWatching\": bool,       (boolean, optional, default=false) Also select inputs which are watch only<br>       \"lockUnspents\": bool,          (boolean, optional, default=false) Lock selected unspent outputs<br>       \"feeRate\": amount,             (numeric or string, optional, default=not set: makes wallet determine the fee) Set a specific fee rate in BTC/kB<br>       \"subtractFeeFromOutputs\": [    (json array, optional, default=empty array) A json array of integers.<br>                                      The fee will be equally deducted from the amount of each specified output.<br>                                      Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                                      If no outputs are specified here, the sender pays the fee.<br>         vout_index,                  (numeric) The zero-based output index, before a change output is added.<br>         ...<br>       ],<br>       \"replaceable\": bool,           (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.<br>                                      Allows this transaction to be replaced by a transaction with higher fees<br>       \"conf_target\": n,              (numeric, optional, default=Fallback to wallet's confirmation target) Confirmation target (in blocks)<br>       \"estimate_mode\": \"str\",        (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>                                      \"UNSET\"<br>                                      \"ECONOMICAL\"<br>                                      \"CONSERVATIVE\"<br>     }<br>5. bip32derivs                        (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them<br><br>Result:<br>{<br>  \"psbt\": \"value\",        (string)  The resulting raw transaction (base64-encoded string)<br>  \"fee\":       n,         (numeric) Fee in BTC the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli walletcreatefundedpsbt \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"data\":\"00010203\"}]",
            "prioritisetransaction": "prioritisetransaction \"txid\" ( dummy ) fee_delta<br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. txid         (string, required) The transaction id.<br>2. dummy        (numeric, optional) API-Compatibility for previous API. Must be zero or null.<br>                DEPRECATED. For forward compatibility use named arguments and omit this parameter.<br>3. fee_delta    (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.<br>                The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result:<br>true              (boolean) Returns true<br><br>Examples:<br> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> bitcoin-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempooldescendants": "getmempooldescendants \"txid\" ( verbose )<br><br>If txid is in the mempool, returns all in-mempool descendants.<br><br>Arguments:<br>1. txid       (string, required) The transaction id (must be in mempool)<br>2. verbose    (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose = false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction<br>  ,...<br>]<br><br>Result (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC (DEPRECATED)<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"fees\" : {<br>        \"base\" : n,         (numeric) transaction fee in BTC<br>        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC<br>        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC<br>        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC<br>    }<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>    \"bip125-replaceable\" : true|false,  (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempooldescendants \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls<br>may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br>If you have the full public key, you should call importpubkey instead of this.<br><br>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated<br>as change, and not show up in many RPCs.<br><br>Arguments:<br>1. address    (string, required) The Bitcoin address (or hex-encoded script)<br>2. label      (string, optional, default=\") An optional label<br>3. rescan     (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh       (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Examples:<br><br>Import an address with rescan<br> bitcoin-cli importaddress \"myaddress\"<br><br>Import using a label without rescan<br> bitcoin-cli importaddress \"myaddress\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"address\" amount ( \"comment\" \"comment_to\" subtractfeefromamount replaceable conf_target \"estimate_mode\" )<br><br>Send an amount to a given address.<br><br>Arguments:<br>1. address                  (string, required) The bitcoin address to send to.<br>2. amount                   (numeric or string, required) The amount in BTC to send. eg 0.1<br>3. comment                  (string, optional) A comment used to store what the transaction is for.<br>                            This is not part of the transaction, just kept in your wallet.<br>4. comment_to               (string, optional) A comment to store the name of the person or organization<br>                            to which you're sending the transaction. This is not part of the <br>                            transaction, just kept in your wallet.<br>5. subtractfeefromamount    (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                            The recipient will receive less bitcoins than you enter in the amount field.<br>6. replaceable              (boolean, optional, default=fallback to wallet's default) Allow this transaction to be replaced by a transaction with higher fees via BIP 125<br>7. conf_target              (numeric, optional, default=fallback to wallet's default) Confirmation target (in blocks)<br>8. estimate_mode            (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>                            \"UNSET\"<br>                            \"ECONOMICAL\"<br>                            \"CONSERVATIVE\"<br><br>Result:<br>\"txid\"                  (string) The transaction id.<br><br>Examples:<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \" \" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolentry": "getmempoolentry \"txid\"<br><br>Returns mempool data for given transaction<br><br>Arguments:<br>1. txid    (string, required) The transaction id (must be in mempool)<br><br>Result:<br>{                           (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC (DEPRECATED)<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"fees\" : {<br>        \"base\" : n,         (numeric) transaction fee in BTC<br>        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC<br>        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC<br>        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC<br>    }<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>    \"bip125-replaceable\" : true|false,  (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)<br>}<br><br>Examples:<br> bitcoin-cli getmempoolentry \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrpcinfo": "getrpcinfo<br><br>Returns details of the RPC server.<br><br>Result:<br>{<br> \"active_commands\" (array) All active commands<br>  [<br>   {               (object) Information about an active command<br>    \"method\"       (string)  The name of the RPC command <br>    \"duration\"     (numeric)  The running time in microseconds<br>   },...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli getrpcinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrpcinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "removeprunedfunds": "removeprunedfunds \"txid\"<br><br>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.<br><br>Arguments:<br>1. txid    (string, required) The hex-encoded id of the transaction you are deleting<br><br>Examples:<br> bitcoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removeprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletname\": xxxxx,               (string) the wallet name<br>  \"walletversion\": xxxxx,            (numeric) the wallet version<br>  \"balance\": xxxxxxx,                (numeric) the total confirmed balance of the wallet in BTC<br>  \"unconfirmed_balance\": xxx,        (numeric) the total unconfirmed balance of the wallet in BTC<br>  \"immature_balance\": xxxxxx,        (numeric) the total immature balance of the wallet in BTC<br>  \"txcount\": xxxxxxx,                (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,           (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)<br>  \"keypoolsize_hd_internal\": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)<br>  \"unlocked_until\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,                (numeric) the transaction fee configuration, set in BTC/kB<br>  \"hdseedid\": \"<hash160>\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)<br>  \"private_keys_enabled\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)<br>}<br><br>Examples:<br> bitcoin-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "preciousblock": "preciousblock \"blockhash\"<br><br>Treats a block as if it were received before others with the same work.<br><br>A later preciousblock call can override the effect of an earlier one.<br><br>The effects of preciousblock are not retained across restarts.<br><br>Arguments:<br>1. blockhash    (string, required) the hash of the block to mark as precious<br><br>Examples:<br> bitcoin-cli preciousblock \"blockhash\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) The hash of the block at the tip of the chain<br>  \"transactions\": n,      (numeric) The number of transactions with unspent outputs<br>  \"txouts\": n,            (numeric) The number of unspent transaction outputs<br>  \"bogosize\": n,          (numeric) A meaningless metric for UTXO set size<br>  \"hash_serialized_2\": \"hash\", (string) The serialized hash<br>  \"disk_size\": n,         (numeric) The estimated size of the chainstate on disk<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> bitcoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnodeaddresses": "getnodeaddresses ( count )<br><br>Return known addresses which can potentially be used to find new nodes in the network<br><br>Arguments:<br>1. count    (numeric, optional, default=1) How many addresses to return. Limited to the smaller of 2500 or 23% of all known addresses.<br><br>Result:<br>[<br>  {<br>    \"time\": ttt,                (numeric) Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen<br>    \"services\": n,              (numeric) The services offered<br>    \"address\": \"host\",          (string) The address of the node<br>    \"port\": n                   (numeric) The port of the node<br>  }<br>  ,....<br>]<br><br>Examples:<br> bitcoin-cli getnodeaddresses 8<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnodeaddresses\", \"params\": [8] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "joinpsbts": "joinpsbts [\"psbt\",...]<br><br>Joins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs<br>No input in any of the PSBTs can be in more than one of the PSBTs.<br><br>Arguments:<br>1. txs            (json array, required) A json array of base64 strings of partially signed transactions<br>     [<br>       \"psbt\",    (string, required) A base64 string of a PSBT<br>       ...<br>     ]<br><br>Result:<br>  \"psbt\"          (string) The base64-encoded partially signed transaction<br><br>Examples:<br> bitcoin-cli joinpsbts \"psbt",
            "unloadwallet": "unloadwallet ( \"wallet_name\" )<br>Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.<br>Specifying the wallet name on a wallet endpoint is invalid.<br>Arguments:<br>1. wallet_name    (string, optional, default=the wallet name from the RPC request) The name of the wallet to unload.<br><br>Examples:<br> bitcoin-cli unloadwallet wallet_name<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"unloadwallet\", \"params\": [wallet_name] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"label\" \"address_type\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.<br>Each key is a Bitcoin address or hex-encoded public key.<br>This functionality is only intended for use with non-watchonly addresses.<br>See `importaddress` for watchonly p2sh address support.<br>If 'label' is specified, assign address to that label.<br><br>Arguments:<br>1. nrequired       (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. keys            (json array, required) A json array of bitcoin addresses or hex-encoded public keys<br>     [<br>       \"key\",      (string) bitcoin address or hex-encoded public key<br>       ...<br>     ]<br>3. label           (string, optional) A label to assign the addresses to.<br>4. address_type    (string, optional, default=set by -addresstype) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\".<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",    (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"         (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> bitcoin-cli addmultisigaddress 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaddress": "getreceivedbyaddress \"address\" ( minconf )<br><br>Returns the total amount received by the given address in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. address    (string, required) The bitcoin address for transactions.<br>2. minconf    (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in BTC received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 0<br><br>The amount with at least 6 confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 6<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodepsbt": "decodepsbt \"psbt\"<br><br>Return a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.<br><br>Arguments:<br>1. psbt    (string, required) The PSBT base64 string<br><br>Result:<br>{<br>  \"tx\" : {                   (json object) The decoded network-serialized unsigned transaction.<br>    ...                                      The layout is the same as the output of decoderawtransaction.<br>  },<br>  \"unknown\" : {                (json object) The unknown global fields<br>    \"key\" : \"value\"            (key-value pair) An unknown key-value pair<br>     ...<br>  },<br>  \"inputs\" : [                 (array of json objects)<br>    {<br>      \"non_witness_utxo\" : {   (json object, optional) Decoded network transaction for non-witness UTXOs<br>        ...<br>      },<br>      \"witness_utxo\" : {            (json object, optional) Transaction output for witness UTXOs<br>        \"amount\" : x.xxx,           (numeric) The value in BTC<br>        \"scriptPubKey\" : {          (json object)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>          \"address\" : \"address\"     (string) Bitcoin address if there is one<br>        }<br>      },<br>      \"partial_signatures\" : {             (json object, optional)<br>        \"pubkey\" : \"signature\",           (string) The public key and signature that corresponds to it.<br>        ,...<br>      }<br>      \"sighash\" : \"type\",                  (string, optional) The sighash type to be used<br>      \"redeem_script\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>        }<br>      \"witness_script\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>        }<br>      \"bip32_derivs\" : {          (json object, optional)<br>        \"pubkey\" : {                     (json object, optional) The public key with the derivation path as the value.<br>          \"master_fingerprint\" : \"fingerprint\"     (string) The fingerprint of the master key<br>          \"path\" : \"path\",                         (string) The path<br>        }<br>        ,...<br>      }<br>      \"final_scriptsig\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>        }<br>       \"final_scriptwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>      \"unknown\" : {                (json object) The unknown global fields<br>        \"key\" : \"value\"            (key-value pair) An unknown key-value pair<br>         ...<br>      },<br>    }<br>    ,...<br>  ]<br>  \"outputs\" : [                 (array of json objects)<br>    {<br>      \"redeem_script\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>        }<br>      \"witness_script\" : {       (json object, optional)<br>          \"asm\" : \"asm\",            (string) The asm<br>          \"hex\" : \"hex\",            (string) The hex<br>          \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'<br>      }<br>      \"bip32_derivs\" : [          (array of json objects, optional)<br>        {<br>          \"pubkey\" : \"pubkey\",                     (string) The public key this path corresponds to<br>          \"master_fingerprint\" : \"fingerprint\"     (string) The fingerprint of the master key<br>          \"path\" : \"path\",                         (string) The path<br>          }<br>        }<br>        ,...<br>      ],<br>      \"unknown\" : {                (json object) The unknown global fields<br>        \"key\" : \"value\"            (key-value pair) An unknown key-value pair<br>         ...<br>      },<br>    }<br>    ,...<br>  ]<br>  \"fee\" : fee                      (numeric, optional) The transaction fee paid if all UTXOs slots in the PSBT have been filled.<br>}<br><br>Examples:<br> bitcoin-cli decodepsbt \"psbt",
            "gettxout": "gettxout \"txid\" n ( include_mempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. txid               (string, required) The transaction id<br>2. n                  (numeric, required) vout number<br>3. include_mempool    (boolean, optional, default=true) Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.<br><br>Result:<br>{<br>  \"bestblock\":  \"hash\",    (string) The hash of the block at the tip of the chain<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in BTC<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of bitcoin addresses<br>        \"address\"     (string) bitcoin address<br>        ,...<br>     ]<br>  },<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> bitcoin-cli listunspent <br><br>View the details<br> bitcoin-cli gettxout \"txid\" 1<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"dummy\" minconf include_watchonly )<br><br>Returns the total available balance.<br>The available balance is what the wallet considers currently spendable, and is<br>thus affected by options which limit spendability such as -spendzeroconfchange.<br><br>Arguments:<br>1. dummy                (string, optional) Remains for backward compatibility. Must be excluded or set to \"*\".<br>2. minconf              (numeric, optional, default=0) Only include transactions confirmed at least this many times.<br>3. include_watchonly    (boolean, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this wallet.<br><br>Examples:<br><br>The total amount in the wallet with 1 or more confirmations<br> bitcoin-cli getbalance <br><br>The total amount in the wallet at least 6 blocks confirmed<br> bitcoin-cli getbalance \"*\" 6<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "bumpfee": "bumpfee \"txid\" ( options )<br><br>Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.<br>An opt-in RBF transaction with the given txid must be in the wallet.<br>The command will pay the additional fee by decreasing (or perhaps removing) its change output.<br>If the change output is not big enough to cover the increased fee, the command will currently fail<br>instead of adding new inputs to compensate. (A future implementation could improve this.)<br>The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.<br>By default, the new fee will be calculated automatically using estimatesmartfee.<br>The user can specify a confirmation target for estimatesmartfee.<br>Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.<br>At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee<br>returned by getnetworkinfo) to enter the node's mempool.<br><br>Arguments:<br>1. txid                           (string, required) The txid to be bumped<br>2. options                        (json object, optional)<br>     {<br>       \"confTarget\": n,           (numeric, optional, default=fallback to wallet's default) Confirmation target (in blocks)<br>       \"totalFee\": n,             (numeric, optional, default=fallback to 'confTarget') Total fee (NOT feerate) to pay, in satoshis.<br>                                  In rare cases, the actual fee paid might be slightly higher than the specified<br>                                  totalFee if the tx change output has to be removed because it is too close to<br>                                  the dust threshold.<br>       \"replaceable\": bool,       (boolean, optional, default=true) Whether the new transaction should still be<br>                                  marked bip-125 replaceable. If true, the sequence numbers in the transaction will<br>                                  be left unchanged from the original. If false, any input sequence numbers in the<br>                                  original transaction that were less than 0xfffffffe will be increased to 0xfffffffe<br>                                  so the new transaction will not be explicitly bip-125 replaceable (though it may<br>                                  still be replaceable in practice, for example if it has unconfirmed ancestors which<br>                                  are replaceable).<br>       \"estimate_mode\": \"str\",    (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>                                  \"UNSET\"<br>                                  \"ECONOMICAL\"<br>                                  \"CONSERVATIVE\"<br>     }<br><br>Result:<br>{<br>  \"txid\":    \"value\",   (string)  The id of the new transaction<br>  \"origfee\":  n,         (numeric) Fee of the replaced transaction<br>  \"fee\":      n,         (numeric) Fee of the new transaction<br>  \"errors\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)<br>}<br><br>Examples:<br><br>Bump the fee, get the new transaction's txid<br> bitcoin-cli bumpfee <txid>",
            "setlabel": "setlabel \"address\" \"label\"<br><br>Sets the label associated with the given address.<br><br>Arguments:<br>1. address    (string, required) The bitcoin address to be associated with a label.<br>2. label      (string, required) The label to assign to the address.<br><br>Examples:<br> bitcoin-cli setlabel \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setlabel\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprunedfunds": "importprunedfunds \"rawtransaction\" \"txoutproof\"<br><br>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.<br><br>Arguments:<br>1. rawtransaction    (string, required) A raw transaction in hex funding an already-existing address in wallet<br>2. txoutproof        (string, required) The hex output from gettxoutproof that contains the transaction",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getblocktemplate": "getblocktemplate \"template_request\"<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>For full specification, see BIPs 22, 23, 9, and 145:<br>    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes<br>    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki<br><br>Arguments:<br>1. template_request         (json object, required) A json object in the following spec<br>     {<br>       \"mode\": \"str\",       (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted<br>       \"capabilities\": [    (json array, optional) A list of strings<br>         \"support\",         (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>         ...<br>       ],<br>       \"rules\": [           (json array, required) A list of strings<br>         \"support\",         (string) client side supported softfork deployment<br>         ...<br>       ],<br>     }<br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The preferred block version<br>  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced<br>  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments<br>      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule<br>      ,...<br>  },<br>  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions<br>  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal<br>         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)<br>         \"depends\" : [                (array) array of numbers <br>             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero<br>         \"weight\" : n,                (numeric) total transaction weight, as counted for purposes of block limits<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig<br>  },<br>  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)<br>  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",                (string) The hash target<br>  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                     (array of string) list of ways the block template may be changed <br>     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"weightlimit\" : n,                (numeric) limit of block weight<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> bitcoin-cli getblocktemplate {\"rules\": [\"segwit\"]}<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [{\"rules\": [\"segwit\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintxstats": "getchaintxstats ( nblocks \"blockhash\" )<br><br>Compute statistics about the total number and rate of transactions in the chain.<br><br>Arguments:<br>1. nblocks      (numeric, optional, default=one month) Size of the window in number of blocks<br>2. blockhash    (string, optional, default=chain tip) The hash of the block that ends the window.<br><br>Result:<br>{<br>  \"time\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.<br>  \"txcount\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.<br>  \"window_final_block_hash\": \"...\",      (string) The hash of the final block in the window.<br>  \"window_block_count\": xxxxx,           (numeric) Size of the window in number of blocks.<br>  \"window_tx_count\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0.<br>  \"window_interval\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0.<br>  \"txrate\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0.<br>}<br><br>Examples:<br> bitcoin-cli getchaintxstats <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressesbylabel": "getaddressesbylabel \"label\"<br><br>Returns the list of addresses assigned the specified label.<br><br>Arguments:<br>1. label    (string, required) The label.<br><br>Result:<br>{ (json object with addresses as keys)<br>  \"address\": { (json object with information about address)<br>    \"purpose\": \"string\" (string)  Purpose of address (\"send\" for sending address, \"receive\" for receiving address)<br>  },...<br>}<br><br>Examples:<br> bitcoin-cli getaddressesbylabel \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbylabel\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "generate": "generate nblocks ( maxtries )<br><br>Mine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.<br><br>Arguments:<br>1. nblocks     (numeric, required) How many blocks are generated immediately.<br>2. maxtries    (numeric, optional, default=1000000) How many iterations to try.<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> bitcoin-cli generate 11",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The IP address and port of the peer<br>    \"addrbind\":\"ip:port\",    (string) Bind address of the connection to the peer<br>    \"addrlocal\":\"ip:port\",   (string) Local address as reported by the peer<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time (if available)<br>    \"minping\": n,              (numeric) minimum observed ping time (if any at all)<br>    \"pingwait\": n,             (numeric) ping wait (if non-zero)<br>    \"version\": v,              (numeric) The peer version, such as 70001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"addnode\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ],<br>    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted<br>    \"minfeefilter\": n,         (numeric) The minimum fee rate for transactions this peer accepts<br>    \"bytessent_per_msg\": {<br>       \"msg\": n,               (numeric) The total bytes sent aggregated by message type<br>                               When a message type is not listed in this json object, the bytes sent are 0.<br>                               Only known message types can appear as keys in the object.<br>       ...<br>    },<br>    \"bytesrecv_per_msg\": {<br>       \"msg\": n,               (numeric) The total bytes received aggregated by message type<br>                               When a message type is not listed in this json object, the bytes received are 0.<br>                               Only known message types can appear as keys in the object and all bytes received of unknown message types are listed under '*other*'.<br>       ...<br>    }<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networkactive\": true|false,           (bool) whether p2p networking is enabled<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in BTC/kB<br>  \"incrementalfee\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network and blockchain warnings<br>}<br><br>Examples:<br> bitcoin-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "logging": "logging ( [\"include_category\",...] [\"exclude_category\",...] )<br>Gets and sets the logging configuration.<br>When called without an argument, returns the list of categories with status that are currently being debug logged or not.<br>When called with arguments, adds or removes categories from debug logging and return the lists above.<br>The arguments are evaluated in order \"include\", \"exclude\".<br>If an item is both included and excluded, it will thus end up being excluded.<br>The valid logging categories are: net, tor, mempool, http, bench, zmq, db, rpc, estimatefee, addrman, selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej, libevent, coindb, qt, leveldb<br>In addition, the following are available as category names with special meanings:<br>  - \"all\",  \"1\" : represent all logging categories.<br>  - \"none\", \"0\" : even if other logging categories are specified, ignore all of them.<br><br>Arguments:<br>1. include                    (json array, optional) A json array of categories to add debug logging<br>     [<br>       \"include_category\",    (string) the valid logging category<br>       ...<br>     ]<br>2. exclude                    (json array, optional) A json array of categories to remove debug logging<br>     [<br>       \"exclude_category\",    (string) the valid logging category<br>       ...<br>     ]<br><br>Result:<br>{                   (json object where keys are the logging categories, and values indicates its status<br>  \"category\": true|false,  (bool) if being debug logged or not. false:inactive, true:active<br>  ...<br>}<br><br>Examples:<br> bitcoin-cli logging \"[\"all\"]\" \"[\"http\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"logging\", \"params\": [[\"all\"], [\"libevent\"]] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"command\"<br><br>Attempts to add or remove a node from the addnode list.<br>Or try a connection to a node once.<br>Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be<br>full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).<br><br>Arguments:<br>1. node       (string, required) The node (see getpeerinfo for nodes)<br>2. command    (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletpassphrase": "walletpassphrase \"passphrase\" timeout<br><br>Stores the wallet decryption key in memory for 'timeout' seconds.<br>This is needed prior to performing transactions related to private keys such as sending bitcoins<br><br>Note:<br>Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock<br>time that overrides the old one.<br><br>Arguments:<br>1. passphrase    (string, required) The wallet passphrase<br>2. timeout       (numeric, required) The time to keep the decryption key in seconds; capped at 100000000 (~3 years).<br><br>Examples:<br><br>Unlock the wallet for 60 seconds<br> bitcoin-cli walletpassphrase \"my pass phrase\" 60<br><br>Lock the wallet again (before 60 seconds)<br> bitcoin-cli walletlock <br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrase\", \"params\": [\"my pass phrase\", 60] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock ( [{\"txid\":\"hex\",\"vout\":n},...] )<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.<br>A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock                  (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. transactions            (json array, optional, default=empty array) A json array of objects. Each object the txid (string) vout (numeric).<br>     [<br>       {                   (json object)<br>         \"txid\": \"hex\",    (string, required) The transaction id<br>         \"vout\": n,        (numeric, required) The output number<br>       },<br>       ...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf [\"address\",...] include_unsafe query_options )<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br><br>Arguments:<br>1. minconf                            (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf                            (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. addresses                          (json array, optional, default=empty array) A json array of bitcoin addresses to filter<br>     [<br>       \"address\",                     (string) bitcoin address<br>       ...<br>     ]<br>4. include_unsafe                     (boolean, optional, default=true) Include outputs that are not safe to spend<br>                                      See description of \"safe\" attribute below.<br>5. query_options                      (json object, optional) JSON with query options<br>     {<br>       \"minimumAmount\": amount,       (numeric or string, optional, default=0) Minimum value of each UTXO in BTC<br>       \"maximumAmount\": amount,       (numeric or string, optional, default=unlimited) Maximum value of each UTXO in BTC<br>       \"maximumCount\": n,             (numeric, optional, default=unlimited) Maximum number of UTXOs<br>       \"minimumSumAmount\": amount,    (numeric or string, optional, default=unlimited) Minimum sum value of all UTXOs in BTC<br>     }<br><br>Result:<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",    (string) the bitcoin address<br>    \"label\" : \"label\",        (string) The associated label, or \" for the default label<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction output amount in BTC<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : \"script\" (string) The redeemScript if scriptPubKey is P2SH<br>    \"witnessScript\" : \"script\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH<br>    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output<br>    \"solvable\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys<br>    \"desc\" : xxx,             (string, only when solvable) A descriptor for spending this output<br>    \"safe\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions<br>                              from outside keys and unconfirmed replacement transactions are considered unsafe<br>                              and are not eligible for spending by fundrawtransaction and sendtoaddress.<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listunspent <br> bitcoin-cli listunspent 6 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> bitcoin-cli listunspent 6 9999999 '[]' true '{ \"minimumAmount\": 0.005 }'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999, [] , true, { \"minimumAmount\": 0.005 } ] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> bitcoin-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"hex\",\"vout\":n,\"sequence\":n},...] [{\"address\":amount},{\"data\":\"hex\"},...] ( locktime replaceable )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. inputs                      (json array, required) A json array of json objects<br>     [<br>       {                       (json object)<br>         \"txid\": \"hex\",        (string, required) The transaction id<br>         \"vout\": n,            (numeric, required) The output number<br>         \"sequence\": n,        (numeric, optional, default=depends on the value of the 'replaceable' and 'locktime' arguments) The sequence number<br>       },<br>       ...<br>     ]<br>2. outputs                     (json array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.<br>                               That is, each address can only appear once and there can only be one 'data' object.<br>                               For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also<br>                               accepted as second parameter.<br>     [<br>       {                       (json object)<br>         \"address\": amount,    (numeric or string, required) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC<br>       },<br>       {                       (json object)<br>         \"data\": \"hex\",        (string, required) A key-value pair. The key must be \"data\", the value is hex-encoded data<br>       },<br>       ...<br>     ]<br>3. locktime                    (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br>4. replaceable                 (boolean, optional, default=false) Marks this transaction as BIP125-replaceable.<br>                               Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.<br><br>Result:<br>\"transaction\"              (string) hex string of the transaction<br><br>Examples:<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"address\":0.01}]\"<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"data\":\"00010203\"}]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"[{\"address\":0.01}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"[{\"data\":\"00010203\"}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createwallet": "createwallet \"wallet_name\" ( disable_private_keys blank )<br><br>Creates and loads a new wallet.<br><br>Arguments:<br>1. wallet_name             (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.<br>2. disable_private_keys    (boolean, optional, default=false) Disable the possibility of private keys (only watchonlys are possible in this mode).<br>3. blank                   (boolean, optional, default=false) Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.<br><br>Result:<br>{<br>  \"name\" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.<br>  \"warning\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.<br>}<br><br>Examples:<br> bitcoin-cli createwallet \"testwallet\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createwallet\", \"params\": [\"testwallet\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setban": "setban \"subnet\" \"command\" ( bantime absolute )<br><br>Attempts to add or remove an IP/Subnet from the banned list.<br><br>Arguments:<br>1. subnet      (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)<br>2. command     (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list<br>3. bantime     (numeric, optional, default=0) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. absolute    (boolean, optional, default=false) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400<br> bitcoin-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdescriptorinfo": "getdescriptorinfo \"descriptor\"<br><br>Analyses a descriptor.<br><br>Arguments:<br>1. descriptor    (string, required) The descriptor.<br><br>Result:<br>{<br>  \"descriptor\" : \"desc\",         (string) The descriptor in canonical form, without private keys<br>  \"isrange\" : true|false,        (boolean) Whether the descriptor is ranged<br>  \"issolvable\" : true|false,     (boolean) Whether the descriptor is solvable<br>  \"hasprivatekeys\" : true|false, (boolean) Whether the input descriptor contained at least one private key<br>}<br><br>Examples:<br>Analyse a descriptor<br> bitcoin-cli getdescriptorinfo \"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)",
            "listlabels": "listlabels ( \"purpose\" )<br><br>Returns the list of all labels, or labels that are assigned to addresses with a specific purpose.<br><br>Arguments:<br>1. purpose    (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.<br><br>Result:<br>[               (json array of string)<br>  \"label\",      (string) Label name<br>  ...<br>]<br><br>Examples:<br><br>List all labels<br> bitcoin-cli listlabels <br><br>List labels that have receiving addresses<br> bitcoin-cli listlabels receive<br><br>List labels that have sending addresses<br> bitcoin-cli listlabels send<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlabels\", \"params\": [receive] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf include_empty include_watchonly \"address_filter\" )<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf              (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty        (boolean, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. include_watchonly    (boolean, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br>4. address_filter       (string, optional) If present, only return information on this address.<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"amount\" : x.xxx,                  (numeric) The total amount in BTC received by the address<br>    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\",               (string) The label of the receiving address. The default label is \".<br>    \"txids\": [<br>       \"txid\",                         (string) The ids of transactions received with the address <br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaddress <br> bitcoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true, \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum fee rate in BTC/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee<br>  \"minrelaytxfee\": xxxxx       (numeric) Current minimum relay fee for transactions<br>}<br><br>Examples:<br> bitcoin-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressinfo": "getaddressinfo \"address\"<br><br>Return information about the given bitcoin address. Some information requires the address<br>to be in the wallet.<br><br>Arguments:<br>1. address    (string, required) The bitcoin address to get the information of.<br><br>Result:<br>{<br>  \"address\" : \"address\",        (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex-encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"solvable\" : true|false,      (boolean) Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys<br>  \"desc\" : \"desc\",            (string, optional) A descriptor for spending coins sent to this address (only when solvable)<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"ischange\" : true|false,      (boolean) If the address was used for change output<br>  \"iswitness\" : true|false,     (boolean) If the address is a witness address<br>  \"witness_version\" : version   (numeric, optional) The version number of the witness program<br>  \"witness_program\" : \"hex\"     (string, optional) The hex value of the witness program<br>  \"script\" : \"type\"             (string, optional) The output script type. Only if \"isscript\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown<br>  \"hex\" : \"hex\",                (string, optional) The redeemscript for the p2sh address<br>  \"pubkeys\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \"script\" is \"multisig\")<br>    [<br>      \"pubkey\"<br>      ,...<br>    ]<br>  \"sigsrequired\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \"script\" is \"multisig\")<br>  \"pubkey\" : \"publickeyhex\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)<br>  \"embedded\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\"timestamp\", \"hdkeypath\", \"hdseedid\") and relation to the wallet (\"ismine\", \"iswatchonly\").<br>  \"iscompressed\" : true|false,  (boolean, optional) If the pubkey is compressed<br>  \"label\" :  \"label\"         (string) The label associated with the address, \" is the default label<br>  \"timestamp\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)<br>  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available<br>  \"hdseedid\" : \"<hash160>\"      (string, optional) The Hash160 of the HD seed<br>  \"hdmasterfingerprint\" : \"<hash160>\" (string, optional) The fingperint of the master key.<br>  \"labels\"                      (object) Array of labels associated with the address.<br>    [<br>      { (json object of label data)<br>        \"name\": \"labelname\" (string) The label<br>        \"purpose\": \"string\" (string) Purpose of address (\"send\" for sending address, \"receive\" for receiving address)<br>      },...<br>    ]<br>}<br><br>Examples:<br> bitcoin-cli getaddressinfo \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressinfo\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest blockchain.<br><br>Result:<br>\"hex\"      (string) the block hash, hex-encoded<br><br>Examples:<br> bitcoin-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "converttopsbt": "converttopsbt \"hexstring\" ( permitsigdata iswitness )<br><br>Converts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction<br>createpsbt and walletcreatefundedpsbt should be used for new applications.<br><br>Arguments:<br>1. hexstring        (string, required) The hex string of a raw transaction<br>2. permitsigdata    (boolean, optional, default=false) If true, any signatures in the input will be discarded and conversion.<br>                    will continue. If false, RPC will fail if any signatures are present.<br>3. iswitness        (boolean, optional, default=depends on heuristic tests) Whether the transaction hex is a serialized witness transaction.<br>                    If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion<br>                    will be tried. If false, only non-witness deserialization will be tried. Only has an effect if<br>                    permitsigdata is true.<br><br>Result:<br>  \"psbt\"        (string)  The resulting raw transaction (base64-encoded string)<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"data\":\"00010203\"}]\"<br><br>Convert the transaction to a PSBT<br> bitcoin-cli converttopsbt \"rawtransaction",
            "signrawtransaction": "error code: -32<br>error message:<br>signrawtransaction was removed in v0.18.<br>Clients should transition to using signrawtransactionwithkey and signrawtransactionwithwallet",
            "walletlock": "walletlock<br><br>Removes the wallet encryption key from memory, locking the wallet.<br>After calling this method, you will need to call walletpassphrase again<br>before being able to call any methods which require the wallet to be unlocked.<br><br>Examples:<br><br>Set the passphrase for 2 minutes to perform a transaction<br> bitcoin-cli walletpassphrase \"my pass phrase\" 120<br><br>Perform a send (requires passphrase set)<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 1.0<br><br>Clear the passphrase since we are done before 2 minutes is up<br> bitcoin-cli walletlock <br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletlock\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> bitcoin-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"label\" \"address_type\" )<br><br>Returns a new Bitcoin address for receiving payments.<br>If 'label' is specified, it is added to the address book <br>so payments received with the address will be associated with 'label'.<br><br>Arguments:<br>1. label           (string, optional, default=\") The label name for the address to be linked to. It can also be set to the empty string \" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.<br>2. address_type    (string, optional, default=set by -addresstype) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\".<br><br>Result:<br>\"address\"    (string) The new bitcoin address<br><br>Examples:<br> bitcoin-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Hint: use getmempoolentry to fetch a specific transaction from the mempool.<br><br>Arguments:<br>1. verbose    (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC (DEPRECATED)<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)<br>    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data<br>    \"fees\" : {<br>        \"base\" : n,         (numeric) transaction fee in BTC<br>        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC<br>        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC<br>        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC<br>    }<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>    \"bip125-replaceable\" : true|false,  (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransactionwithwallet": "signrawtransactionwithwallet \"hexstring\" ( [{\"txid\":\"hex\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\",\"witnessScript\":\"hex\",\"amount\":amount},...] \"sighashtype\" )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br><br>Arguments:<br>1. hexstring                        (string, required) The transaction hex string<br>2. prevtxs                          (json array, optional) A json array of previous dependent transaction outputs<br>     [<br>       {                            (json object)<br>         \"txid\": \"hex\",             (string, required) The transaction id<br>         \"vout\": n,                 (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",     (string, required) script key<br>         \"redeemScript\": \"hex\",     (string) (required for P2SH) redeem script<br>         \"witnessScript\": \"hex\",    (string) (required for P2WSH or P2SH-P2WSH) witness script<br>         \"amount\": amount,          (numeric or string, required) The amount spent<br>       },<br>       ...<br>     ]<br>3. sighashtype                      (string, optional, default=ALL) The signature hash type. Must be one of<br>                                    \"ALL\"<br>                                    \"NONE\"<br>                                    \"SINGLE\"<br>                                    \"ALL|ANYONECANPAY\"<br>                                    \"NONE|ANYONECANPAY\"<br>                                    \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",                  (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,          (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                      (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",              (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                   (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",          (string) The hex-encoded signature script<br>      \"sequence\" : n,               (numeric) Script sequence number<br>      \"error\" : \"text\"              (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransactionwithwallet \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransactionwithwallet\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding blockchain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",              (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,             (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,            (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\",       (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,         (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,         (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"initialblockdownload\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.<br>  \"chainwork\": \"xxxx\"           (string) total amount of work in active chain, in hexadecimal<br>  \"size_on_disk\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk<br>  \"pruned\": xx,                 (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)<br>  \"automatic_pruning\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)<br>  \"prune_target_size\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)<br>  \"softforks\": [                (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",           (string) name of softfork<br>        \"version\": xx,          (numeric) block version<br>        \"reject\": {             (object) progress toward rejecting pre-softfork blocks<br>           \"status\": xx,        (boolean) true if threshold reached<br>        },<br>     }, ...<br>  ],<br>  \"bip9_softforks\": {           (object) status of BIP9 softforks in progress<br>     \"xxxx\" : {                 (string) name of the softfork<br>        \"status\": \"xxxx\",       (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"<br>        \"bit\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)<br>        \"startTime\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning<br>        \"timeout\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in<br>        \"since\": xx,            (numeric) height of the first block to which the status applies<br>        \"statistics\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \"started\" status)<br>           \"period\": xx,        (numeric) the length in blocks of the BIP9 signalling period <br>           \"threshold\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature <br>           \"elapsed\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period <br>           \"count\": xx,         (numeric) the number of blocks with the version bit set in the current period <br>           \"possible\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold <br>        }<br>     }<br>  }<br>  \"warnings\" : \"...\",           (string) any network and blockchain warnings.<br>}<br><br>Examples:<br> bitcoin-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprivkey": "importprivkey \"privkey\" ( \"label\" rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.<br>Hint: use importmulti to import more than one private key.<br><br>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls<br>may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br><br>Arguments:<br>1. privkey    (string, required) The private key (see dumpprivkey)<br>2. label      (string, optional, default=current label if address exists, otherwise \") An optional label<br>3. rescan     (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Examples:<br><br>Dump a private key<br> bitcoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> bitcoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"testing\" false<br><br>Import using default blank label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "validateaddress": "validateaddress \"address\"<br><br>Return information about the given bitcoin address.<br><br>Arguments:<br>1. address    (string, required) The bitcoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"address\",        (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex-encoded scriptPubKey generated by the address<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"iswitness\" : true|false,     (boolean) If the address is a witness address<br>  \"witness_version\" : version   (numeric, optional) The version number of the witness program<br>  \"witness_program\" : \"hex\"     (string, optional) The hex value of the witness program<br>}<br><br>Examples:<br> bitcoin-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "pruneblockchain": "pruneblockchain height<br><br>Arguments:<br>1. height    (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp<br>             to prune blocks whose block time is at least 2 hours older than the provided timestamp.<br><br>Result:<br>n    (numeric) Height of the last block pruned.<br><br>Examples:<br> bitcoin-cli pruneblockchain 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listwalletdir": "listwalletdir<br>Returns a list of wallets in the wallet directory.<br><br>Result:<br>{<br>  \"wallets\" : [                (json array of objects)<br>    {<br>      \"name\" : \"name\"          (string) The wallet name<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli listwalletdir <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listwalletdir\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> bitcoin-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "deriveaddresses": "deriveaddresses \"descriptor\" ( range )<br><br>Derives one or more addresses corresponding to an output descriptor.<br>Examples of output descriptors are:<br>    pkh(<pubkey>)                        P2PKH outputs for the given pubkey<br>    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey<br>    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys<br>    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts<br><br>In the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one<br>or more path elements separated by \"/\", where \"h\" represents a hardened child key.<br>For more information on output descriptors, see the documentation in the doc/descriptors.md file.<br><br>Arguments:<br>1. descriptor    (string, required) The descriptor.<br>2. range         (numeric or array, optional) If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.<br><br>Result:<br>[ address ] (array) the derived addresses<br><br>Examples:<br>First three native segwit receive addresses<br> bitcoin-cli deriveaddresses \"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\" \"[0,2]",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br><br>Arguments:<br>1. passphrase    (string, required) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt your wallet<br> bitcoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending bitcoin<br> bitcoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can do something like sign<br> bitcoin-cli signmessage \"address\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> bitcoin-cli walletlock <br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash height<br><br>Returns hash of block in best-block-chain at height provided.<br><br>Arguments:<br>1. height    (numeric, required) The height index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> bitcoin-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.<br><br>Arguments:<br>1. filename    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> bitcoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> bitcoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.<br>Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.<br>Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by<br>only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).<br><br>Arguments:<br>1. filename    (string, required) The filename with path (either absolute or relative to bitcoind)<br><br>Result:<br>{                           (json object)<br>  \"filename\" : {        (string) The filename with full absolute path<br>}<br><br>Examples:<br> bitcoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "rescanblockchain": "rescanblockchain ( start_height stop_height )<br><br>Rescan the local blockchain for wallet related transactions.<br><br>Arguments:<br>1. start_height    (numeric, optional, default=0) block height where the rescan should start<br>2. stop_height     (numeric, optional) the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.<br><br>Result:<br>{<br>  \"start_height\"     (numeric) The block height where the rescan started (the requested height or 0)<br>  \"stop_height\"      (numeric) The height of the last rescanned block. May be null in rare cases if there was a reorg and the call didn't scan any blocks because they were already scanned in the background.<br>}<br><br>Examples:<br> bitcoin-cli rescanblockchain 100000 120000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"rescanblockchain\", \"params\": [100000, 120000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "analyzepsbt": "analyzepsbt \"psbt\"<br><br>Analyzes and provides information about the current status of a PSBT and its inputs<br><br>Arguments:<br>1. psbt    (string, required) A base64 string of a PSBT<br><br>Result:<br>{<br>  \"inputs\" : [                      (array of json objects)<br>    {<br>      \"has_utxo\" : true|false     (boolean) Whether a UTXO is provided<br>      \"is_final\" : true|false     (boolean) Whether the input is finalized<br>      \"missing\" : {               (json object, optional) Things that are missing that are required to complete this input<br>        \"pubkeys\" : [             (array, optional)<br>          \"keyid\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing<br>        ]<br>        \"signatures\" : [          (array, optional)<br>          \"keyid\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing<br>        ]<br>        \"redeemscript\" : \"hash\"   (string, optional) Hash160 of the redeemScript that is missing<br>        \"witnessscript\" : \"hash\"  (string, optional) SHA256 of the witnessScript that is missing<br>      }<br>      \"next\" : \"role\"             (string, optional) Role of the next person that this input needs to go to<br>    }<br>    ,...<br>  ]<br>  \"estimated_vsize\" : vsize       (numeric, optional) Estimated vsize of the final signed transaction<br>  \"estimated_feerate\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction in BTC/kB. Shown only if all UTXO slots in the PSBT have been filled.<br>  \"fee\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.<br>  \"next\" : \"role\"                 (string) Role of the next person that this psbt needs to go to<br>}<br><br>Examples:<br> bitcoin-cli analyzepsbt \"psbt",
            "submitheader": "submitheader \"hexdata\"<br><br>Decode the given hexdata as a header and submit it as a candidate chain tip if valid.<br>Throws when the header is invalid.<br><br>Arguments:<br>1. hexdata    (string, required) the hex-encoded block header data<br><br>Result:<br>None<br>Examples:<br> bitcoin-cli submitheader \"aabbcc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitheader\", \"params\": [\"aabbcc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "walletprocesspsbt": "walletprocesspsbt \"psbt\" ( sign \"sighashtype\" bip32derivs )<br><br>Update a PSBT with input information from our wallet and then sign inputs<br>that we can sign for.<br><br>Arguments:<br>1. psbt           (string, required) The transaction base64 string<br>2. sign           (boolean, optional, default=true) Also sign the transaction when updating<br>3. sighashtype    (string, optional, default=ALL) The signature hash type to sign with if not specified by the PSBT. Must be one of<br>                  \"ALL\"<br>                  \"NONE\"<br>                  \"SINGLE\"<br>                  \"ALL|ANYONECANPAY\"<br>                  \"NONE|ANYONECANPAY\"<br>                  \"SINGLE|ANYONECANPAY\"<br>4. bip32derivs    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them<br><br>Result:<br>{<br>  \"psbt\" : \"value\",          (string) The base64-encoded partially signed transaction<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli walletprocesspsbt \"psbt",
            "estimatesmartfee": "estimatesmartfee conf_target ( \"estimate_mode\" )<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within conf_target blocks if possible and return the number of blocks<br>for which the estimate is valid. Uses virtual transaction size as defined<br>in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. conf_target      (numeric, required) Confirmation target in blocks (1 - 1008)<br>2. estimate_mode    (string, optional, default=CONSERVATIVE) The fee estimate mode.<br>                    Whether to return a more conservative estimate which also satisfies<br>                    a longer history. A conservative estimate potentially returns a<br>                    higher feerate and is more likely to be sufficient for the desired<br>                    target, but is not as responsive to short term drops in the<br>                    prevailing fee market.  Must be one of:<br>                    \"UNSET\"<br>                    \"ECONOMICAL\"<br>                    \"CONSERVATIVE\"<br><br>Result:<br>{<br>  \"feerate\" : x.x,     (numeric, optional) estimate fee rate in BTC/kB<br>  \"errors\": [ str... ] (json array of strings, optional) Errors encountered during processing<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>The request target will be clamped between 2 and the highest target<br>fee estimation is able to return based on how long it has been running.<br>An error is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br><br>Examples:<br> bitcoin-cli estimatesmartfee 6",
            "disconnectnode": "disconnectnode ( \"address\" nodeid )<br><br>Immediately disconnects from the specified peer node.<br><br>Strictly one out of 'address' and 'nodeid' can be provided to identify the node.<br><br>To disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.<br><br>Arguments:<br>1. address    (string, optional, default=fallback to nodeid) The IP address/port of the node<br>2. nodeid     (numeric, optional, default=fallback to address) The node ID (see getpeerinfo for node IDs)<br><br>Examples:<br> bitcoin-cli disconnectnode \"192.168.0.6:8333\"<br> bitcoin-cli disconnectnode \" 1<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\" ( iswitness )<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. hexstring    (string, required) The transaction hex string<br>2. iswitness    (boolean, optional, default=depends on heuristic tests) Whether the transaction hex is a serialized witness transaction<br>                If iswitness is not present, heuristic tests will be used in decoding<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"weight\" : n,           (numeric) The transaction's weight (between vsize*4 - 3 and vsize*4)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> bitcoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockheader": "getblockheader \"blockhash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. blockhash    (string, required) The block hash<br>2. verbose      (boolean, optional, default=true) true for a json object, false for the hex-encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>  \"nTx\" : n,             (numeric) The number of transactions in the block.<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendmany": "sendmany \" {\"address\":amount} ( minconf \"comment\" [\"address\",...] replaceable conf_target \"estimate_mode\" )<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br><br>Arguments:<br>1. dummy                     (string, required) Must be set to \" for backwards compatibility.<br>2. amounts                   (json object, required) A json object with addresses and amounts<br>     {<br>       \"address\": amount,    (numeric or string, required) The bitcoin address is the key, the numeric amount (can be string) in BTC is the value<br>     }<br>3. minconf                   (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. comment                   (string, optional) A comment<br>5. subtractfeefrom           (json array, optional) A json array with addresses.<br>                             The fee will be equally deducted from the amount of each selected address.<br>                             Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                             If no addresses are specified here, the sender pays the fee.<br>     [<br>       \"address\",            (string) Subtract fee from this address<br>       ...<br>     ]<br>6. replaceable               (boolean, optional, default=fallback to wallet's default) Allow this transaction to be replaced by a transaction with higher fees via BIP 125<br>7. conf_target               (numeric, optional, default=fallback to wallet's default) Confirmation target (in blocks)<br>8. estimate_mode             (string, optional, default=UNSET) The fee estimate mode, must be one of:<br>                             \"UNSET\"<br>                             \"ECONOMICAL\"<br>                             \"CONSERVATIVE\"<br><br>Result:<br>\"txid\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> bitcoin-cli sendmany \" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \" \"[\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\", {\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}, 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments:<br>1. newsize    (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> bitcoin-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransactionwithkey": "signrawtransactionwithkey \"hexstring\" [\"privatekey\",...] ( [{\"txid\":\"hex\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\",\"witnessScript\":\"hex\",\"amount\":amount},...] \"sighashtype\" )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second argument is an array of base58-encoded private<br>keys that will be the only keys used to sign the transaction.<br>The third optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br><br>Arguments:<br>1. hexstring                        (string, required) The transaction hex string<br>2. privkeys                         (json array, required) A json array of base58-encoded private keys for signing<br>     [<br>       \"privatekey\",                (string) private key in base58-encoding<br>       ...<br>     ]<br>3. prevtxs                          (json array, optional) A json array of previous dependent transaction outputs<br>     [<br>       {                            (json object)<br>         \"txid\": \"hex\",             (string, required) The transaction id<br>         \"vout\": n,                 (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",     (string, required) script key<br>         \"redeemScript\": \"hex\",     (string) (required for P2SH) redeem script<br>         \"witnessScript\": \"hex\",    (string) (required for P2WSH or P2SH-P2WSH) witness script<br>         \"amount\": amount,          (numeric or string, required) The amount spent<br>       },<br>       ...<br>     ]<br>4. sighashtype                      (string, optional, default=ALL) The signature hash type. Must be one of:<br>                                    \"ALL\"<br>                                    \"NONE\"<br>                                    \"SINGLE\"<br>                                    \"ALL|ANYONECANPAY\"<br>                                    \"NONE|ANYONECANPAY\"<br>                                    \"SINGLE|ANYONECANPAY\"<br>                                    <br><br>Result:<br>{<br>  \"hex\" : \"value\",                  (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,          (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                      (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",              (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                   (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",          (string) The hex-encoded signature script<br>      \"sequence\" : n,               (numeric) Script sequence number<br>      \"error\" : \"text\"              (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransactionwithkey \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransactionwithkey\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress ( \"address_type\" )<br><br>Returns a new Bitcoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Arguments:<br>1. address_type    (string, optional, default=set by -changetype) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\".<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> bitcoin-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel nblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel    (numeric, optional, default=3, range=0-4) How thorough the block verification is.<br>2. nblocks       (numeric, optional, default=6, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> bitcoin-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"address\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. address    (string, required) The bitcoin address to use for the private key.<br>2. message    (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"address\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. address      (string, required) The bitcoin address to use for the signature.<br>2. signature    (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. message      (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abortrescan": "abortrescan<br><br>Stops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.<br><br>Examples:<br><br>Import a private key<br> bitcoin-cli importprivkey \"mykey\"<br><br>Abort the running wallet rescan<br> bitcoin-cli abortrescan <br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abortrescan\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "testmempoolaccept": "testmempoolaccept [\"rawtx\",...] ( allowhighfees )<br><br>Returns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.<br><br>This checks if the transaction violates the consensus or policy rules.<br><br>See sendrawtransaction call.<br><br>Arguments:<br>1. rawtxs           (json array, required) An array of hex strings of raw transactions.<br>                    Length must be one for now.<br>     [<br>       \"rawtx\",     (string)<br>       ...<br>     ]<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.<br>                            Length is exactly one for now.<br> {<br>  \"txid\"           (string) The transaction hash in hex<br>  \"allowed\"        (boolean) If the mempool allows this tx to be inserted<br>  \"reject-reason\"  (string) Rejection string (only present when 'allowed' is false)<br> }<br>]<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransactionwithwallet \"myhex\"<br><br>Test acceptance of the transaction (signed hex)<br> bitcoin-cli testmempoolaccept [\"signedhex\"]<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"testmempoolaccept\", \"params\": [[\"signedhex\"]] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpprivkey": "dumpprivkey \"address\"<br><br>Reveals the private key corresponding to 'address'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. address    (string, required) The bitcoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> bitcoin-cli dumpprivkey \"myaddress\"<br> bitcoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransactionwithkey calls.<br><br>Arguments:<br>1. hexstring        (string, required) The hex string of the raw transaction<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransactionwithwallet \"myhex\"<br><br>Send the transaction (signed hex)<br> bitcoin-cli sendrawtransaction \"signedhex\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions ( \"label\" count skip include_watchonly )<br><br>If a label name is provided, this will return only incoming transactions paying to addresses with the specified label.<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions.<br><br>Arguments:<br>1. label                (string, optional) If set, should be a valid label name to return only incoming transactions<br>                        with the specified label, or \"*\" to disable filtering and return all transactions.<br>2. count                (numeric, optional, default=10) The number of transactions to return<br>3. skip                 (numeric, optional, default=0) The number of transactions to skip<br>4. include_watchonly    (boolean, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction.<br>    \"category\":               (string) The transaction category.<br>                \"send\"                  Transactions sent.<br>                \"receive\"               Non-coinbase transactions received.<br>                \"generate\"              Coinbase transactions received with more than 100 confirmations.<br>                \"immature\"              Coinbase transactions received with 100 or fewer confirmations.<br>                \"orphan\"                Orphaned coinbase transactions received.<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and is positive<br>                                        for all other categories<br>    \"label\": \"label\",       (string) A comment for the address/transaction, if any<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Negative confirmations indicate the<br>                                         transaction conflicts with the block chain<br>    \"trusted\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\", (string) The transaction id.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                     may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                         'send' category of transactions.<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> bitcoin-cli listtransactions <br><br>List transactions 100 to 120<br> bitcoin-cli listtransactions \"*\" 20 100<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. proof    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> bitcoin-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblockweight\": nnn, (numeric, optional) The block weight of the last assembled block (only present if a block was ever assembled)<br>  \"currentblocktx\": nnn,     (numeric, optional) The number of block transactions of the last assembled block (only present if a block was ever assembled)<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"networkhashps\": nnn,      (numeric) The network hashes per second<br>  \"pooledtx\": n              (numeric) The size of the mempool<br>  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"warnings\": \"...\"          (string) any network and blockchain warnings<br>}<br><br>Examples:<br> bitcoin-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createpsbt": "createpsbt [{\"txid\":\"hex\",\"vout\":n,\"sequence\":n},...] [{\"address\":amount},{\"data\":\"hex\"},...] ( locktime replaceable )<br><br>Creates a transaction in the Partially Signed Transaction format.<br>Implements the Creator role.<br><br>Arguments:<br>1. inputs                      (json array, required) A json array of json objects<br>     [<br>       {                       (json object)<br>         \"txid\": \"hex\",        (string, required) The transaction id<br>         \"vout\": n,            (numeric, required) The output number<br>         \"sequence\": n,        (numeric, optional, default=depends on the value of the 'replaceable' and 'locktime' arguments) The sequence number<br>       },<br>       ...<br>     ]<br>2. outputs                     (json array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.<br>                               That is, each address can only appear once and there can only be one 'data' object.<br>                               For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also<br>                               accepted as second parameter.<br>     [<br>       {                       (json object)<br>         \"address\": amount,    (numeric or string, required) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC<br>       },<br>       {                       (json object)<br>         \"data\": \"hex\",        (string, required) A key-value pair. The key must be \"data\", the value is hex-encoded data<br>       },<br>       ...<br>     ]<br>3. locktime                    (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br>4. replaceable                 (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.<br>                               Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.<br><br>Result:<br>  \"psbt\"        (string)  The resulting raw transaction (base64-encoded string)<br><br>Examples:<br> bitcoin-cli createpsbt \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"data\":\"00010203\"}]",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies current wallet file to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. destination    (string, required) The destination directory or file<br><br>Examples:<br> bitcoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getzmqnotifications": "getzmqnotifications<br><br>Returns information about the active ZeroMQ notifications.<br><br>Result:<br>[<br>  {                        (json object)<br>    \"type\": \"pubhashtx\",   (string) Type of notification<br>    \"address\": \"...\",      (string) Address of the publisher<br>    \"hwm\": n                 (numeric) Outbound message high water mark<br>  },<br>  ...<br>]<br><br>Examples:<br> bitcoin-cli getzmqnotifications <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getzmqnotifications\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessagewithprivkey": "signmessagewithprivkey \"privkey\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. privkey    (string, required) The private key to sign the message with.<br>2. message    (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Create the signature<br> bitcoin-cli signmessagewithprivkey \"privkey\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest blockchain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> bitcoin-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbylabel": "getreceivedbylabel \"label\" ( minconf )<br><br>Returns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. label      (string, required) The selected label, may be the default label using \".<br>2. minconf    (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this label.<br><br>Examples:<br><br>Amount received by the default label with at least 1 confirmation<br> bitcoin-cli getreceivedbylabel \"<br><br>Amount received at the tabby label including unconfirmed amounts with zero confirmations<br> bitcoin-cli getreceivedbylabel \"tabby\" 0<br><br>The amount with at least 6 confirmations<br> bitcoin-cli getreceivedbylabel \"tabby\" 6<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbylabel\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...] ( \"address_type\" )<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired       (numeric, required) The number of required signatures out of the n keys.<br>2. keys            (json array, required) A json array of hex-encoded public keys.<br>     [<br>       \"key\",      (string) The hex-encoded public key<br>       ...<br>     ]<br>3. address_type    (string, optional, default=legacy) The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\".<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 public keys<br> bitcoin-cli createmultisig 2 \"[\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\" ( \"dummy\" )<br><br>Attempts to submit new block to network.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments:<br>1. hexdata    (string, required) the hex-encoded block data to submit<br>2. dummy      (string, optional, default=ignored) dummy value, for compatibility with BIP22. This value is ignored.<br><br>Examples:<br> bitcoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"address\",            (string) The bitcoin address<br>      amount,                 (numeric) The amount in BTC<br>      \"label\"               (string, optional) The label<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose \"blockhash\" )<br><br>Return the raw transaction data.<br><br>By default this function only works for mempool transactions. When called with a blockhash<br>argument, getrawtransaction will return the transaction if the specified block is available and<br>the transaction is found in that block. When called without a blockhash argument, getrawtransaction<br>will return the transaction if it is in the mempool, or if -txindex is enabled and the transaction<br>is in a block in the blockchain.<br><br>Hint: Use gettransaction for wallet transactions.<br><br>If verbose is 'true', returns an Object with information about 'txid'.<br>If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.<br><br>Arguments:<br>1. txid         (string, required) The transaction id<br>2. verbose      (boolean, optional, default=false) If false, return a string, otherwise return a json object<br>3. blockhash    (string, optional) The block in which to look for the transaction<br><br>Result (if verbose is not set or set to false):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose is set to true):<br>{<br>  \"in_active_chain\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \"blockhash\" argument)<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The serialized transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"weight\" : n,           (numeric) The transaction's weight (between vsize*4-3 and vsize*4)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"address\"        (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"time\" : ttt,             (numeric) Same as \"blocktime\"<br>}<br><br>Examples:<br> bitcoin-cli getrawtransaction \"mytxid\"<br> bitcoin-cli getrawtransaction \"mytxid\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> bitcoin-cli getrawtransaction \"mytxid\" false \"myblockhash\"<br> bitcoin-cli getrawtransaction \"mytxid\" true \"myblockhash",
            "uptime": "uptime<br><br>Returns the total uptime of the server.<br><br>Result:<br>ttt        (numeric) The number of seconds that the server has been running<br><br>Examples:<br> bitcoin-cli uptime <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"uptime\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hexstring\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. hexstring    (string, required) the hex-encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex-encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) bitcoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).<br>}<br><br>Examples:<br> bitcoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setnetworkactive": "setnetworkactive state<br><br>Disable/enable all p2p network activity.<br><br>Arguments:<br>1. state    (boolean, required) true to enable networking, false to disable",
            "listsinceblock": "listsinceblock ( \"blockhash\" target_confirmations include_watchonly include_removed )<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted.<br>If \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included.<br>Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.<br><br>Arguments:<br>1. blockhash               (string, optional) If set, the block hash to list transactions since, otherwise list all transactions.<br>2. target_confirmations    (numeric, optional, default=1) Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value<br>3. include_watchonly       (boolean, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br>4. include_removed         (boolean, optional, default=true) Show transactions that were removed due to a reorg in the \"removed\" array<br>                           (not guaranteed to work on pruned nodes)<br><br>Result:<br>{<br>  \"transactions\": [<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction.<br>    \"category\":               (string) The transaction category.<br>                \"send\"                  Transactions sent.<br>                \"receive\"               Non-coinbase transactions received.<br>                \"generate\"              Coinbase transactions received with more than 100 confirmations.<br>                \"immature\"              Coinbase transactions received with 100 or fewer confirmations.<br>                \"orphan\"                Orphaned coinbase transactions received.<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and is positive<br>                                         for all other categories<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction.<br>                                          When it's < 0, it means the transaction conflicted that many blocks ago.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT).<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx,         (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"       (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"removed\": [<br>    <structure is the same as \"transactions\" above, only present if include_removed=true><br>    Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones<br>}<br><br>Examples:<br> bitcoin-cli listsinceblock <br> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls<br>may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br><br>Arguments:<br>1. pubkey    (string, required) The hex-encoded public key<br>2. label     (string, optional, default=\") An optional label<br>3. rescan    (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Examples:<br><br>Import a public key with rescan<br> bitcoin-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> bitcoin-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> bitcoin-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already abandoned.<br><br>Arguments:<br>1. txid    (string, required) The transaction id<br><br>Examples:<br> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( nblocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. nblocks    (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height     (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> bitcoin-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmemoryinfo": "getmemoryinfo ( \"mode\" )<br>Returns an object containing information about memory usage.<br><br>Arguments:<br>1. mode    (string, optional, default=\"stats\") determines what kind of information is returned.<br>           - \"stats\" returns general statistics about memory usage in the daemon.<br>           - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).<br><br>Result (mode \"stats\"):<br>{<br>  \"locked\": {               (json object) Information about locked memory manager<br>    \"used\": xxxxx,          (numeric) Number of bytes used<br>    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas<br>    \"total\": xxxxxxx,       (numeric) Total number of bytes managed<br>    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.<br>    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks<br>    \"chunks_free\": xxxxx,   (numeric) Number unused chunks<br>  }<br>}<br><br>Result (mode \"mallocinfo\"):<br>\"<malloc version=\"1\">...\"<br><br>Examples:<br> bitcoin-cli getmemoryinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listwallets": "listwallets<br>Returns a list of currently loaded wallets.<br>For full information on the wallet, use \"getwalletinfo\"<br><br>Result:<br>[                         (json array of strings)<br>  \"walletname\"            (string) the wallet name<br>   ...<br>]<br><br>Examples:<br> bitcoin-cli listwallets <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listwallets\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddednodeinfo": "getaddednodeinfo ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br><br>Arguments:<br>1. node    (string, optional, default=all nodes) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node IP address or name (as provided to addnode)<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [                    (list of objects) Only when connected = true<br>       {<br>         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server IP and port we're connected to<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddednodeinfo \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importmulti": "importmulti \"requests\" ( \"options\" )<br><br>Import addresses/scripts (with private or public keys, redeem script (P2SH)), optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.<br>If an address/script is imported without all of the private keys required to spend from that address, it will be watchonly. The 'watchonly' option must be set to true in this case or a warning will be returned.<br>Conversely, if all the private keys are provided and the address/script is spendable, the watchonly option must be set to false, or a warning will be returned.<br><br>Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls<br>may report that the imported keys, addresses or scripts exists but related transactions are still missing.<br><br>Arguments:<br>1. requests                                                         (json array, required) Data to be imported<br>     [<br>       {                                                            (json object)<br>         \"desc\": \"str\",                                             (string) Descriptor to import. If using descriptor, do not also provide address/scriptPubKey, scripts, or pubkeys<br>         \"scriptPubKey\": \"<script>\" | { \"address\":\"<address>\" },    (string / json, required) Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor<br>         \"timestamp\": timestamp | \"now\",                            (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),<br>                                                                    or the string \"now\" to substitute the current synced blockchain time. The timestamp of the oldest<br>                                                                    key will determine how far back blockchain rescans need to begin for missing wallet transactions.<br>                                                                    \"now\" can be specified to bypass scanning, for keys which are known to never have been used, and<br>                                                                    0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key<br>                                                                    creation time of all keys being imported by the importmulti call will be scanned.<br>         \"redeemscript\": \"str\",                                     (string) Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey<br>         \"witnessscript\": \"str\",                                    (string) Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey<br>         \"pubkeys\": [                                               (json array, optional, default=empty array) Array of strings giving pubkeys to import. They must occur in P2PKH or P2WPKH scripts. They are not required when the private key is also provided (see the \"keys\" argument).<br>           \"pubKey\",                                                (string)<br>           ...<br>         ],<br>         \"keys\": [                                                  (json array, optional, default=empty array) Array of strings giving private keys to import. The corresponding public keys must occur in the output or redeemscript.<br>           \"key\",                                                   (string)<br>           ...<br>         ],<br>         \"range\": n or [n,n],                                       (numeric or array) If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import<br>         \"internal\": bool,                                          (boolean, optional, default=false) Stating whether matching outputs should be treated as not incoming payments (also known as change)<br>         \"watchonly\": bool,                                         (boolean, optional, default=false) Stating whether matching outputs should be considered watchonly.<br>         \"label\": \"str\",                                            (string, optional, default='') Label to assign to the address, only allowed with internal=false<br>         \"keypool\": bool,                                           (boolean, optional, default=false) Stating whether imported public keys should be added to the keypool for when users request new addresses. Only allowed when wallet private keys are disabled<br>       },<br>       ...<br>     ]<br>2. options                                                          (json object, optional)<br>     {<br>       \"rescan\": bool,                                              (boolean, optional, default=true) Stating if should rescan the blockchain after all imports<br>     }<br><br>Result:<br><br>Response is an array with the same size as the input that has the execution result :<br>  [{\"success\": true}, {\"success\": true, \"warnings\": [\"Ignoring irrelevant private key\"]}, {\"success\": false, \"error\": {\"code\": -1, \"message\": \"Internal Server Error\"}}, ...]<br><br>Examples:<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'",
            "generatetoaddress": "generatetoaddress nblocks \"address\" ( maxtries )<br><br>Mine blocks immediately to a specified address (before the RPC call returns)<br><br>Arguments:<br>1. nblocks     (numeric, required) How many blocks are generated immediately.<br>2. address     (string, required) The address to send the newly generated bitcoin to.<br>3. maxtries    (numeric, optional, default=1000000) How many iterations to try.<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks to myaddress<br> bitcoin-cli generatetoaddress 11 \"myaddress\"<br>If you are running the bitcoin core wallet, you can get a new address to send the newly generated bitcoin to with:<br> bitcoin-cli getnewaddress",
            "getblock": "getblock \"blockhash\" ( verbosity )<br><br>If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbosity is 1, returns an Object with information about block <hash>.<br>If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. <br><br>Arguments:<br>1. blockhash    (string, required) The block hash<br>2. verbosity    (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data<br><br>Result (for verbosity = 0):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Result (for verbosity = 1):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"strippedsize\" : n,    (numeric) The block size excluding witness data<br>  \"weight\" : n           (numeric) The block weight as defined in BIP 141<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"nTx\" : n,             (numeric) The number of transactions in the block.<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbosity = 2):<br>{<br>  ...,                     Same output as verbosity = 1.<br>  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.<br>         ,...<br>  ],<br>  ,...                     Same output as verbosity = 1.<br>}<br><br>Examples:<br> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbylabel": "listreceivedbylabel ( minconf include_empty include_watchonly )<br><br>List received transactions by label.<br><br>Arguments:<br>1. minconf              (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty        (boolean, optional, default=false) Whether to include labels that haven't received any payments.<br>3. include_watchonly    (boolean, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this label<br>    \"confirmations\" : n,          (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"           (string) The label of the receiving address. The default label is \".<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbylabel <br> bitcoin-cli listreceivedbylabel 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbylabel\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
        },
        "dash": {
            "getaddressbalance": "getaddressbalance<br><br>Returns the balance for an address(es) (requires addressindex to be enabled).<br><br>Arguments:<br>{<br>  \"addresses\"<br>    [<br>      \"address\"  (string) The base58check encoded address<br>      ,...<br>    ]<br>}<br><br>Result:<br>{<br>  \"balance\"  (string) The current balance in duffs<br>  \"received\"  (string) The total number of duffs received (including change)<br>}<br><br>Examples:<br> dash-cli getaddressbalance '{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressbalance\", \"params\": [{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getaddressdeltas": "getaddressdeltas<br><br>Returns all changes for an address (requires addressindex to be enabled).<br><br>Arguments:<br>{<br>  \"addresses\"<br>    [<br>      \"address\"  (string) The base58check encoded address<br>      ,...<br>    ]<br>  \"start\" (number) The start block height<br>  \"end\" (number) The end block height<br>}<br><br>Result:<br>[<br>  {<br>    \"satoshis\"  (number) The difference of duffs<br>    \"txid\"  (string) The related txid<br>    \"index\"  (number) The related input or output index<br>    \"blockindex\"  (number) The related block index<br>    \"height\"  (number) The block height<br>    \"address\"  (string) The base58check encoded address<br>  }<br>]<br><br>Examples:<br> dash-cli getaddressdeltas '{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressdeltas\", \"params\": [{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getaddressmempool": "getaddressmempool<br><br>Returns all mempool deltas for an address (requires addressindex to be enabled).<br><br>Arguments:<br>{<br>  \"addresses\"<br>    [<br>      \"address\"  (string) The base58check encoded address<br>      ,...<br>    ]<br>}<br><br>Result:<br>[<br>  {<br>    \"address\"  (string) The base58check encoded address<br>    \"txid\"  (string) The related txid<br>    \"index\"  (number) The related input or output index<br>    \"satoshis\"  (number) The difference of duffs<br>    \"timestamp\"  (number) The time the transaction entered the mempool (seconds)<br>    \"prevtxid\"  (string) The previous txid (if spending)<br>    \"prevout\"  (string) The previous transaction output index (if spending)<br>  }<br>]<br><br>Examples:<br> dash-cli getaddressmempool '{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressmempool\", \"params\": [{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getaddresstxids": "getaddresstxids<br><br>Returns the txids for an address(es) (requires addressindex to be enabled).<br><br>Arguments:<br>{<br>  \"addresses\"<br>    [<br>      \"address\"  (string) The base58check encoded address<br>      ,...<br>    ]<br>  \"start\" (number) The start block height<br>  \"end\" (number) The end block height<br>}<br><br>Result:<br>[<br>  \"transactionid\"  (string) The transaction id<br>  ,...<br>]<br><br>Examples:<br> dash-cli getaddresstxids '{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddresstxids\", \"params\": [{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getaddressutxos": "getaddressutxos<br><br>Returns all unspent outputs for an address (requires addressindex to be enabled).<br><br>Arguments:<br>{<br>  \"addresses\"<br>    [<br>      \"address\"  (string) The base58check encoded address<br>      ,...<br>    ]<br>}<br><br>Result:<br>[<br>  {<br>    \"address\"  (string) The address base58check encoded<br>    \"txid\"  (string) The output txid<br>    \"outputIndex\"  (number) The output index<br>    \"script\"  (string) The script hex encoded<br>    \"satoshis\"  (number) The number of duffs of the output<br>    \"height\"  (number) The block height<br>  }<br>]<br><br>Examples:<br> dash-cli getaddressutxos '{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressutxos\", \"params\": [{\"addresses\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest blockchain.<br><br>Result:<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples:<br> dash-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getblock": "getblock \"blockhash\" ( verbosity ) <br><br>If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbosity is 1, returns an Object with information about block <hash>.<br>If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. <br><br>Arguments:<br>1. \"blockhash\"          (string, required) The block hash<br>2. verbosity              (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data<br><br>Result (for verbosity = 0):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Result (for verbose = 1):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"cbTx\" : {             (json object) The coinbase special transaction <br>     \"version\"           (numeric) The coinbase special transaction version<br>     \"height\"            (numeric) The block height<br>     \"merkleRootMNList\" : \"xxxx\", (string) The merkle root of the masternode list<br>  },<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbosity = 2):<br>{<br>  ...,                     Same output as verbosity = 1.<br>  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.<br>         ,...<br>  ],<br>  ,...                     Same output as verbosity = 1.<br>}<br><br>Examples:<br> dash-cli getblock \"00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding blockchain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",        (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\", (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,     (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,     (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal<br>  \"pruned\": xx,             (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,    (numeric) lowest-height complete block stored<br>  \"softforks\": [            (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",        (string) name of softfork<br>        \"version\": xx,         (numeric) block version<br>        \"reject\": {            (object) progress toward rejecting pre-softfork blocks<br>           \"status\": xx,       (boolean) true if threshold reached<br>        },<br>     }, ...<br>  ],<br>  \"bip9_softforks\": {          (object) status of BIP9 softforks in progress<br>     \"xxxx\" : {                (string) name of the softfork<br>        \"status\": \"xxxx\",    (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"<br>        \"bit\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)<br>        \"period\": xx,          (numeric) the window size/period for this softfork (only for \"started\" status)<br>        \"threshold\": xx,       (numeric) the threshold for this softfork (only for \"started\" status)<br>        \"windowStart\": xx,     (numeric) the starting block height of the current window (only for \"started\" status)<br>        \"windowBlocks\": xx,    (numeric) the number of blocks in the current window that had the version bit set for this softfork (only for \"started\" status)<br>        \"windowProgress\": xx,  (numeric) the progress (between 0 and 1) for activation of this softfork (only for \"started\" status)<br>        \"startTime\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning<br>        \"timeout\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in<br>        \"since\": xx            (numeric) height of the first block to which the status applies<br>     }<br>  }<br>}<br><br>Examples:<br> dash-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest blockchain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> dash-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getblockhash": "getblockhash height<br><br>Returns hash of block in best-block-chain at height provided.<br><br>Arguments:<br>1. height         (numeric, required) The height index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> dash-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getblockhashes": "getblockhashes timestamp<br><br>Returns array of hashes of blocks within the timestamp range provided.<br><br>Arguments:<br>1. high         (numeric, required) The newer block timestamp<br>2. low          (numeric, required) The older block timestamp<br><br>Result:<br>[<br>  \"hash\"         (string) The block hash<br>]<br><br>Examples:<br> dash-cli getblockhashes 1231614698 1231024505<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhashes\", \"params\": [1231614698, 1231024505] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> dash-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getblockheaders": "getblockheaders \"hash\" ( count verbose )<br><br>Returns an array of items with information about <count> blockheaders starting from <hash>.<br><br>If verbose is false, each item is a string that is serialized, hex-encoded data for a single blockheader.<br>If verbose is true, each item is an Object with information about a single blockheader.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. count           (numeric, optional, default/max=2000)<br>3. verbose         (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>[ {<br>  \"hash\" : \"hash\",               (string)  The block hash<br>  \"confirmations\" : n,           (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,                  (numeric) The block height or index<br>  \"version\" : n,                 (numeric) The block version<br>  \"merkleroot\" : \"xxxx\",         (string)  The merkle root<br>  \"time\" : ttt,                  (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,            (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,                   (numeric) The nonce<br>  \"bits\" : \"1d00ffff\",           (string)  The bits<br>  \"difficulty\" : x.xxx,          (numeric) The difficulty<br>  \"chainwork\" : \"0000...1f3\"     (string)  Expected number of hashes required to produce the current chain (in hex)<br>  \"previousblockhash\" : \"hash\",  (string)  The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string)  The hash of the next block<br>}, {<br>       ...<br>   },<br>...<br>]<br><br>Result (for verbose=false):<br>[<br>  \"data\",                        (string)  A string that is serialized, hex-encoded data for block header.<br>  ...<br>]<br><br>Examples:<br> dash-cli getblockheaders \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" 2000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheaders\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" 2000] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getchaintips": "getchaintips ( count branchlen )<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Arguments:<br>1. count       (numeric, optional) only show this much of latest tips<br>2. branchlen   (numeric, optional) only show tips that have equal or greater length of branch<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,             (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",             (string) block hash of the tip<br>    \"difficulty\" : x.xxx,       (numeric) The difficulty<br>    \"chainwork\" : \"0000...1f3\"  (string) Expected number of hashes required to produce the current chain (in hex)<br>    \"branchlen\": 0              (numeric) zero for main chain<br>    \"forkpoint\": \"xxxx\",        (string) same as \"hash\" for the main chain<br>    \"status\": \"active\"          (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"difficulty\" : x.xxx,<br>    \"chainwork\" : \"0000...1f3\"<br>    \"branchlen\": 1              (numeric) length of branch connecting the tip to the main chain<br>    \"forkpoint\": \"xxxx\",        (string) block hash of the last common block between this tip and the main chain<br>    \"status\": \"xxxx\"            (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> dash-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> dash-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getmempoolancestors": "getmempoolancestors txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool ancestors.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,                 (numeric) transaction size in bytes<br>    \"fee\" : n,                  (numeric) transaction fee in DASH<br>    \"modifiedfee\" : n,          (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,                 (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,               (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,      (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,       (numeric) size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,       (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,        (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,         (numeric) size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,         (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [               (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",        (string) parent transaction id<br>       ... ],<br>    \"instantsend\" : true|false, (boolean) True if this transaction was sent as an InstantSend one<br>    \"instantlock\" : true|false  (boolean) True if this transaction was locked via InstantSend<br>  }, ...<br>}<br><br>Examples:<br> dash-cli getmempoolancestors \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getmempooldescendants": "getmempooldescendants txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool descendants.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,                 (numeric) transaction size in bytes<br>    \"fee\" : n,                  (numeric) transaction fee in DASH<br>    \"modifiedfee\" : n,          (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,                 (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,               (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,      (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,       (numeric) size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,       (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,        (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,         (numeric) size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,         (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [               (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",        (string) parent transaction id<br>       ... ],<br>    \"instantsend\" : true|false, (boolean) True if this transaction was sent as an InstantSend one<br>    \"instantlock\" : true|false  (boolean) True if this transaction was locked via InstantSend<br>  }, ...<br>}<br><br>Examples:<br> dash-cli getmempooldescendants \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getmempoolentry": "getmempoolentry txid<br><br>Returns mempool data for given transaction<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br><br>Result:<br>{                           (json object)<br>    \"size\" : n,                 (numeric) transaction size in bytes<br>    \"fee\" : n,                  (numeric) transaction fee in DASH<br>    \"modifiedfee\" : n,          (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,                 (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,               (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,      (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,       (numeric) size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,       (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,        (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,         (numeric) size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,         (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [               (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",        (string) parent transaction id<br>       ... ],<br>    \"instantsend\" : true|false, (boolean) True if this transaction was sent as an InstantSend one<br>    \"instantlock\" : true|false  (boolean) True if this transaction was locked via InstantSend<br>}<br><br>Examples:<br> dash-cli getmempoolentry \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Sum of all tx sizes<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum fee for tx to be accepted<br>  \"instantsendlocks\": xxxxx,   (numeric) Number of unconfirmed instant send locks<br>}<br><br>Examples:<br> dash-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Hint: use getmempoolentry to fetch a specific transaction from the mempool.<br><br>Arguments:<br>1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,                 (numeric) transaction size in bytes<br>    \"fee\" : n,                  (numeric) transaction fee in DASH<br>    \"modifiedfee\" : n,          (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,                 (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,               (numeric) block height when transaction entered pool<br>    \"descendantcount\" : n,      (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,       (numeric) size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,       (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,        (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,         (numeric) size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,         (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [               (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",        (string) parent transaction id<br>       ... ],<br>    \"instantsend\" : true|false, (boolean) True if this transaction was sent as an InstantSend one<br>    \"instantlock\" : true|false  (boolean) True if this transaction was locked via InstantSend<br>  }, ...<br>}<br><br>Examples:<br> dash-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getspecialtxes": "getspecialtxes \"blockhash\" ( type count skip verbosity ) <br>Returns an array of special transactions found in the specified block<br><br>If verbosity is 0, returns tx hash for each transaction.<br>If verbosity is 1, returns hex-encoded data for each transaction.<br>If verbosity is 2, returns an Object with information for each transaction.<br><br>Arguments:<br>1. \"blockhash\"          (string, required) The block hash<br>2. type                 (numeric, optional, default=-1) Filter special txes by type, -1 means all types<br>3. count                (numeric, optional, default=10) The number of transactions to return<br>4. skip                 (numeric, optional, default=0) The number of transactions to skip<br>5. verbosity            (numeric, optional, default=0) 0 for hashes, 1 for hex-encoded data, and 2 for json object<br><br>Result (for verbosity = 0):<br>[<br>  \"txid\" : \"xxxx\",    (string) The transaction id<br>]<br><br>Result (for verbosity = 1):<br>[<br>  \"data\",               (string) A string that is serialized, hex-encoded data for the transaction<br>]<br><br>Result (for verbosity = 2):<br>[                       (array of Objects) The transactions in the format of the getrawtransaction RPC.<br>  ...,<br>]<br><br>Examples:<br> dash-cli getspecialtxes \"00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspecialtxes\", \"params\": [\"00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getspentinfo": "getspentinfo<br><br>Returns the txid and index where an output is spent.<br><br>Arguments:<br>{<br>  \"txid\" (string) The hex string of the txid<br>  \"index\" (number) The start block height<br>}<br><br>Result:<br>{<br>  \"txid\"  (string) The transaction id<br>  \"index\"  (number) The spending input index<br>  ,...<br>}<br><br>Examples:<br> dash-cli getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "gettxout": "gettxout \"txid\" n ( include_mempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id<br>2. n              (numeric, required) vout number<br>3. include_mempool  (boolean, optional) Whether to include the mempool<br><br>Result:<br>{<br>  \"bestblock\" : \"hash\",    (string) the block hash<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in DASH<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of dash addresses<br>        \"address\"     (string) dash address<br>        ,...<br>     ]<br>  },<br>  \"version\" : n,            (numeric) The version<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> dash-cli listunspent <br><br>View the details<br> dash-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included manually (by blockhash).<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"blockhash\"   (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.<br><br>Examples:<br> dash-cli gettxoutproof '[\"mytxid\",...]'<br> dash-cli gettxoutproof '[\"mytxid\",...]' \"blockhash\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutproof\", \"params\": [[\"mytxid\",...], \"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) the best block hash hex<br>  \"transactions\": n,      (numeric) The number of transactions<br>  \"txouts\": n,            (numeric) The number of unspent transaction outputs<br>  \"hash_serialized\": \"hash\",   (string) The serialized hash<br>  \"disk_size\": n,         (numeric) The estimated size of the chainstate on disk<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> dash-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "preciousblock": "preciousblock \"blockhash\"<br><br>Treats a block as if it were received before others with the same work.<br><br>A later preciousblock call can override the effect of an earlier one.<br><br>The effects of preciousblock are not retained across restarts.<br><br>Arguments:<br>1. \"blockhash\"   (string, required) the hash of the block to mark as precious<br><br>Result:<br><br>Examples:<br> dash-cli preciousblock \"blockhash\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "pruneblockchain": "pruneblockchain<br><br>Arguments:<br>1. \"height\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp<br>                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.<br><br>Result:<br>n    (numeric) Height of the last block pruned.<br><br>Examples:<br> dash-cli pruneblockchain 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "verifychain": "verifychain ( checklevel nblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. nblocks      (numeric, optional, default=6, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> dash-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid<br><br>Examples:<br> dash-cli verifytxoutproof \"proof\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutproof\", \"params\": [\"proof\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "debug": "debug \"category\"<br>Change debug category on the fly. Specify single category or use '+' to specify many.<br><br>Arguments:<br>1. \"category\"          (string, required) The name of the debug category to turn on. Can be one of the following:<br>                       addrman, alert, bench, cmpctblock, coindb, db, http, leveldb, libevent, lock, mempool,<br>                       mempoolrej, net, proxy, prune, qt, rand, reindex, rpc, selectcoins, tor, zmq, dash<br>                       (or specifically: chainlocks, gobject, instantsend, keepass, llmq, llmq-dkg, llmq-sigs,<br>                       masternode, mnpayments, mnsync, privatesend, spork).<br>                       Can also use \"1\" to turn all categories on at once and \"0\" to turn them off.<br>                       Note: If specified category doesn't match any of the above, no error is thrown.<br><br>Result:<br>  result               (string) \"Debug mode: \" followed by the specified category.<br><br>Examples:<br> dash-cli debug dash<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"debug\", \"params\": [dash+net] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getinfo": "getinfo<br><br>DEPRECATED. Returns an object containing various state info.<br><br>Result:<br>{<br>  \"version\": xxxxx,           (numeric) the server version<br>  \"protocolversion\": xxxxx,   (numeric) the protocol version<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total dash balance of the wallet<br>  \"privatesend_balance\": xxxxxx, (numeric) the anonymized dash balance of the wallet<br>  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server<br>  \"timeoffset\": xxxxx,        (numeric) the time offset<br>  \"connections\": xxxxx,       (numeric) the number of connections<br>  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server<br>  \"difficulty\": xxxxxx,       (numeric) the current difficulty<br>  \"testnet\": true|false,      (boolean) if the server is using testnet or not<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in DASH/kB<br>  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for transactions in DASH/kB<br>  \"errors\": \"...\"           (string) any error messages<br>}<br><br>Examples:<br> dash-cli getinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getmemoryinfo": "getmemoryinfo<br>Returns an object containing information about memory usage.<br><br>Result:<br>{<br>  \"locked\": {               (json object) Information about locked memory manager<br>    \"used\": xxxxx,          (numeric) Number of bytes used<br>    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas<br>    \"total\": xxxxxxx,       (numeric) Total number of bytes managed<br>    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.<br>    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks<br>    \"chunks_free\": xxxxx,   (numeric) Number unused chunks<br>  }<br>}<br><br>Examples:<br> dash-cli getmemoryinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "help": "help ( \"command\" ) (\"subCommand\")<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br>2. \"subCommand\"  (string, optional) The subcommand to get help on. Please not that not all subcommands support this at the moment<br><br>Result:<br>\"text\"     (string) The help text",
            "stop": "stop<br><br>Stop Dash Core server.",
            "getgovernanceinfo": "getgovernanceinfo<br>Returns an object containing governance parameters.<br><br>Result:<br>{<br>  \"governanceminquorum\": xxxxx,           (numeric) the absolute minimum number of votes needed to trigger a governance action<br>  \"proposalfee\": xxx.xx,                  (numeric) the collateral transaction fee which must be paid to create a proposal in DASH<br>  \"superblockcycle\": xxxxx,               (numeric) the number of blocks between superblocks<br>  \"lastsuperblock\": xxxxx,                (numeric) the block number of the last superblock<br>  \"nextsuperblock\": xxxxx,                (numeric) the block number of the next superblock<br>}<br><br>Examples:<br> dash-cli getgovernanceinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgovernanceinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getpoolinfo": "getpoolinfo<br>Returns an object containing mixing pool related information.",
            "getsuperblockbudget": "getsuperblockbudget index<br><br>Returns the absolute maximum sum of superblock payments allowed.<br><br>Arguments:<br>1. index         (numeric, required) The block index<br><br>Result:<br>n                (numeric) The absolute maximum sum of superblock payments allowed, in DASH<br><br>Examples:<br> dash-cli getsuperblockbudget 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsuperblockbudget\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "gobject": "gobject \"command\"...<br>Manage governance objects<br><br>Available commands:<br>  check              - Validate governance object data (proposal only)<br>  prepare            - Prepare governance object by signing and creating tx<br>  submit             - Submit governance object to network<br>  deserialize        - Deserialize governance object from hex string to JSON<br>  count              - Count governance objects and votes (additional param: 'json' or 'all', default: 'json')<br>  get                - Get governance object by hash<br>  getcurrentvotes    - Get only current (tallying) votes for a governance object hash (does not include old votes)<br>  list               - List governance objects (can be filtered by signal and/or object type)<br>  diff               - List differences since last diff<br>  vote-alias         - Vote on a governance object by masternode proTxHash<br>  vote-conf          - Vote on a governance object by masternode configured in dash.conf<br>  vote-many          - Vote on a governance object by all masternodes for which the voting key is in the wallet",
            "masternode": "masternode \"command\"...<br>Set of commands to execute masternode related actions<br><br>Arguments:<br>1. \"command\"        (string or set of strings, required) The command to execute<br><br>Available commands:<br>  count        - Get information about number of masternodes (DEPRECATED options: 'total', 'ps', 'enabled', 'qualify', 'all')<br>  current      - Print info on current masternode winner to be paid the next block (calculated locally)<br>  outputs      - Print masternode compatible outputs<br>  status       - Print masternode status information<br>  list         - Print list of all known masternodes (see masternodelist for more info)<br>  winner       - Print info on next masternode winner to vote for<br>  winners      - Print list of masternode winners",
            "mnsync": "mnsync [status|next|reset]<br>Returns the sync status, updates to the next step or resets it entirely.",
            "privatesend": "privatesend \"command\"<br><br>Arguments:<br>1. \"command\"        (string or set of strings, required) The command to execute<br><br>Available commands:<br>  start       - Start mixing<br>  stop        - Stop mixing<br>  reset       - Reset mixing",
            "spork": "spork \"command\"<br><br>Shows information about current state of sporks<br><br>Arguments:<br>1. \"command\"                     (string, required) 'show' to show all current spork values, 'active' to show which sporks are active<br><br>Result:<br>For 'show':<br>{<br>  \"SPORK_NAME\" : spork_value,    (number) The value of the specific spork with the name SPORK_NAME<br>  ...<br>}<br>For 'active':<br>{<br>  \"SPORK_NAME\" : true|false,     (boolean) 'true' for time-based sporks if spork is active and 'false' otherwise<br>  ...<br>}<br><br>Examples:<br> dash-cli spork show<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"spork\", \"params\": [\"show\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "voteraw": "voteraw <masternode-tx-hash> <masternode-tx-index> <governance-hash> <vote-signal> [yes|no|abstain] <time> <vote-sig><br>Compile and relay a governance vote with provided external signature instead of signing vote internally",
            "bls": "bls \"command\" ...<br>Set of commands to execute BLS related actions.<br>To get help on individual commands, use \"help bls command\".<br><br>Arguments:<br>1. \"command\"        (string, required) The command to execute<br><br>Available commands:<br>  generate          - Create a BLS secret/public key pair<br>  fromsecret        - Parse a BLS secret key and return the secret/public key pair",
            "protx": "protx \"command\" ...<br>Set of commands to execute ProTx related actions.<br>To get help on individual commands, use \"help protx command\".<br><br>Arguments:<br>1. \"command\"        (string, required) The command to execute<br><br>Available commands:<br>  register          - Create and send ProTx to network<br>  register_fund     - Fund, create and send ProTx to network<br>  register_prepare  - Create an unsigned ProTx<br>  register_submit   - Sign and submit a ProTx<br>  list              - List ProTxs<br>  info              - Return information about a ProTx<br>  update_service    - Create and send ProUpServTx to network<br>  update_registrar  - Create and send ProUpRegTx to network<br>  revoke            - Create and send ProUpRevTx to network<br>  diff              - Calculate a diff and a proof between two masternode lists",
            "quorum": "quorum \"command\" ...<br>Set of commands for quorums/LLMQs.<br>To get help on individual commands, use \"help quorum command\".<br><br>Arguments:<br>1. \"command\"        (string, required) The command to execute<br><br>Available commands:<br>  list              - List of on-chain quorums<br>  info              - Return information about a quorum<br>  dkgsimerror       - Simulates DKG errors and malicious behavior.<br>  dkgstatus         - Return the status of the current DKG process<br>  memberof          - Checks which quorums the given masternode is a member of<br>  sign              - Threshold-sign a message<br>  hasrecsig         - Test if a valid recovered signature is present<br>  getrecsig         - Get a recovered signature<br>  isconflicting     - Test if a conflict exists",
            "generate": "generate nblocks ( maxtries )<br><br>Mine up to nblocks blocks immediately (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> dash-cli generate 11",
            "generatetoaddress": "generatetoaddress nblocks address (maxtries)<br><br>Mine blocks immediately to a specified address (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. address      (string, required) The address to send the newly generated Dash to.<br>3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks to myaddress<br> dash-cli generatetoaddress 11 \"myaddress\"",
            "getblocktemplate": "getblocktemplate ( TemplateRequest )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>For full specification, see BIPs 22, 23, and 9:<br>    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes<br><br>Arguments:<br>1. template_request         (json object, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted<br>       \"capabilities\":[     (array, optional) A list of strings<br>           \"support\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>       ],<br>       \"rules\":[            (array, optional) A list of strings<br>           \"support\"          (string) client side supported softfork deployment<br>           ,...<br>       ]<br>     }<br><br><br>Result:<br>{<br>  \"capabilities\" : [ \"capability\", ... ],    (array of strings) specific client side supported features<br>  \"version\" : n,                    (numeric) The preferred block version<br>  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced<br>  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments<br>      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule<br>      ,...<br>  },<br>  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions<br>  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"hash\" : \"xxxx\",             (string) hash/id encoded in little-endian hexadecimal<br>         \"depends\" : [                (array) array of numbers <br>             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in duffs); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,                (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any<br>         \"required\" : true|false      (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig<br>  },<br>  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in duffs)<br>  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",                (string) The hash target<br>  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                     (array of string) list of ways the block template may be changed <br>     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block<br>  \"previousbits\" : \"xxxxxxxx\",      (string) compressed target of current highest block<br>  \"height\" : n                      (numeric) The height of the next block<br>  \"masternode\" : [                  (array) required masternode payments that must be included in the next block<br>      {<br>         \"payee\" : \"xxxx\",          (string) payee address<br>         \"script\" : \"xxxx\",         (string) payee scriptPubKey<br>         \"amount\": n                (numeric) required amount to pay<br>      }<br>  },<br>  \"masternode_payments_started\" :  true|false, (boolean) true, if masternode payments started<br>  \"masternode_payments_enforced\" : true|false, (boolean) true, if masternode payments are enforced<br>  \"superblock\" : [                  (array) required superblock payees that must be included in the next block<br>      {<br>         \"payee\" : \"xxxx\",          (string) payee address<br>         \"script\" : \"xxxx\",         (string) payee scriptPubKey<br>         \"amount\": n                (numeric) required amount to pay<br>      }<br>      ,...<br>  ],<br>  \"superblocks_started\" : true|false, (boolean) true, if superblock payments started<br>  \"superblocks_enabled\" : true|false, (boolean) true, if superblock payments are enabled<br>  \"coinbase_payload\" : \"xxxxxxxx\"    (string) coinbase transaction payload data encoded in hexadecimal<br>}<br><br>Examples:<br> dash-cli getblocktemplate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblocksize\": nnn,   (numeric) The last block size<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"errors\": \"...\"            (string) Current errors<br>  \"networkhashps\": nnn,      (numeric) The network hashes per second<br>  \"pooledtx\": n              (numeric) The size of the mempool<br>  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)<br>}<br><br>Examples:<br> dash-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getnetworkhashps": "getnetworkhashps ( nblocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height      (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> dash-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "prioritisetransaction": "prioritisetransaction <txid> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. fee_delta      (numeric, required) The fee value (in duffs) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result:<br>true              (boolean) Returns true<br><br>Examples:<br> dash-cli prioritisetransaction \"txid\" 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "submitblock": "submitblock \"hexdata\" ( \"jsonparametersobject\" )<br><br>Attempts to submit new block to network.<br>The 'jsonparametersobject' parameter is currently ignored.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments:<br>1. \"hexdata\"        (string, required) the hex-encoded block data to submit<br>2. \"parameters\"     (string, optional) object of optional parameters<br>    {<br>      \"workid\" : \"id\"    (string, optional) if the server provided a workid, it MUST be included with submissions<br>    }<br><br>Result:<br><br>Examples:<br> dash-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts add or remove a node from the addnode list.<br>Or try a connection to a node once.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> dash-cli addnode \"192.168.0.6:9999\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:9999\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> dash-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "disconnectnode": "disconnectnode \"address\" <br><br>Immediately disconnects from the specified node.<br><br>Arguments:<br>1. \"address\"     (string, required) The IP address/port of the node<br><br>Examples:<br> dash-cli disconnectnode \"192.168.0.6:9999\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:9999\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getaddednodeinfo": "getaddednodeinfo ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br><br>Arguments:<br>1. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node ip address or name (as provided to addnode)<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [                    (list of objects) Only when connected = true<br>       {<br>         \"address\" : \"192.168.0.201:9999\",  (string) The dash server IP and port we're connected to<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> dash-cli getaddednodeinfo <br> dash-cli getaddednodeinfo \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> dash-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> dash-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Dash Core:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networkactive\": true|false,           (bool) whether p2p networking is enabled<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in DASH/kB<br>  \"incrementalfee\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in DASH/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network warnings<br>}<br><br>Examples:<br> dash-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The ip address and port of the peer<br>    \"addrlocal\":\"ip:port\",   (string) local address<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time (if available)<br>    \"minping\": n,              (numeric) minimum observed ping time (if any at all)<br>    \"pingwait\": n,             (numeric) ping wait (if non-zero)<br>    \"version\": v,              (numeric) The peer version, such as 7001<br>    \"subver\": \"/Dash Core:x.x.x/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"addnode\": true|false,     (boolean) Whether connection was due to addnode and is using an addnode slot<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ],<br>    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted<br>    \"bytessent_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes sent aggregated by message type<br>       ...<br>    },<br>    \"bytesrecv_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes received aggregated by message type<br>       ...<br>    }<br>  }<br>  ,...<br>]<br><br>Examples:<br> dash-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> dash-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> dash-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "setban": "setban \"subnet\" \"add|remove\" (bantime) (absolute)<br><br>Attempts add or remove a IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"subnet\"       (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)<br>2. \"command\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> dash-cli setban \"192.168.0.6\" \"add\" 86400<br> dash-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "setnetworkactive": "setnetworkactive true|false<br><br>Disable/enable all p2p network activity.<br><br>Arguments:<br>1. \"state\"        (boolean, required) true to enable networking, false to disable",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,\"data\":\"hex\",...} ( locktime )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"inputs\"                (array, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",    (string, required) The transaction id<br>         \"vout\":n,         (numeric, required) The output number<br>         \"sequence\":n      (numeric, optional) The sequence number<br>       } <br>       ,...<br>     ]<br>2. \"outputs\"               (object, required) a json object with outputs<br>    {<br>      \"address\": x.xxx,    (numeric or string, required) The key is the dash address, the numeric value (can be string) is the DASH amount<br>      \"data\": \"hex\"      (string, required) The key is \"data\", the value is hex encoded data<br>      ,...<br>    }<br>3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br><br>Result:<br>\"transaction\"              (string) hex string of the transaction<br><br>Examples:<br> dash-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"<br> dash-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"data\":\"00010203\"}\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"data\":\"00010203\"}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\"<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hexstring\"      (string, required) The transaction hex string<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"size\" : n,             (numeric) The transaction size<br>  \"version\" : n,          (numeric) The version<br>  \"type\" : n,             (numeric) The type<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in DASH<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\"   (string) Dash address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"extraPayloadSize\" : n           (numeric) Size of DIP2 extra payload. Only present if it's a special TX<br>  \"extraPayload\" : \"hex\"           (string) Hex encoded DIP2 extra payload data. Only present if it's a special TX<br>}<br><br>Examples:<br> dash-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "decodescript": "decodescript \"hexstring\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hexstring\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) dash address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).<br>}<br><br>Examples:<br> dash-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" ( options )<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add at most one change output to the outputs.<br>No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must be<br>in the wallet using importaddress or addmultisigaddress (to calculate fees).<br>You can see whether this is the case by checking the \"solvable\" field in the listunspent output.<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. \"hexstring\"           (string, required) The hex string of the raw transaction<br>2. options                 (object, optional)<br>   {<br>     \"changeAddress\"          (string, optional, default pool address) The dash address to receive the change<br>     \"changePosition\"         (numeric, optional, default random) The index of the change output<br>     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only<br>     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs<br>     \"reserveChangeKey\"       (boolean, optional, default true) Reserves the change output key from the keypool<br>     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (DASH per KB)<br>     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.<br>                              The fee will be equally deducted from the amount of each specified output.<br>                              The outputs are specified by their zero-based index, before any change output is added.<br>                              Those recipients will receive less dash than you enter in their corresponding amount field.<br>                              If no outputs are specified here, the sender pays the fee.<br>                                  [vout_index,...]<br>   }<br>                         for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee in DASH the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> dash-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> dash-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> dash-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> dash-cli sendrawtransaction \"signedtransactionhex\"",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose )<br><br>NOTE: By default this function only works for mempool transactions. If the -txindex option is<br>enabled, it also works for blockchain transactions.<br>DEPRECATED: for now, it also works for transactions with unspent outputs.<br><br>Return the raw transaction data.<br><br>If verbose is 'true', returns an Object with information about 'txid'.<br>If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose       (bool, optional, default=false) If false, return a string, otherwise return a json object<br><br>Result (if verbose is not set or set to false):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose is set to true):<br>{<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in DASH<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"address\"        (string) dash address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"extraPayloadSize\" : n    (numeric) Size of DIP2 extra payload. Only present if it's a special TX<br>  \"extraPayload\" : \"hex\"    (string) Hex encoded DIP2 extra payload data. Only present if it's a special TX<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"instantlock\" : true|false, (bool) Current transaction lock state<br>  \"instantlock_internal\" : true|false, (bool) Current internal transaction lock state<br>  \"chainlock\" : true|false, (bool) The state of the corresponding block chainlock<br>}<br><br>Examples:<br> dash-cli getrawtransaction \"mytxid\"<br> dash-cli getrawtransaction \"mytxid\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", true] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees instantsend bypasslimits)<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees  (boolean, optional, default=false) Allow high fees<br>3. instantsend    (boolean, optional, default=false) Use InstantSend to send this transaction<br>4. bypasslimits   (boolean, optional, default=false) Bypass transaction policy limits<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> dash-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> dash-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> dash-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\"    (string, required for P2SH) redeem script<br>       }<br>       ,...<br>    ]<br>3. \"privkeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> dash-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"       (string, required) A json array of keys which are dash addresses or hex-encoded public keys<br>     [<br>       \"key\"    (string) dash address or hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 addresses<br> dash-cli createmultisig 2 \"[\"Xt4qk9uKvQYAonVGSZNXqxeDmtjaEWgfrs\",\"XoSoWQkpgLpppPoyyzbUFh1fq2RBvW6UK1\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"Xt4qk9uKvQYAonVGSZNXqxeDmtjaEWgfrs\",\"XoSoWQkpgLpppPoyyzbUFh1fq2RBvW6UK1\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "estimatefee": "estimatefee nblocks<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric, required)<br><br>Result:<br>n              (numeric) estimated fee-per-kilobyte<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br>-1 is always returned for nblocks == 1 as it is impossible to calculate<br>a fee that is high enough to get reliably included in the next block.<br><br>Example:<br> dash-cli estimatefee 6",
            "estimatesmartfee": "estimatesmartfee nblocks<br><br>WARNING: This interface is unstable and may disappear or change!<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks if possible and return the number of blocks<br>for which the estimate is valid.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>{<br>  \"feerate\" : x.x,     (numeric) estimate fee-per-kilobyte (in DASH)<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br>However it will not return a value below the mempool reject fee.<br><br>Example:<br> dash-cli estimatesmartfee 6",
            "signmessagewithprivkey": "signmessagewithprivkey \"privkey\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"privkey\"         (string, required) The private key to sign the message with.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Create the signature<br> dash-cli signmessagewithprivkey \"privkey\" \"my message\"<br><br>Verify the signature<br> dash-cli verifymessage \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "validateaddress": "validateaddress \"address\"<br><br>Return information about the given dash address.<br><br>Arguments:<br>1. \"address\"     (string, required) The dash address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"address\", (string) The dash address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key<br>  \"iscompressed\" : true|false,  (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \"\" is the default account<br>  \"timestamp\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)<br>  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available<br>  \"hdchainid\" : \"<hash>\"        (string, optional) The ID of the HD chain<br>}<br><br>Examples:<br> dash-cli validateaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "verifymessage": "verifymessage \"address\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"address\"         (string, required) The dash address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> dash-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> dash-cli signmessage \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" \"my message\"<br><br>Verify the signature<br> dash-cli verifymessage \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already conflicted or abandoned.<br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br><br>Result:<br><br>Examples:<br> dash-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"account\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet.<br>Each key is a Dash address or hex-encoded public key.<br>If 'account' is specified (DEPRECATED), assign address to that account.<br><br>Arguments:<br>1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"         (string, required) A json array of dash addresses or hex-encoded public keys<br>     [<br>       \"address\"  (string) dash address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"account\"      (string, optional) DEPRECATED. An account to assign the addresses to.<br><br>Result:<br>\"address\"         (string) A dash address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> dash-cli addmultisigaddress 2 \"[\"Xt4qk9uKvQYAonVGSZNXqxeDmtjaEWgfrS\",\"XoSoWQkpgLpppPoyyzbUFh1fq2RBvW6UK2\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"Xt4qk9uKvQYAonVGSZNXqxeDmtjaEWgfrS\",\"XoSoWQkpgLpppPoyyzbUFh1fq2RBvW6UK2\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies current wallet file to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> dash-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "dumphdinfo": "dumphdinfo<br>Returns an object containing sensitive private info about this HD wallet.<br><br>Result:<br>{<br>  \"hdseed\": \"seed\",                    (string) The HD seed (bip32, in hex)<br>  \"mnemonic\": \"words\",                 (string) The mnemonic for this HD wallet (bip39, english words) <br>  \"mnemonicpassphrase\": \"passphrase\",  (string) The mnemonic passphrase for this HD wallet (bip39)<br>}<br><br>Examples:<br> dash-cli dumphdinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumphdinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "dumpprivkey": "dumpprivkey \"address\"<br><br>Reveals the private key corresponding to 'address'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"address\"   (string, required) The dash address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> dash-cli dumpprivkey \"myaddress\"<br> dash-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format.<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename<br><br>Examples:<br> dash-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt you wallet<br> dash-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending dash<br> dash-cli walletpassphrase \"my pass phrase\"<br><br>Now we can so something like sign<br> dash-cli signmessage \"address\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> dash-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getaccount": "getaccount \"address\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The dash address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> dash-cli getaccount \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getaccountaddress": "getaccountaddress \"account\"<br><br>DEPRECATED. Returns the current Dash address for receiving payments to this account.<br><br>Arguments:<br>1. \"account\"       (string, required) The account name for the address. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.<br><br>Result:<br>\"address\"          (string) The account dash address<br><br>Examples:<br> dash-cli getaccountaddress <br> dash-cli getaccountaddress \"\"<br> dash-cli getaccountaddress \"myaccount\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"        (string, required) The account name.<br><br>Result:<br>[                     (json array of string)<br>  \"address\"         (string) a dash address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> dash-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getbalance": "getbalance ( \"account\" minconf addlocked include_watchonly )<br><br>If account is not specified, returns the server's total available balance.<br>If account is specified (DEPRECATED), returns the balance in the account.<br>Note that the account \"\" is not the same as leaving the parameter out.<br>The server total may be different to the balance in the default \"\" account.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The selected account, or \"*\" for entire wallet. It may be the default account using \"\".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. addlocked      (bool, optional, default=false) Whether to include the value of transactions locked via InstantSend in the wallet's balance.<br>4. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in DASH received for this account.<br><br>Examples:<br><br>The total amount in the wallet<br> dash-cli getbalance <br><br>The total amount in the wallet at least 5 blocks confirmed<br> dash-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getnewaddress": "getnewaddress ( \"account\" )<br><br>Returns a new Dash address for receiving payments.<br>If 'account' is specified (DEPRECATED), it is added to the address book <br>so payments received with the address will be credited to 'account'.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \"\" is used. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.<br><br>Result:<br>\"address\"    (string) The new dash address<br><br>Examples:<br> dash-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getrawchangeaddress": "getrawchangeaddress<br><br>Returns a new Dash address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> dash-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getreceivedbyaccount": "getreceivedbyaccount \"account\" ( minconf addlocked )<br><br>DEPRECATED. Returns the total amount received by addresses with <account> in transactions with specified minimum number of confirmations.<br><br>Arguments:<br>1. \"account\"      (string, required) The selected account, may be the default account using \"\".<br>2. minconf        (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. addlocked      (bool, optional, default=false) Whether to include transactions locked via InstantSend.<br><br>Result:<br>amount            (numeric) The total amount in DASH received for this account.<br><br>Examples:<br><br>Amount received by the default account with at least 1 confirmation<br> dash-cli getreceivedbyaccount \"\"<br><br>Amount received at the tabby account including unconfirmed amounts with zero confirmations<br> dash-cli getreceivedbyaccount \"tabby\" 0<br><br>The amount with at least 6 confirmation, very safe<br> dash-cli getreceivedbyaccount \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getreceivedbyaddress": "getreceivedbyaddress \"address\" ( minconf addlocked )<br><br>Returns the total amount received by the given address in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"address\"         (string, required) The dash address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. addlocked           (bool, optional, default=false) Whether to include transactions locked via InstantSend.<br><br>Result:<br>amount   (numeric) The total amount in DASH received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> dash-cli getreceivedbyaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> dash-cli getreceivedbyaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 0<br><br>The amount with at least 6 confirmation, very safe<br> dash-cli getreceivedbyaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "gettransaction": "gettransaction \"txid\" ( include_watchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"                  (string, required) The transaction id<br>2. \"include_watchonly\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in DASH<br>  \"fee\": x.xxx,            (numeric) The amount of the fee in DASH. This is negative and only available for the <br>                              'send' category of transactions.<br>  \"instantlock\" : true|false, (bool) Current transaction lock state<br>  \"instantlock_internal\" : true|false, (bool) Current internal transaction lock state<br>  \"chainlock\" : true|false, (bool) The state of the corresponding block chainlock<br>  \"confirmations\" : n,     (numeric) The number of blockchain confirmations<br>  \"blockhash\" : \"hash\",    (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",      (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.<br>      \"address\" : \"address\",          (string) The dash address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx,               (numeric) The amount in DASH<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                     (numeric) the vout value<br>      \"fee\": x.xxx,                     (numeric) The amount of the fee in DASH. This is negative and only available for the <br>                                           'send' category of transactions.<br>      \"abandoned\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                           'send' category of transactions.<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"                      (string) Raw data for transaction<br>}<br><br>Examples:<br> dash-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> dash-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in DASH<br>  \"privatesend_balance\": xxxxxx, (numeric) the anonymized dash balance of the wallet in DASH<br>  \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed balance of the wallet in DASH<br>  \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet in DASH<br>  \"txcount\": xxxxxxx,         (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated (only counts external keys)<br>  \"keypoolsize_hd_internal\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)<br>  \"keys_left\": xxxx,          (numeric) how many new keys are left since last automatic backup<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee configuration, set in DASH/kB<br>  \"hdchainid\": \"<hash>\",      (string) the ID of the HD chain<br>  \"hdaccountcount\": xxx,      (numeric) how many accounts of the HD chain are in this wallet<br>    [<br>      {<br>      \"hdaccountindex\": xxx,         (numeric) the index of the account<br>      \"hdexternalkeyindex\": xxxx,    (numeric) current external childkey index<br>      \"hdinternalkeyindex\": xxxx,    (numeric) current internal childkey index<br>      }<br>      ,...<br>    ]<br>}<br><br>Examples:<br> dash-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"script\"           (string, required) The hex-encoded script (or address)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Note: This call can take minutes to complete if rescan is true.<br>If you have the full public key, you should call importpubkey instead of this.<br><br>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated<br>as change, and not show up in many RPCs.<br><br>Examples:<br><br>Import a script with rescan<br> dash-cli importaddress \"myscript\"<br><br>Import using a label without rescan<br> dash-cli importaddress \"myscript\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myscript\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "importelectrumwallet": "importelectrumwallet \"filename\" index<br><br>Imports keys from an Electrum wallet export file (.csv or .json)<br><br>Arguments:<br>1. \"filename\"    (string, required) The Electrum wallet export file, should be in csv or json format<br>2. index         (numeric, optional, default=0) Rescan the wallet for transactions starting from this block index<br><br>Examples:<br><br>Import the wallet<br> dash-cli importelectrumwallet \"test.csv\"<br> dash-cli importelectrumwallet \"test.json\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importelectrumwallet\", \"params\": [\"test.csv\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importelectrumwallet\", \"params\": [\"test.json\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "importmulti": "importmulti \"requests\" \"options\"<br><br>Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).<br><br>Arguments:<br>1. requests     (array, required) Data to be imported<br>  [     (array of json objects)<br>    {<br>      \"scriptPubKey\": \"<script>\" | { \"address\":\"<address>\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)<br>      \"timestamp\": timestamp | \"now\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),<br>                                                              or the string \"now\" to substitute the current synced blockchain time. The timestamp of the oldest<br>                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.<br>                                                              \"now\" can be specified to bypass scanning, for keys which are known to never have been used, and<br>                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key<br>                                                              creation time of all keys being imported by the importmulti call will be scanned.<br>      \"redeemscript\": \"<script>\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey<br>      \"pubkeys\": [\"<pubKey>\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript<br>      \"keys\": [\"<key>\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript<br>      \"internal\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments<br>      \"watchonly\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty<br>      \"label\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false<br>    }<br>  ,...<br>  ]<br>2. options                 (json, optional)<br>  {<br>     \"rescan\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports<br>  }<br><br>Examples:<br> dash-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'<br> dash-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'<br><br>Response is an array with the same size as the input that has the execution result :<br>  [{ \"success\": true } , { \"success\": false, \"error\": { \"code\": -1, \"message\": \"Internal Server Error\"} }, ... ]",
            "importprivkey": "importprivkey \"dashprivkey\" ( \"label\" ) ( rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet.<br><br>Arguments:<br>1. \"dashprivkey\"   (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Dump a private key<br> dash-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> dash-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> dash-cli importprivkey \"mykey\" \"testing\" false<br><br>Import using default blank label and without rescan<br> dash-cli importprivkey \"mykey\" \"\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "importprunedfunds": "importprunedfunds<br><br>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.<br><br>Arguments:<br>1. \"rawtransaction\" (string, required) A raw transaction in hex funding an already-existing address in wallet<br>2. \"txoutproof\"     (string, required) The hex output from gettxoutproof that contains the transaction",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"pubkey\"           (string, required) The hex-encoded public key<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Import a public key with rescan<br> dash-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> dash-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> dash-cli dumpwallet \"test\"<br><br>Import the wallet<br> dash-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "instantsendtoaddress": "instantsendtoaddress \"address\" amount ( \"comment\" \"comment-to\" subtractfeefromamount )<br><br>Send an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001<br><br>Arguments:<br>1. \"address\"     (string, required) The dash address to send to.<br>2. \"amount\"      (numeric, required) The amount in DASH to send. eg 0.1<br>3. \"comment\"     (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment_to\"  (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less amount of Dash than you enter in the amount field.<br><br>Result:<br>\"transactionid\"  (string) The transaction id.<br><br>Examples:<br> dash-cli instantsendtoaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 0.1<br> dash-cli instantsendtoaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 0.1 \"donation\" \"seans outpost\"<br> dash-cli instantsendtoaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 0.1 \"\" \"\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"instantsendtoaddress\", \"params\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "keepass": "keepass <genkey|init|setpassphrase>",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments:<br>1. newsize     (numeric, optional, default=1000) The new keypool size<br><br>Examples:<br> dash-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listaccounts": "listaccounts ( minconf addlocked include_watchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. addlocked           (bool, optional, default=false) Whether to include transactions locked via InstantSend.<br>3. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see 'importaddress')<br><br>Result:<br>{                    (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> dash-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> dash-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> dash-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listaddressbalances": "listaddressbalances ( minamount )<br><br>Lists addresses of this wallet and their balances<br><br>Arguments:<br>1. minamount               (numeric, optional, default=0) Minimum balance in DASH an address should have to be shown in the list<br><br>Result:<br>{<br>  \"address\": amount,       (string) The dash address and the amount in DASH<br>  ,...<br>}<br><br>Examples:<br> dash-cli listaddressbalances <br> dash-cli listaddressbalances 10<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressbalances\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressbalances\", \"params\": [10] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"address\",            (string) The dash address<br>      amount,                 (numeric) The amount in DASH<br>      \"account\"             (string, optional) DEPRECATED. The account<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> dash-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> dash-cli listunspent <br><br>Lock an unspent transaction<br> dash-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> dash-cli listlockunspent <br><br>Unlock the transaction again<br> dash-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listreceivedbyaccount": "listreceivedbyaccount ( minconf addlocked include_empty include_watchonly)<br><br>DEPRECATED. List incoming payments grouped by account.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. addlocked         (bool, optional, default=false) Whether to include transactions locked via InstantSend.<br>3. include_empty     (bool, optional, default=false) Whether to include accounts that haven't received any payments.<br>4. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",    (string) The account name of the receiving account<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account<br>    \"confirmations\" : n           (numeric) The number of blockchain confirmations of the most recent transaction included<br>    \"label\" : \"label\"             (string) A comment for the address/transaction, if any<br>  }<br>  ,...<br>]<br><br>Examples:<br> dash-cli listreceivedbyaccount <br> dash-cli listreceivedbyaccount 6 false true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, false, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf addlocked include_empty include_watchonly)<br><br>List incoming payments grouped by receiving address.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. addlocked         (bool, optional, default=false) Whether to include transactions locked via InstantSend.<br>3. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.<br>4. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",    (string) The receiving address<br>    \"account\" : \"accountname\",         (string) DEPRECATED. The account of the receiving address. The default account is \"\".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in DASH received by the address<br>    \"confirmations\" : n                (numeric) The number of confirmations of the most recent transaction included.<br>                                                 If 'addlocked' is true, the number of confirmations can be less than<br>                                                 configured for transactions locked via InstantSend<br>    \"label\" : \"label\",               (string) A comment for the address/transaction, if any<br>    \"txids\": [<br>       n,                                (numeric) The ids of transactions received with the address <br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> dash-cli listreceivedbyaddress <br> dash-cli listreceivedbyaddress 6 false true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, false, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listsinceblock": "listsinceblock ( \"blockhash\" target_confirmations include_watchonly)<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted<br><br>Arguments:<br>1. \"blockhash\"            (string, optional) The block hash to list transactions since<br>2. target_confirmations:    (numeric, optional) The confirmations required, must be 1 or more<br>3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",  (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.<br>    \"address\":\"address\",    (string) The dash address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",  (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in DASH. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in DASH. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\" : n,      (numeric) The number of blockchain confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>                                          When it's < 0, it means the transaction conflicted that many blocks ago.<br>    \"instantlock\" : true|false, (bool) Current transaction lock state. Available for 'send' and 'receive' category of transactions.<br>    \"instantlock_internal\" : true|false, (bool) Current internal transaction lock state. Available for 'send' and 'receive' category of transactions.<br>    \"chainlock\" : true|false, (bool) The state of the corresponding block chainlock<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"abandoned\": xxx,         (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.<br>    \"comment\": \"...\",         (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"         (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",              (string) If a comment to is associated with the transaction.<br>  ],<br>  \"lastblock\": \"lastblockhash\"  (string) The hash of the last block<br>}<br><br>Examples:<br> dash-cli listsinceblock <br> dash-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listtransactions": "listtransactions ( \"account\" count skip include_watchonly)<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count            (numeric, optional, default=10) The number of transactions to return<br>3. skip           (numeric, optional, default=0) The number of transactions to skip<br>4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",  (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \"\" for the default account.<br>    \"address\":\"address\",    (string) The dash address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. 'send' and 'receive' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in DASH. This is negative for the 'send' category, and for the<br>                                         'move' category for moves outbound. It is positive for the 'receive' category,<br>                                         and for the 'move' category for inbound funds.<br>    \"label\": \"label\",       (string) A comment for the address/transaction, if any<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in DASH. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of blockchain confirmations for the transaction. Available for 'send' and <br>                                         'receive' category of transactions. Negative confirmations indicate the<br>                                         transation conflicts with the block chain<br>    \"instantlock\" : true|false, (bool) Current transaction lock state. Available for 'send' and 'receive' category of transactions.<br>    \"instantlock_internal\" : true|false, (bool) Current internal transaction lock state. Available for 'send' and 'receive' category of transactions.<br>    \"chainlock\" : true|false, (bool) The state of the corresponding block chainlock<br>    \"trusted\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",         (string) If a comment is associated with the transaction.<br>    \"otheraccount\": \"accountname\",  (string) DEPRECATED. For the 'move' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                         'send' category of transactions.<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> dash-cli listtransactions <br><br>List transactions 100 to 120<br> dash-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "listunspent": "listunspent ( minconf maxconf  [\"addresses\",...] [include_unsafe] )<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"      (string) A json array of dash addresses to filter<br>    [<br>      \"address\"     (string) dash address<br>      ,...<br>    ]<br>4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend<br>                  See description of \"safe\" attribute below.<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",    (string) the dash address<br>    \"account\" : \"account\",    (string) DEPRECATED. The associated account, or \"\" for the default account<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction output amount in DASH<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH<br>    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output<br>    \"solvable\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys<br>    \"safe\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions<br>                              from outside keys and unconfirmed replacement transactions are considered unsafe<br>                              and are not eligible for spending by fundrawtransaction and sendtoaddress.<br>    \"ps_rounds\" : n           (numeric) The number of PS rounds<br>  }<br>  ,...<br>]<br><br>Examples:<br> dash-cli listunspent <br> dash-cli listunspent 6 9999999 \"[\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\",\"XuQQkwA4FYkq2XERzMY2CiAZhJTEDAbtcg\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\",\"XuQQkwA4FYkq2XERzMY2CiAZhJTEDAbtcg\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "lockunspent": "lockunspent unlock ([{\"txid\":\"txid\",\"vout\":n},...])<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.<br>A locked transaction output will not be chosen by automatic coin selection, when spending dashs.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> dash-cli listunspent <br><br>Lock an unspent transaction<br> dash-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> dash-cli listlockunspent <br><br>Unlock the transaction again<br> dash-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"    (string, required) The name of the account to move funds from. May be the default account using \"\".<br>2. \"toaccount\"      (string, required) The name of the account to move funds to. May be the default account using \"\".<br>3. amount           (numeric) Quantity of DASH to move between accounts.<br>4. (dummy)          (numeric, optional) Ignored. Remains for backward compatibility.<br>5. \"comment\"        (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false          (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 DASH from the default account to the account named tabby<br> dash-cli move \"\" \"tabby\" 0.01<br><br>Move 0.01 DASH timotei to akiko with a comment and funds have 6 confirmations<br> dash-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "removeprunedfunds": "removeprunedfunds \"txid\"<br><br>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.<br><br>Arguments:<br>1. \"txid\"           (string, required) The hex-encoded id of the transaction you are deleting<br><br>Examples:<br> dash-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "sendfrom": "sendfrom \"fromaccount\" \"toaddress\" amount ( minconf addlocked \"comment\" \"comment_to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a dash address.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) The name of the account to send funds from. May be the default account using \"\".<br>                       Specifying an account does not influence coin selection, but it does associate the newly created<br>                       transaction with the account, so the account's balance computation and transaction history can reflect<br>                       the spend.<br>2. \"toaddress\"         (string, required) The dash address to send funds to.<br>3. amount              (numeric or string, required) The amount in DASH (transaction fee is added on top).<br>4. minconf             (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. addlocked         (bool, optional, default=false) Whether to include transactions locked via InstantSend.<br>6. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                       This is not part of the transaction, just kept in your wallet.<br>7. \"comment_to\"        (string, optional) An optional comment to store the name of the person or organization <br>                       to which you're sending the transaction. This is not part of the transaction, <br>                       it is just kept in your wallet.<br><br>Result:<br>\"txid\"                 (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 DASH from the default account to the address, must have at least 1 confirmation<br> dash-cli sendfrom \"\" \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> dash-cli sendfrom \"tabby\" \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 0.01 6 false \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\", 0.01, 6, false, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf addlocked \"comment\" [\"address\",...] subtractfeefromamount use_is use_ps )<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br><br>Arguments:<br>1. \"fromaccount\"           (string, required) DEPRECATED. The account to send the funds from. Should be \"\" for the default account<br>2. \"amounts\"               (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount     (numeric or string) The dash address is the key, the numeric amount (can be string) in DASH is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. addlocked               (bool, optional, default=false) Whether to include transactions locked via InstantSend.<br>5. \"comment\"               (string, optional) A comment<br>6. subtractfeefromamount   (array, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less dashs than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"          (string) Subtract fee from this address<br>      ,...<br>    ]<br>7. \"use_is\"                (bool, optional, default=false) Send this transaction as InstantSend<br>8. \"use_ps\"                (bool, optional, default=false) Use anonymized funds only<br><br>Result:<br>\"txid\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> dash-cli sendmany \"tabby\" \"{\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\":0.01,\"XuQQkwA4FYkq2XERzMY2CiAZhJTEDAbtcG\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> dash-cli sendmany \"tabby\" \"{\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\":0.01,\"XuQQkwA4FYkq2XERzMY2CiAZhJTEDAbtcG\":0.02}\" 6 false \"testing\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"tabby\", \"{\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\":0.01,\"XuQQkwA4FYkq2XERzMY2CiAZhJTEDAbtcG\":0.02}\", 6, false, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "sendtoaddress": "sendtoaddress \"address\" amount ( \"comment\" \"comment_to\" subtractfeefromamount use_is use_ps )<br><br>Send an amount to a given address.<br><br>Arguments:<br>1. \"address\"            (string, required) The dash address to send to.<br>2. \"amount\"             (numeric or string, required) The amount in DASH to send. eg 0.1<br>3. \"comment\"            (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment_to\"         (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less amount of Dash than you enter in the amount field.<br>6. \"use_is\"             (bool, optional, default=false) Send this transaction as InstantSend<br>7. \"use_ps\"             (bool, optional, default=false) Use anonymized funds only<br><br>Result:<br>\"txid\"                  (string) The transaction id.<br><br>Examples:<br> dash-cli sendtoaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 0.1<br> dash-cli sendtoaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 0.1 \"donation\" \"seans outpost\"<br> dash-cli sendtoaddress \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" 0.1 \"\" \"\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "setaccount": "setaccount \"address\" \"account\"<br><br>DEPRECATED. Sets the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The dash address to be associated with an account.<br>2. \"account\"         (string, required) The account to assign the address to.<br><br>Examples:<br> dash-cli setaccount \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "setprivatesendamount": "setprivatesendamount amount<br><br>Set the goal amount in DASH for PrivateSend mixing.<br><br>Arguments:<br>1. amount         (numeric, required) The default amount is 1000 Cannot be more than 21000000 nor less than 2<br>Examples:<br> dash-cli setprivatesendamount 500<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setprivatesendamount\", \"params\": [208] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "setprivatesendrounds": "setprivatesendrounds rounds<br><br>Set the number of rounds for PrivateSend mixing.<br><br>Arguments:<br>1. rounds         (numeric, required) The default number of rounds is 4 Cannot be more than 16 nor less than 2<br>Examples:<br> dash-cli setprivatesendrounds 4<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setprivatesendrounds\", \"params\": [16] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB. Overwrites the paytxfee parameter.<br><br>Arguments:<br>1. amount         (numeric or string, required) The transaction fee in DASH/kB<br><br>Result:<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> dash-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/",
            "signmessage": "signmessage \"address\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"address\"         (string, required) The dash address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> dash-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> dash-cli signmessage \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" \"my message\"<br><br>Verify the signature<br> dash-cli verifymessage \"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:19001/"
        },
        "doge": {
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest blockchain.<br><br>Result:<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples:<br> dogecoin-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblock": "getblock \"blockhash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbose is true, returns an Object with information about block <hash>.<br><br>Arguments:<br>1. \"blockhash\"          (string, required) The block hash<br>2. verbose                (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"strippedsize\" : n,    (numeric) The block size excluding witness data<br>  \"weight\" : n           (numeric) The block weight as defined in BIP 141<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> dogecoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding blockchain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",        (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\", (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,     (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,     (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"initialblockdownload\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.<br>  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal<br>  \"pruned\": xx,             (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,    (numeric) lowest-height complete block stored<br>  \"softforks\": [            (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",        (string) name of softfork<br>        \"version\": xx,         (numeric) block version<br>        \"reject\": {            (object) progress toward rejecting pre-softfork blocks<br>           \"status\": xx,       (boolean) true if threshold reached<br>        },<br>     }, ...<br>  ],<br>  \"bip9_softforks\": {          (object) status of BIP9 softforks in progress<br>     \"xxxx\" : {                (string) name of the softfork<br>        \"status\": \"xxxx\",    (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"<br>        \"bit\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)<br>        \"startTime\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning<br>        \"timeout\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in<br>        \"since\": xx            (numeric) height of the first block to which the status applies<br>     }<br>  }<br>}<br><br>Examples:<br> dogecoin-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest blockchain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> dogecoin-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash height<br><br>Returns hash of block in best-block-chain at height provided.<br><br>Arguments:<br>1. height         (numeric, required) The height index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> dogecoin-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> dogecoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> dogecoin-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> dogecoin-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolancestors": "getmempoolancestors txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool ancestors.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in DOGE<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> dogecoin-cli getmempoolancestors \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempooldescendants": "getmempooldescendants txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool descendants.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in DOGE<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> dogecoin-cli getmempooldescendants \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolentry": "getmempoolentry txid<br><br>Returns mempool data for given transaction<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br><br>Result:<br>{                           (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in DOGE<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>}<br><br>Examples:<br> dogecoin-cli getmempoolentry \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum fee for tx to be accepted<br>}<br><br>Examples:<br> dogecoin-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Hint: use getmempoolentry to fetch a specific transaction from the mempool.<br><br>Arguments:<br>1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in DOGE<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> dogecoin-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxout": "gettxout \"txid\" n ( include_mempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id<br>2. n              (numeric, required) vout number<br>3. include_mempool  (boolean, optional) Whether to include the mempool<br><br>Result:<br>{<br>  \"bestblock\" : \"hash\",    (string) the block hash<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in DOGE<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of dogecoin addresses<br>        \"address\"     (string) dogecoin address<br>        ,...<br>     ]<br>  },<br>  \"version\" : n,            (numeric) The version<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> dogecoin-cli listunspent <br><br>View the details<br> dogecoin-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included manually (by blockhash).<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"blockhash\"   (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) the best block hash hex<br>  \"transactions\": n,      (numeric) The number of transactions<br>  \"txouts\": n,            (numeric) The number of output transactions<br>  \"bytes_serialized\": n,  (numeric) The serialized size<br>  \"hash_serialized\": \"hash\",   (string) The serialized hash<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> dogecoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "preciousblock": "preciousblock \"blockhash\"<br><br>Treats a block as if it were received before others with the same work.<br><br>A later preciousblock call can override the effect of an earlier one.<br><br>The effects of preciousblock are not retained across restarts.<br><br>Arguments:<br>1. \"blockhash\"   (string, required) the hash of the block to mark as precious<br><br>Result:<br><br>Examples:<br> dogecoin-cli preciousblock \"blockhash\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "pruneblockchain": "pruneblockchain<br><br>Arguments:<br>1. \"height\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp<br>                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.<br><br>Result:<br>n    (numeric) Height of the last block pruned.<br><br>Examples:<br> dogecoin-cli pruneblockchain 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel nblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. nblocks      (numeric, optional, default=6, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> dogecoin-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid",
            "getinfo": "getinfo<br><br>DEPRECATED. Returns an object containing various state info.<br><br>Result:<br>{<br>  \"version\": xxxxx,           (numeric) the server version<br>  \"protocolversion\": xxxxx,   (numeric) the protocol version<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total dogecoin balance of the wallet<br>  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server<br>  \"timeoffset\": xxxxx,        (numeric) the time offset<br>  \"connections\": xxxxx,       (numeric) the number of connections<br>  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server<br>  \"difficulty\": xxxxxx,       (numeric) the current difficulty<br>  \"testnet\": true|false,      (boolean) if the server is using testnet or not<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in DOGE/kB<br>  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in DOGE/kB<br>  \"errors\": \"...\"           (string) any error messages<br>}<br><br>Examples:<br> dogecoin-cli getinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmemoryinfo": "getmemoryinfo<br>Returns an object containing information about memory usage.<br><br>Result:<br>{<br>  \"locked\": {               (json object) Information about locked memory manager<br>    \"used\": xxxxx,          (numeric) Number of bytes used<br>    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas<br>    \"total\": xxxxxxx,       (numeric) Total number of bytes managed<br>    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.<br>    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks<br>    \"chunks_free\": xxxxx,   (numeric) Number unused chunks<br>  }<br>}<br><br>Examples:<br> dogecoin-cli getmemoryinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "stop": "stop<br><br>Stop Dogecoin server.",
            "generate": "generate nblocks ( maxtries )<br><br>Mine up to nblocks blocks immediately (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> dogecoin-cli generate 11",
            "generatetoaddress": "generatetoaddress nblocks address (maxtries)<br><br>Mine blocks immediately to a specified address (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. address      (string, required) The address to send the newly generated dogecoin to.<br>3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks to myaddress<br> dogecoin-cli generatetoaddress 11 \"myaddress\"",
            "getauxblock": "getauxblock (hash auxpow)<br><br>Create or submit a merge-mined block.<br><br>Without arguments, create a new block and return information<br>required to merge-mine it.  With arguments, submit a solved<br>auxpow for a previously returned block.<br><br>Arguments:<br>1. hash      (string, optional) hash of the block to submit<br>2. auxpow    (string, optional) serialised auxpow found<br><br>Result (without arguments):<br>{<br>  \"hash\"               (string) hash of the created block<br>  \"chainid\"            (numeric) chain ID for this block<br>  \"previousblockhash\"  (string) hash of the previous block<br>  \"coinbasevalue\"      (numeric) value of the block's coinbase<br>  \"bits\"               (string) compressed target of the block<br>  \"height\"             (numeric) height of the block<br>  \"_target\"            (string) target in reversed byte order, deprecated<br>}<br><br>Result (with arguments):<br>xxxxx        (boolean) whether the submitted block was correct<br><br>Examples:<br> dogecoin-cli getauxblock <br> dogecoin-cli getauxblock \"hash\" \"serialised auxpow\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getauxblock\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblocktemplate": "getblocktemplate ( TemplateRequest )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>For full specification, see BIPs 22, 23, 9, and 145:<br>    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes<br>    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki<br><br>Arguments:<br>1. template_request         (json object, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted<br>       \"capabilities\":[     (array, optional) A list of strings<br>           \"support\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>       ],<br>       \"rules\":[            (array, optional) A list of strings<br>           \"support\"          (string) client side supported softfork deployment<br>           ,...<br>       ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The preferred block version<br>  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced<br>  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments<br>      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule<br>      ,...<br>  },<br>  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions<br>  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal<br>         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)<br>         \"depends\" : [                (array) array of numbers <br>             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero<br>         \"weight\" : n,                (numeric) total transaction weight, as counted for purposes of block limits<br>         \"required\" : true|false      (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig<br>  },<br>  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)<br>  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",                (string) The hash target<br>  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                     (array of string) list of ways the block template may be changed <br>     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"weightlimit\" : n,                (numeric) limit of block weight<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> dogecoin-cli getblocktemplate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblocksize\": nnn,   (numeric) The last block size<br>  \"currentblockweight\": nnn, (numeric) The last block weight<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"errors\": \"...\"            (string) Current errors<br>  \"networkhashps\": nnn,      (numeric) The network hashes per second<br>  \"pooledtx\": n              (numeric) The size of the mempool<br>  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)<br>}<br><br>Examples:<br> dogecoin-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( nblocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height      (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> dogecoin-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "prioritisetransaction": "prioritisetransaction <txid> <priority delta> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. priority_delta (numeric, required) The priority to add or subtract.<br>                  The transaction selection algorithm considers the tx as it would have a higher priority.<br>                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) <br>3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result:<br>true              (boolean) Returns true<br><br>Examples:<br> dogecoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\" ( \"jsonparametersobject\" )<br><br>Attempts to submit new block to network.<br>The 'jsonparametersobject' parameter is currently ignored.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"        (string, required) the hex-encoded block data to submit<br>2. \"parameters\"     (string, optional) object of optional parameters<br>    {<br>      \"workid\" : \"id\"    (string, optional) if the server provided a workid, it MUST be included with submissions<br>    }<br><br>Result:<br><br>Examples:<br> dogecoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts add or remove a node from the addnode list.<br>Or try a connection to a node once.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> dogecoin-cli addnode \"192.168.0.6:22556\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:22556\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> dogecoin-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "disconnectnode": "disconnectnode \"address\" <br><br>Immediately disconnects from the specified node.<br><br>Arguments:<br>1. \"address\"     (string, required) The IP address/port of the node<br><br>Examples:<br> dogecoin-cli disconnectnode \"192.168.0.6:22556\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:22556\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddednodeinfo": "getaddednodeinfo ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br><br>Arguments:<br>1. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node ip address or name (as provided to addnode)<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [                    (list of objects) Only when connected = true<br>       {<br>         \"address\" : \"192.168.0.201:22556\", (string) The dogecoin server IP and port we're connected to<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> dogecoin-cli getaddednodeinfo true<br> dogecoin-cli getaddednodeinfo true \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> dogecoin-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> dogecoin-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networkactive\": true|false,           (bool) whether p2p networking is enabled<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in DOGE/kB<br>  \"incrementalfee\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in DOGE/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network warnings<br>}<br><br>Examples:<br> dogecoin-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The ip address and port of the peer<br>    \"addrlocal\":\"ip:port\",   (string) local address<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time (if available)<br>    \"minping\": n,              (numeric) minimum observed ping time (if any at all)<br>    \"pingwait\": n,             (numeric) ping wait (if non-zero)<br>    \"version\": v,              (numeric) The peer version, such as 7001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"addnode\": true|false,     (boolean) Whether connection was due to addnode and is using an addnode slot<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ],<br>    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted<br>    \"bytessent_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes sent aggregated by message type<br>       ...<br>    },<br>    \"bytesrecv_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes received aggregated by message type<br>       ...<br>    }<br>  }<br>  ,...<br>]<br><br>Examples:<br> dogecoin-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> dogecoin-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> dogecoin-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setban": "setban \"subnet\" \"add|remove\" (bantime) (absolute)<br><br>Attempts add or remove a IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"subnet\"       (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)<br>2. \"command\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> dogecoin-cli setban \"192.168.0.6\" \"add\" 86400<br> dogecoin-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setnetworkactive": "setnetworkactive true|false<br><br>Disable/enable all p2p network activity.<br><br>Arguments:<br>1. \"state\"        (boolean, required) true to enable networking, false to disable",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,\"data\":\"hex\",...} ( locktime )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"inputs\"                (array, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",    (string, required) The transaction id<br>         \"vout\":n,         (numeric, required) The output number<br>         \"sequence\":n      (numeric, optional) The sequence number<br>       } <br>       ,...<br>     ]<br>2. \"outputs\"               (object, required) a json object with outputs<br>    {<br>      \"address\": x.xxx,    (numeric or string, required) The key is the dogecoin address, the numeric value (can be string) is the DOGE amount<br>      \"data\": \"hex\"      (string, required) The key is \"data\", the value is hex encoded data<br>      ,...<br>    }<br>3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br><br>Result:<br>\"transaction\"              (string) hex string of the transaction<br><br>Examples:<br> dogecoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"<br> dogecoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"data\":\"00010203\"}\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"data\":\"00010203\"}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\"<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hexstring\"      (string, required) The transaction hex string<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in DOGE<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"D731rRTrFydjJdZCKNzfB5go229p59GUGD\"   (string) dogecoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> dogecoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hexstring\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hexstring\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) dogecoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).<br>}<br><br>Examples:<br> dogecoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" ( options )<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add at most one change output to the outputs.<br>No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must be<br>in the wallet using importaddress or addmultisigaddress (to calculate fees).<br>You can see whether this is the case by checking the \"solvable\" field in the listunspent output.<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. \"hexstring\"           (string, required) The hex string of the raw transaction<br>2. options                 (object, optional)<br>   {<br>     \"changeAddress\"          (string, optional, default pool address) The dogecoin address to receive the change<br>     \"changePosition\"         (numeric, optional, default random) The index of the change output<br>     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only<br>     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs<br>     \"reserveChangeKey\"       (boolean, optional, default true) Reserves the change output key from the keypool<br>     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (DOGE per KB)<br>     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.<br>                              The fee will be equally deducted from the amount of each specified output.<br>                              The outputs are specified by their zero-based index, before any change output is added.<br>                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                              If no outputs are specified here, the sender pays the fee.<br>                                  [vout_index,...]<br>   }<br>                         for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee in DOGE the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> dogecoin-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> dogecoin-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> dogecoin-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> dogecoin-cli sendrawtransaction \"signedtransactionhex\"",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose )<br><br>NOTE: By default this function only works for mempool transactions. If the -txindex option is<br>enabled, it also works for blockchain transactions.<br>DEPRECATED: for now, it also works for transactions with unspent outputs.<br><br>Return the raw transaction data.<br><br>If verbose is 'true', returns an Object with information about 'txid'.<br>If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose       (bool, optional, default=false) If false, return a string, otherwise return a json object<br><br>Result (if verbose is not set or set to false):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose is set to true):<br>{<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The serialized transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in DOGE<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"address\"        (string) dogecoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> dogecoin-cli getrawtransaction \"mytxid\"<br> dogecoin-cli getrawtransaction \"mytxid\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> dogecoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> dogecoin-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> dogecoin-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\",   (string, required for P2SH or P2WSH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"privkeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> dogecoin-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"       (string, required) A json array of keys which are dogecoin addresses or hex-encoded public keys<br>     [<br>       \"key\"    (string) dogecoin address or hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 addresses<br> dogecoin-cli createmultisig 2 \"[\"DB1Y8APJPE9K1kfYeuGPcbtyK7uruTNFa9\",\"DB9yDzihrJJBZ7mEUuGRAz7bJbh5jQJexj\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"DB1Y8APJPE9K1kfYeuGPcbtyK7uruTNFa9\",\"DB9yDzihrJJBZ7mEUuGRAz7bJbh5jQJexj\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "estimatefee": "estimatefee nblocks<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks. Uses virtual transaction size of transaction<br>as defined in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. nblocks     (numeric, required)<br><br>Result:<br>n              (numeric) estimated fee-per-kilobyte<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br>-1 is always returned for nblocks == 1 as it is impossible to calculate<br>a fee that is high enough to get reliably included in the next block.<br><br>Example:<br> dogecoin-cli estimatefee 6",
            "estimatepriority": "estimatepriority nblocks<br><br>DEPRECATED. Estimates the approximate priority a zero-fee transaction needs to begin<br>confirmation within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric, required)<br><br>Result:<br>n              (numeric) estimated priority<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br><br>Example:<br> dogecoin-cli estimatepriority 6",
            "estimatesmartfee": "estimatesmartfee nblocks<br><br>WARNING: This interface is unstable and may disappear or change!<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks if possible and return the number of blocks<br>for which the estimate is valid. Uses virtual transaction size as defined<br>in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>{<br>  \"feerate\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br>However it will not return a value below the mempool reject fee.<br><br>Example:<br> dogecoin-cli estimatesmartfee 6",
            "estimatesmartpriority": "estimatesmartpriority nblocks<br><br>DEPRECATED. WARNING: This interface is unstable and may disappear or change!<br><br>Estimates the approximate priority a zero-fee transaction needs to begin<br>confirmation within nblocks blocks if possible and return the number of blocks<br>for which the estimate is valid.<br><br>Arguments:<br>1. nblocks     (numeric, required)<br><br>Result:<br>{<br>  \"priority\" : x.x,    (numeric) estimated priority<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br>However if the mempool reject fee is set it will return 1e9 * MAX_MONEY.<br><br>Example:<br> dogecoin-cli estimatesmartpriority 6",
            "signmessagewithprivkey": "signmessagewithprivkey \"privkey\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"privkey\"         (string, required) The private key to sign the message with.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Create the signature<br> dogecoin-cli signmessagewithprivkey \"privkey\" \"my message\"<br><br>Verify the signature<br> dogecoin-cli verifymessage \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "validateaddress": "validateaddress \"address\"<br><br>Return information about the given dogecoin address.<br><br>Arguments:<br>1. \"address\"     (string, required) The dogecoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"address\", (string) The dogecoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key<br>  \"iscompressed\" : true|false,  (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \"\" is the default account<br>  \"timestamp\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)<br>  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available<br>  \"hdmasterkeyid\" : \"<hash160>\" (string, optional) The Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> dogecoin-cli validateaddress \"DTaXouBvXCDfViRZzSCaVNQBAyt1D9zThT\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"DTaXouBvXCDfViRZzSCaVNQBAyt1D9zThT\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"address\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"address\"         (string, required) The dogecoin address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> dogecoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> dogecoin-cli signmessage \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\" \"my message\"<br><br>Verify the signature<br> dogecoin-cli verifymessage \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already conflicted or abandoned.<br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br><br>Result:<br><br>Examples:<br> dogecoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"account\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet.<br>Each key is a Dogecoin address or hex-encoded public key.<br>If 'account' is specified (DEPRECATED), assign address to that account.<br><br>Arguments:<br>1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"         (string, required) A json array of dogecoin addresses or hex-encoded public keys<br>     [<br>       \"address\"  (string) dogecoin address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"account\"      (string, optional) DEPRECATED. An account to assign the addresses to.<br><br>Result:<br>\"address\"         (string) A dogecoin address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> dogecoin-cli addmultisigaddress 2 \"[\"DB1Y8APJPE9K1kfYeuGPcbtyK7uruTNFa9\",\"DB9yDzihrJJBZ7mEUuGRAz7bJbh5jQJexj\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"DB1Y8APJPE9K1kfYeuGPcbtyK7uruTNFa9\",\"DB9yDzihrJJBZ7mEUuGRAz7bJbh5jQJexj\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addwitnessaddress": "addwitnessaddress \"address\"<br><br>Add a witness address for a script (with pubkey or redeemscript known).<br>It returns the witness script.<br><br>Arguments:<br>1. \"address\"       (string, required) An address known to the wallet<br><br>Result:<br>\"witnessaddress\",  (string) The value of the new address (P2SH of witness script).<br>}",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies current wallet file to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> dogecoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "bumpfee": "bumpfee \"txid\" ( options ) <br><br>Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.<br>An opt-in RBF transaction with the given txid must be in the wallet.<br>The command will pay the additional fee by decreasing (or perhaps removing) its change output.<br>If the change output is not big enough to cover the increased fee, the command will currently fail<br>instead of adding new inputs to compensate. (A future implementation could improve this.)<br>The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.<br>By default, the new fee will be calculated automatically using estimatefee.<br>The user can specify a confirmation target for estimatefee.<br>Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.<br>At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee<br>returned by getnetworkinfo) to enter the node's mempool.<br><br>Arguments:<br>1. txid                  (string, required) The txid to be bumped<br>2. options               (object, optional)<br>   {<br>     \"confTarget\"        (numeric, optional) Confirmation target (in blocks)<br>     \"totalFee\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.<br>                         In rare cases, the actual fee paid might be slightly higher than the specified<br>                         totalFee if the tx change output has to be removed because it is too close to<br>                         the dust threshold.<br>     \"replaceable\"       (boolean, optional, default true) Whether the new transaction should still be<br>                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will<br>                         be left unchanged from the original. If false, any input sequence numbers in the<br>                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe<br>                         so the new transaction will not be explicitly bip-125 replaceable (though it may<br>                         still be replacable in practice, for example if it has unconfirmed ancestors which<br>                         are replaceable).<br>   }<br><br>Result:<br>{<br>  \"txid\":    \"value\",   (string)  The id of the new transaction<br>  \"origfee\":  n,         (numeric) Fee of the replaced transaction<br>  \"fee\":      n,         (numeric) Fee of the new transaction<br>  \"errors\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)<br>}<br><br>Examples:<br><br>Bump the fee, get the new transaction's txid<br> dogecoin-cli bumpfee <txid>",
            "dumpprivkey": "dumpprivkey \"address\"<br><br>Reveals the private key corresponding to 'address'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"address\"   (string, required) The dogecoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> dogecoin-cli dumpprivkey \"myaddress\"<br> dogecoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format.<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename<br><br>Examples:<br> dogecoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt you wallet<br> dogecoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending dogecoin<br> dogecoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can so something like sign<br> dogecoin-cli signmessage \"address\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> dogecoin-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccount": "getaccount \"address\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The dogecoin address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> dogecoin-cli getaccount \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccountaddress": "getaccountaddress \"account\"<br><br>DEPRECATED. Returns the current Dogecoin address for receiving payments to this account.<br><br>Arguments:<br>1. \"account\"       (string, required) The account name for the address. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.<br><br>Result:<br>\"address\"          (string) The account dogecoin address<br><br>Examples:<br> dogecoin-cli getaccountaddress <br> dogecoin-cli getaccountaddress \"\"<br> dogecoin-cli getaccountaddress \"myaccount\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"        (string, required) The account name.<br><br>Result:<br>[                     (json array of string)<br>  \"address\"         (string) a dogecoin address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> dogecoin-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"account\" minconf include_watchonly )<br><br>If account is not specified, returns the server's total available balance.<br>If account is specified (DEPRECATED), returns the balance in the account.<br>Note that the account \"\" is not the same as leaving the parameter out.<br>The server total may be different to the balance in the default \"\" account.<br><br>Arguments:<br>1. \"account\"         (string, optional) DEPRECATED. The account string may be given as a<br>                     specific account name to find the balance associated with wallet keys in<br>                     a named account, or as the empty string (\"\") to find the balance<br>                     associated with wallet keys not in any named account, or as \"*\" to find<br>                     the balance associated with all wallet keys regardless of account.<br>                     When this option is specified, it calculates the balance in a different<br>                     way than when it is not specified, and which can count spends twice when<br>                     there are conflicting pending transactions (such as those created by<br>                     the bumpfee command), temporarily resulting in low or even negative<br>                     balances. In general, account balance calculation is not considered<br>                     reliable and has resulted in confusing outcomes, so it is recommended to<br>                     avoid passing this argument.<br>2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in DOGE received for this account.<br><br>Examples:<br><br>The total amount in the wallet<br> dogecoin-cli getbalance <br><br>The total amount in the wallet at least 5 blocks confirmed<br> dogecoin-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"account\" )<br><br>Returns a new Dogecoin address for receiving payments.<br>If 'account' is specified (DEPRECATED), it is added to the address book <br>so payments received with the address will be credited to 'account'.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \"\" is used. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.<br><br>Result:<br>\"address\"    (string) The new dogecoin address<br><br>Examples:<br> dogecoin-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress<br><br>Returns a new Dogecoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> dogecoin-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaccount": "getreceivedbyaccount \"account\" ( minconf )<br><br>DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. \"account\"      (string, required) The selected account, may be the default account using \"\".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in DOGE received for this account.<br><br>Examples:<br><br>Amount received by the default account with at least 1 confirmation<br> dogecoin-cli getreceivedbyaccount \"\"<br><br>Amount received at the tabby account including unconfirmed amounts with zero confirmations<br> dogecoin-cli getreceivedbyaccount \"tabby\" 0<br><br>The amount with at least 6 confirmation, very safe<br> dogecoin-cli getreceivedbyaccount \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaddress": "getreceivedbyaddress \"address\" ( minconf )<br><br>Returns the total amount received by the given address in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"address\"         (string, required) The dogecoin address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in DOGE received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> dogecoin-cli getreceivedbyaddress \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> dogecoin-cli getreceivedbyaddress \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\" 0<br><br>The amount with at least 6 confirmation, very safe<br> dogecoin-cli getreceivedbyaddress \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( include_watchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"                  (string, required) The transaction id<br>2. \"include_watchonly\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in DOGE<br>  \"fee\": x.xxx,            (numeric) The amount of the fee in DOGE. This is negative and only available for the <br>                              'send' category of transactions.<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",      (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.<br>      \"address\" : \"address\",          (string) The dogecoin address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx,                 (numeric) The amount in DOGE<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                       (numeric) the vout value<br>      \"fee\": x.xxx,                     (numeric) The amount of the fee in DOGE. This is negative and only available for the <br>                                           'send' category of transactions.<br>      \"abandoned\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                           'send' category of transactions.<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> dogecoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> dogecoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletversion\": xxxxx,       (numeric) the wallet version<br>  \"balance\": xxxxxxx,           (numeric) the total confirmed balance of the wallet in DOGE<br>  \"unconfirmed_balance\": xxx,   (numeric) the total unconfirmed balance of the wallet in DOGE<br>  \"immature_balance\": xxxxxx,   (numeric) the total immature balance of the wallet in DOGE<br>  \"txcount\": xxxxxxx,           (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,      (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,          (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,           (numeric) the transaction fee configuration, set in DOGE/kB<br>  \"hdmasterkeyid\": \"<hash160>\" (string) the Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> dogecoin-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"script\"           (string, required) The hex-encoded script (or address)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Note: This call can take minutes to complete if rescan is true.<br>If you have the full public key, you should call importpubkey instead of this.<br><br>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated<br>as change, and not show up in many RPCs.<br><br>Examples:<br><br>Import a script with rescan<br> dogecoin-cli importaddress \"myscript\"<br><br>Import using a label without rescan<br> dogecoin-cli importaddress \"myscript\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myscript\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importmulti": "importmulti \"requests\" \"options\"<br><br>Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).<br><br>Arguments:<br>1. requests     (array, required) Data to be imported<br>  [     (array of json objects)<br>    {<br>      \"scriptPubKey\": \"<script>\" | { \"address\":\"<address>\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)<br>      \"timestamp\": timestamp | \"now\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),<br>                                                              or the string \"now\" to substitute the current synced blockchain time. The timestamp of the oldest<br>                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.<br>                                                              \"now\" can be specified to bypass scanning, for keys which are known to never have been used, and<br>                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key<br>                                                              creation time of all keys being imported by the importmulti call will be scanned.<br>      \"redeemscript\": \"<script>\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey<br>      \"pubkeys\": [\"<pubKey>\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript<br>      \"keys\": [\"<key>\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript<br>      \"internal\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments<br>      \"watchonly\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty<br>      \"label\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false<br>    }<br>  ,...<br>  ]<br>2. options                 (json, optional)<br>  {<br>     \"rescan\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports<br>  }<br><br>Examples:<br> dogecoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'<br> dogecoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'<br><br>Response is an array with the same size as the input that has the execution result :<br>  [{ \"success\": true } , { \"success\": false, \"error\": { \"code\": -1, \"message\": \"Internal Server Error\"} }, ... ]",
            "importprivkey": "importprivkey \"bitcoinprivkey\" ( \"label\" ) ( rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet.<br><br>Arguments:<br>1. \"dogecoinprivkey\"  (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Dump a private key<br> dogecoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> dogecoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> dogecoin-cli importprivkey \"mykey\" \"testing\" false<br><br>Import using default blank label and without rescan<br> dogecoin-cli importprivkey \"mykey\" \"\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprunedfunds": "importprunedfunds<br><br>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.<br><br>Arguments:<br>1. \"rawtransaction\" (string, required) A raw transaction in hex funding an already-existing address in wallet<br>2. \"txoutproof\"     (string, required) The hex output from gettxoutproof that contains the transaction",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"pubkey\"           (string, required) The hex-encoded public key<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Import a public key with rescan<br> dogecoin-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> dogecoin-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> dogecoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> dogecoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> dogecoin-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaccounts": "listaccounts ( minconf include_watchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see 'importaddress')<br><br>Result:<br>{                      (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> dogecoin-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> dogecoin-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> dogecoin-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"address\",            (string) The dogecoin address<br>      amount,                 (numeric) The amount in DOGE<br>      \"account\"             (string, optional) DEPRECATED. The account<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> dogecoin-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> dogecoin-cli listunspent <br><br>Lock an unspent transaction<br> dogecoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> dogecoin-cli listlockunspent <br><br>Unlock the transaction again<br> dogecoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaccount": "listreceivedbyaccount ( minconf include_empty include_watchonly)<br><br>DEPRECATED. List balances by account.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include accounts that haven't received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",  (string) The account name of the receiving account<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account<br>    \"confirmations\" : n,          (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"           (string) A comment for the address/transaction, if any<br>  }<br>  ,...<br>]<br><br>Examples:<br> dogecoin-cli listreceivedbyaccount <br> dogecoin-cli listreceivedbyaccount 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf include_empty include_watchonly)<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. The account of the receiving address. The default account is \"\".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in DOGE received by the address<br>    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\",               (string) A comment for the address/transaction, if any<br>    \"txids\": [<br>       n,                                (numeric) The ids of transactions received with the address <br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> dogecoin-cli listreceivedbyaddress <br> dogecoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listsinceblock": "listsinceblock ( \"blockhash\" target_confirmations include_watchonly)<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted<br><br>Arguments:<br>1. \"blockhash\"            (string, optional) The block hash to list transactions since<br>2. target_confirmations:    (numeric, optional) The confirmations required, must be 1 or more<br>3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.<br>    \"address\":\"address\",    (string) The dogecoin address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in DOGE. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in DOGE. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>                                          When it's < 0, it means the transaction conflicted that many blocks ago.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx,         (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"       (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the last block<br>}<br><br>Examples:<br> dogecoin-cli listsinceblock <br> dogecoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions ( \"account\" count skip include_watchonly)<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.<br><br>Arguments:<br>1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. skip           (numeric, optional, default=0) The number of transactions to skip<br>4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \"\" for the default account.<br>    \"address\":\"address\",    (string) The dogecoin address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. 'send' and 'receive' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in DOGE. This is negative for the 'send' category, and for the<br>                                         'move' category for moves outbound. It is positive for the 'receive' category,<br>                                         and for the 'move' category for inbound funds.<br>    \"label\": \"label\",       (string) A comment for the address/transaction, if any<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in DOGE. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and <br>                                         'receive' category of transactions. Negative confirmations indicate the<br>                                         transaction conflicts with the block chain<br>    \"trusted\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"otheraccount\": \"accountname\",  (string) DEPRECATED. For the 'move' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                     may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                         'send' category of transactions.<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> dogecoin-cli listtransactions <br><br>List transactions 100 to 120<br> dogecoin-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf  [\"addresses\",...] [include_unsafe] )<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"    (string) A json array of dogecoin addresses to filter<br>    [<br>      \"address\"   (string) dogecoin address<br>      ,...<br>    ]<br>4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend<br>                  because they come from unconfirmed untrusted transactions or unconfirmed<br>                  replacement transactions (cases where we are less sure that a conflicting<br>                  transaction won't be mined).<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",    (string) the dogecoin address<br>    \"account\" : \"account\",    (string) DEPRECATED. The associated account, or \"\" for the default account<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction output amount in DOGE<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH<br>    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output<br>    \"solvable\" : xxx          (bool) Whether we know how to spend this output, ignoring the lack of keys<br>  }<br>  ,...<br>]<br><br>Examples<br> dogecoin-cli listunspent <br> dogecoin-cli listunspent 6 9999999 \"[\"DTQMNVwK4pWyYgVonSZdHmHzFrnBprsnR6\",\"DR32NTWp7eXkoFwR3wLcue4LVi4MtYvj6k\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"DTQMNVwK4pWyYgVonSZdHmHzFrnBprsnR6\",\"DR32NTWp7eXkoFwR3wLcue4LVi4MtYvj6k\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock ([{\"txid\":\"txid\",\"vout\":n},...])<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.<br>A locked transaction output will not be chosen by automatic coin selection, when spending dogecoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> dogecoin-cli listunspent <br><br>Lock an unspent transaction<br> dogecoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> dogecoin-cli listlockunspent <br><br>Unlock the transaction again<br> dogecoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"   (string, required) The name of the account to move funds from. May be the default account using \"\".<br>2. \"toaccount\"     (string, required) The name of the account to move funds to. May be the default account using \"\".<br>3. amount            (numeric) Quantity of DOGE to move between accounts.<br>4. (dummy)           (numeric, optional) Ignored. Remains for backward compatibility.<br>5. \"comment\"       (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false           (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 DOGE from the default account to the account named tabby<br> dogecoin-cli move \"\" \"tabby\" 0.01<br><br>Move 0.01 DOGE timotei to akiko with a comment and funds have 6 confirmations<br> dogecoin-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "removeprunedfunds": "removeprunedfunds \"txid\"<br><br>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.<br><br>Arguments:<br>1. \"txid\"           (string, required) The hex-encoded id of the transaction you are deleting<br><br>Examples:<br> dogecoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendfrom": "sendfrom \"fromaccount\" \"toaddress\" amount ( minconf \"comment\" \"comment_to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a dogecoin address.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) The name of the account to send funds from. May be the default account using \"\".<br>                       Specifying an account does not influence coin selection, but it does associate the newly created<br>                       transaction with the account, so the account's balance computation and transaction history can reflect<br>                       the spend.<br>2. \"toaddress\"         (string, required) The dogecoin address to send funds to.<br>3. amount                (numeric or string, required) The amount in DOGE (transaction fee is added on top).<br>4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                                     This is not part of the transaction, just kept in your wallet.<br>6. \"comment_to\"        (string, optional) An optional comment to store the name of the person or organization <br>                                     to which you're sending the transaction. This is not part of the transaction, <br>                                     it is just kept in your wallet.<br><br>Result:<br>\"txid\"                 (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 DOGE from the default account to the address, must have at least 1 confirmation<br> dogecoin-cli sendfrom \"\" \"DRF7yvmFHR5gMXRtijkbkPzmLYnMfTYMGZ\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> dogecoin-cli sendfrom \"tabby\" \"DRF7yvmFHR5gMXRtijkbkPzmLYnMfTYMGZ\" 0.01 6 \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"DRF7yvmFHR5gMXRtijkbkPzmLYnMfTYMGZ\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br><br>Arguments:<br>1. \"fromaccount\"         (string, required) DEPRECATED. The account to send the funds from. Should be \"\" for the default account<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric or string) The dogecoin address is the key, the numeric amount (can be string) in DOGE is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefrom         (array, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less dogecoins than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"          (string) Subtract fee from this address<br>      ,...<br>    ]<br><br>Result:<br>\"txid\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> dogecoin-cli sendmany \"\" \"{\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> dogecoin-cli sendmany \"\" \"{\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> dogecoin-cli sendmany \"\" \"{\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \"\" \"[\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"address\" amount ( \"comment\" \"comment_to\" subtractfeefromamount )<br><br>Send an amount to a given address.<br><br>Arguments:<br>1. \"address\"            (string, required) The dogecoin address to send to.<br>2. \"amount\"             (numeric or string, required) The amount in DOGE to send. eg 0.1<br>3. \"comment\"            (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment_to\"         (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less dogecoins than you enter in the amount field.<br><br>Result:<br>\"txid\"                  (string) The transaction id.<br><br>Examples:<br> dogecoin-cli sendtoaddress \"DRF7yvmFHR5gMXRtijkbkPzmLYnMfTYMGZ\" 0.1<br> dogecoin-cli sendtoaddress \"DRF7yvmFHR5gMXRtijkbkPzmLYnMfTYMGZ\" 0.1 \"donation\" \"seans outpost\"<br> dogecoin-cli sendtoaddress \"DRF7yvmFHR5gMXRtijkbkPzmLYnMfTYMGZ\" 0.1 \"\" \"\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"DRF7yvmFHR5gMXRtijkbkPzmLYnMfTYMGZ\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setaccount": "setaccount \"address\" \"account\"<br><br>DEPRECATED. Sets the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The dogecoin address to be associated with an account.<br>2. \"account\"         (string, required) The account to assign the address to.<br><br>Examples:<br> dogecoin-cli setaccount \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB. Overwrites the paytxfee parameter.<br><br>Arguments:<br>1. amount         (numeric or string, required) The transaction fee in DOGE/kB<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> dogecoin-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"address\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"address\"         (string, required) The dogecoin address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> dogecoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> dogecoin-cli signmessage \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\" \"my message\"<br><br>Verify the signature<br> dogecoin-cli verifymessage \"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"DH9fPpKHLiP5eaAD3pXxxUZmPktGNGTFp6\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
        },
        "zec": {
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest block chain.<br><br>Result<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples<br> zcash-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getblock": "getblock \"hash|height\" ( verbosity )<br><br>If verbosity is 0, returns a string that is serialized, hex-encoded data for the block.<br>If verbosity is 1, returns an Object with information about the block.<br>If verbosity is 2, returns an Object with information about the block and information about each transaction. <br><br>Arguments:<br>1. \"hash|height\"          (string, required) The block hash or height<br>2. verbosity              (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data<br><br>Result (for verbosity = 0):<br>\"data\"             (string) A string that is serialized, hex-encoded data for the block.<br><br>Result (for verbosity = 1):<br>{<br>  \"hash\" : \"hash\",       (string) the block hash (same as provided hash)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"height\" : n,          (numeric) The block height or index (same as provided height)<br>  \"version\" : n,         (numeric) The block version<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\",   (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbosity = 2):<br>{<br>  ...,                     Same output as verbosity = 1.<br>  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.<br>         ,...<br>  ],<br>  ,...                     Same output as verbosity = 1.<br>}<br><br>Examples:<br> zcash-cli getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/<br> zcash-cli getblock 12800<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding block chain processing.<br><br>Note that when the chain tip is at the last block before a network upgrade activation,<br>consensus.chaintip != consensus.nextblock.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",        (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\", (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,     (numeric) the current difficulty<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal<br>  \"size_on_disk\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk<br>  \"commitments\": xxxxxx,    (numeric) the current number of note commitments in the commitment tree<br>  \"softforks\": [            (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",        (string) name of softfork<br>        \"version\": xx,         (numeric) block version<br>        \"enforce\": {           (object) progress toward enforcing the softfork rules for new-version blocks<br>           \"status\": xx,       (boolean) true if threshold reached<br>           \"found\": xx,        (numeric) number of blocks with the new version found<br>           \"required\": xx,     (numeric) number of blocks required to trigger<br>           \"window\": xx,       (numeric) maximum size of examined window of recent blocks<br>        },<br>        \"reject\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \"enforce\")<br>     }, ...<br>  ],<br>  \"upgrades\": {                (object) status of network upgrades<br>     \"xxxx\" : {                (string) branch ID of the upgrade<br>        \"name\": \"xxxx\",        (string) name of upgrade<br>        \"activationheight\": xxxxxx,  (numeric) block height of activation<br>        \"status\": \"xxxx\",      (string) status of upgrade<br>        \"info\": \"xxxx\",        (string) additional information about upgrade<br>     }, ...<br>  },<br>  \"consensus\": {               (object) branch IDs of the current and upcoming consensus rules<br>     \"chaintip\": \"xxxxxxxx\",   (string) branch ID used to validate the current chain tip<br>     \"nextblock\": \"xxxxxxxx\"   (string) branch ID that the next block will be validated under<br>  }<br>}<br><br>Examples:<br> zcash-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the best valid block chain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> zcash-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getblockhash": "getblockhash index<br><br>Returns hash of block in best-block-chain at index provided.<br><br>Arguments:<br>1. index         (numeric, required) The block index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> zcash-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> zcash-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> zcash-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> zcash-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx                (numeric) Current tx count<br>  \"bytes\": xxxxx               (numeric) Sum of all tx sizes<br>  \"usage\": xxxxx               (numeric) Total memory usage for the mempool<br>}<br><br>Examples:<br> zcash-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Arguments:<br>1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) transaction size in bytes<br>    \"fee\" : n,              (numeric) transaction fee in ZEC<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) transaction priority now<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples<br> zcash-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "gettxout": "gettxout \"txid\" n ( includemempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id<br>2. n              (numeric, required) vout value<br>3. includemempool  (boolean, optional) Whether to include the mempool<br><br>Result:<br>{<br>  \"bestblock\" : \"hash\",    (string) the block hash<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in ZEC<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of Zcash addresses<br>        \"zcashaddress\"        (string) Zcash address<br>        ,...<br>     ]<br>  },<br>  \"version\" : n,              (numeric) The version<br>  \"coinbase\" : true|false     (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> zcash-cli listunspent <br><br>View the details<br> zcash-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included in manually (by blockhash).<br><br>Return the raw transaction data.<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"block hash\"  (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) the best block hash hex<br>  \"transactions\": n,      (numeric) The number of transactions<br>  \"txouts\": n,            (numeric) The number of output transactions<br>  \"bytes_serialized\": n,  (numeric) The serialized size<br>  \"hash_serialized\": \"hash\",   (string) The serialized hash<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> zcash-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "verifychain": "verifychain ( checklevel numblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> zcash-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid",
            "getinfo": "getinfo<br>Returns an object containing various state info.<br><br>Result:<br>{<br>  \"version\": xxxxx,           (numeric) the server version<br>  \"protocolversion\": xxxxx,   (numeric) the protocol version<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total Zcash balance of the wallet<br>  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server<br>  \"timeoffset\": xxxxx,        (numeric) the time offset<br>  \"connections\": xxxxx,       (numeric) the number of connections<br>  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server<br>  \"difficulty\": xxxxxx,       (numeric) the current difficulty<br>  \"testnet\": true|false,      (boolean) if the server is using testnet or not<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in ZEC/kB<br>  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in ZEC/kB<br>  \"errors\": \"...\"           (string) any error messages<br>}<br><br>Examples:<br> zcash-cli getinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "stop": "stop<br><br>Stop Zcash server.",
            "z_getpaymentdisclosure": "z_getpaymentdisclosure \"txid\" \"js_index\" \"output_index\" (\"message\") <br><br>Generate a payment disclosure for a given joinsplit output.<br><br>EXPERIMENTAL FEATURE<br><br>WARNING: z_getpaymentdisclosure is disabled.<br>To enable it, restart zcashd with the -experimentalfeatures and<br>-paymentdisclosure commandline options, or add these two lines<br>to the zcash.conf file:<br><br>experimentalfeatures=1<br>paymentdisclosure=1<br><br>Arguments:<br>1. \"txid\"            (string, required) <br>2. \"js_index\"        (string, required) <br>3. \"output_index\"    (string, required) <br>4. \"message\"         (string, optional) <br><br>Result:<br>\"paymentdisclosure\"  (string) Hex data string, with \"zpd:\" prefix.<br><br>Examples:<br> zcash-cli z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 \"refund\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getpaymentdisclosure\", \"params\": [\"96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2\", 0, 0, \"refund\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_validatepaymentdisclosure": "z_validatepaymentdisclosure \"paymentdisclosure\"<br><br>Validates a payment disclosure.<br><br>EXPERIMENTAL FEATURE<br><br>WARNING: z_validatepaymentdisclosure is disabled.<br>To enable it, restart zcashd with the -experimentalfeatures and<br>-paymentdisclosure commandline options, or add these two lines<br>to the zcash.conf file:<br><br>experimentalfeatures=1<br>paymentdisclosure=1<br><br>Arguments:<br>1. \"paymentdisclosure\"     (string, required) Hex data string, with \"zpd:\" prefix.<br><br>Examples:<br> zcash-cli z_validatepaymentdisclosure \"zpd:706462ff004c561a0447ba2ec51184e6c204...\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validatepaymentdisclosure\", \"params\": [\"zpd:706462ff004c561a0447ba2ec51184e6c204...\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "generate": "generate numblocks<br><br>Mine blocks immediately (before the RPC call returns)<br><br>Note: this function can only be used on the regtest network<br><br>Arguments:<br>1. numblocks    (numeric) How many blocks are generated immediately.<br><br>Result<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> zcash-cli generate 11",
            "getgenerate": "getgenerate<br><br>Return if the server is set to generate coins or not. The default is false.<br>It is set with the command line argument -gen (or zcash.conf setting gen)<br>It can also be set with the setgenerate call.<br><br>Result<br>true|false      (boolean) If the server is set to generate coins or not<br><br>Examples:<br> zcash-cli getgenerate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "setgenerate": "setgenerate generate ( genproclimit )<br><br>Set 'generate' true or false to turn generation on or off.<br>Generation is limited to 'genproclimit' processors, -1 is unlimited.<br>See the getgenerate call for the current setting.<br><br>Arguments:<br>1. generate         (boolean, required) Set to true to turn on generation, off to turn off.<br>2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.<br><br>Examples:<br><br>Set the generation on with a limit of one processor<br> zcash-cli setgenerate true 1<br><br>Check the setting<br> zcash-cli getgenerate <br><br>Turn off generation<br> zcash-cli setgenerate false<br><br>Using json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getblocksubsidy": "getblocksubsidy height<br><br>Returns block subsidy reward, taking into account the mining slow start and the founders reward, of block at index provided.<br><br>Arguments:<br>1. height         (numeric, optional) The block height.  If not provided, defaults to the current height of the chain.<br><br>Result:<br>{<br>  \"miner\" : x.xxx           (numeric) The mining reward amount in ZEC.<br>  \"founders\" : x.xxx        (numeric) The founders reward amount in ZEC.<br>}<br><br>Examples:<br> zcash-cli getblocksubsidy 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockubsidy\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getblocktemplate": "getblocktemplate ( \"jsonrequestobject\" )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments:<br>1. \"jsonrequestobject\"       (string, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\" or omitted<br>       \"capabilities\":[       (array, optional) A list of strings<br>           \"support\"           (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>         ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                     (numeric) The block version<br>  \"previousblockhash\" : \"xxxx\",    (string) The hash of current highest block<br>  \"finalsaplingroothash\" : \"xxxx\", (string) The hash of the final sapling root<br>  \"transactions\" : [                 (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",          (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"hash\" : \"xxxx\",          (string) hash/id encoded in little-endian hexadecimal<br>         \"depends\" : [              (array) array of numbers <br>             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,               (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any<br>         \"required\" : true|false     (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbasetxn\" : { ... },           (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",               (string) The hash target<br>  \"mintime\" : xxx,                   (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                      (array of string) list of ways the block template may be changed <br>     \"value\"                         (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",   (string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxx\",                 (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> zcash-cli getblocktemplate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getlocalsolps": "getlocalsolps<br><br>Returns the average local solutions per second since this node was started.<br>This is the same information shown on the metrics screen (if enabled).<br><br>Result:<br>xxx.xxxxx     (numeric) Solutions per second average<br><br>Examples:<br> zcash-cli getlocalsolps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlocalsolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblocksize\": nnn,   (numeric) The last block size<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"errors\": \"...\"          (string) Current errors<br>  \"generate\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)<br>  \"genproclimit\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)<br>  \"localsolps\": xxx.xxxxx    (numeric) The average local solution rate in Sol/s since this node was started<br>  \"networksolps\": x          (numeric) The estimated network solution rate in Sol/s<br>  \"pooledtx\": n              (numeric) The size of the mem pool<br>  \"testnet\": true|false      (boolean) If using testnet or not<br>  \"chain\": \"xxxx\",         (string) current network name as defined in BIP70 (main, test, regtest)<br>}<br><br>Examples:<br> zcash-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getnetworkhashps": "getnetworkhashps ( blocks height )<br><br>DEPRECATED - left for backwards-compatibility. Use getnetworksolps instead.<br><br>Returns the estimated network solutions per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window.<br>2. height     (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Solutions per second estimated<br><br>Examples:<br> zcash-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getnetworksolps": "getnetworksolps ( blocks height )<br><br>Returns the estimated network solutions per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window.<br>2. height     (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Solutions per second estimated<br><br>Examples:<br> zcash-cli getnetworksolps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "prioritisetransaction": "prioritisetransaction <txid> <priority delta> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. priority delta (numeric, required) The priority to add or subtract.<br>                  The transaction selection algorithm considers the tx as it would have a higher priority.<br>                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) <br>3. fee delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result<br>true              (boolean) Returns true<br><br>Examples:<br> zcash-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "submitblock": "submitblock \"hexdata\" ( \"jsonparametersobject\" )<br><br>Attempts to submit new block to network.<br>The 'jsonparametersobject' parameter is currently ignored.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"    (string, required) the hex-encoded block data to submit<br>2. \"jsonparametersobject\"     (string, optional) object of optional parameters<br>    {<br>      \"workid\" : \"id\"    (string, optional) if the server provided a workid, it MUST be included with submissions<br>    }<br><br>Result:<br>\"duplicate\" - node already has valid copy of block<br>\"duplicate-invalid\" - node already has block, but it is invalid<br>\"duplicate-inconclusive\" - node already has block but has not validated it<br>\"inconclusive\" - node has not validated the block, it may not be on the node's current best chain<br>\"rejected\" - block was rejected as invalid<br>For more information on submitblock parameters and results, see: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki#block-submission<br><br>Examples:<br> zcash-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts add or remove a node from the addnode list.<br>Or try a connection to a node once.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> zcash-cli addnode \"192.168.0.6:8233\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8233\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> zcash-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "disconnectnode": "disconnectnode \"node\" <br><br>Immediately disconnects from the specified node.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br><br>Examples:<br> zcash-cli disconnectnode \"192.168.0.6:8233\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8233\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getaddednodeinfo": "getaddednodeinfo dns ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br>If dns is false, only a list of added nodes will be provided,<br>otherwise connected information will also be available.<br><br>Arguments:<br>1. dns        (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available.<br>2. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node ip address<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [<br>       {<br>         \"address\" : \"192.168.0.201:8233\",  (string) The Zcash server host and port<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>       ,...<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> zcash-cli getaddednodeinfo true<br> zcash-cli getaddednodeinfo true \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>bResult:<br>n          (numeric) The connection count<br><br>Examples:<br> zcash-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getdeprecationinfo": "getdeprecationinfo<br>Returns an object containing current version and deprecation block height. Applicable only on mainnet.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/MagicBean:x.y.z[-v]/\",     (string) the server subversion string<br>  \"deprecationheight\": xxxxx,            (numeric) the block height at which this version will deprecate and shut down<br>}<br><br>Examples:<br> zcash-cli getdeprecationinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdeprecationinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t        (numeric) Total cpu time<br>}<br><br>Examples:<br> zcash-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/MagicBean:x.y.z[-v]/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in ZEC/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network warnings (such as alert messages) <br>}<br><br>Examples:<br> zcash-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>bResult:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The ip address and port of the peer<br>    \"addrlocal\":\"ip:port\",   (string) local address<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time<br>    \"pingwait\": n,             (numeric) ping wait<br>    \"version\": v,              (numeric) The peer version, such as 170002<br>    \"subver\": \"/MagicBean:x.y.z[-v]/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> zcash-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> zcash-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> zcash-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "setban": "setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)<br><br>Attempts add or remove a IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)<br>2. \"command\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> zcash-cli setban \"192.168.0.6\" \"add\" 86400<br> zcash-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )<br><br>Create a transaction spending the given inputs and sending to the given addresses.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"transactions\"        (string, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",    (string, required) The transaction id<br>         \"vout\":n        (numeric, required) The output number<br>         \"sequence\":n    (numeric, optional) The sequence number<br>       }<br>       ,...<br>     ]<br>2. \"addresses\"           (string, required) a json object with addresses as keys and amounts as values<br>    {<br>      \"address\": x.xxx   (numeric, required) The key is the Zcash address, the value is the ZEC amount<br>      ,...<br>    }<br>3. locktime              (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br>4. expiryheight          (numeric, optional, default=nextblockheight+20) Expiry height of transaction (if Overwinter is active)<br><br>Result:<br>\"transaction\"            (string) hex string of the transaction<br><br>Examples<br> zcash-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\"<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hex\"      (string, required) The transaction hex string<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"overwintered\" : bool   (boolean) The Overwintered flag<br>  \"version\" : n,          (numeric) The version<br>  \"versiongroupid\": \"hex\"   (string, optional) The version group id (Overwintered txs)<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"expiryheight\" : n,     (numeric, optional) Last valid block height for mining transaction (Overwintered txs)<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in ZEC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"t12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) zcash address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"vjoinsplit\" : [        (array of json objects, only for version >= 2)<br>     {<br>       \"vpub_old\" : x.xxx,         (numeric) public input value in ZEC<br>       \"vpub_new\" : x.xxx,         (numeric) public output value in ZEC<br>       \"anchor\" : \"hex\",         (string) the anchor<br>       \"nullifiers\" : [            (json array of string)<br>         \"hex\"                     (string) input note nullifier<br>         ,...<br>       ],<br>       \"commitments\" : [           (json array of string)<br>         \"hex\"                     (string) output note commitment<br>         ,...<br>       ],<br>       \"onetimePubKey\" : \"hex\",  (string) the onetime public key used to encrypt the ciphertexts<br>       \"randomSeed\" : \"hex\",     (string) the random seed<br>       \"macs\" : [                  (json array of string)<br>         \"hex\"                     (string) input note MAC<br>         ,...<br>       ],<br>       \"proof\" : \"hex\",          (string) the zero-knowledge proof<br>       \"ciphertexts\" : [           (json array of string)<br>         \"hex\"                     (string) output note ciphertext<br>         ,...<br>       ]<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> zcash-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "decodescript": "decodescript \"hex\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hex\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) Zcash address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) script address<br>}<br><br>Examples:<br> zcash-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "fundrawtransaction": "fundrawtransaction \"hexstring\"<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add one change output to the outputs.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) The fee added to the transaction<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br>\"hex\"             <br><br>Examples:<br><br>Create a transaction with no inputs<br> zcash-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> zcash-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> zcash-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> zcash-cli sendrawtransaction \"signedtransactionhex\"",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose )<br><br>NOTE: By default this function only works sometimes. This is when the tx is in the mempool<br>or there is an unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option.<br><br>Return the raw transaction data.<br><br>If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.<br>If verbose is non-zero, returns an Object with information about 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose       (numeric, optional, default=0) If 0, return a string, other return a json object<br><br>Result (if verbose is not set or set to 0):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose > 0):<br>{<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"expiryheight\" : ttt,   (numeric, optional) The block height after which the transaction expires<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in ZEC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"zcashaddress\"          (string) Zcash address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"vjoinsplit\" : [        (array of json objects, only for version >= 2)<br>     {<br>       \"vpub_old\" : x.xxx,         (numeric) public input value in ZEC<br>       \"vpub_new\" : x.xxx,         (numeric) public output value in ZEC<br>       \"anchor\" : \"hex\",         (string) the anchor<br>       \"nullifiers\" : [            (json array of string)<br>         \"hex\"                     (string) input note nullifier<br>         ,...<br>       ],<br>       \"commitments\" : [           (json array of string)<br>         \"hex\"                     (string) output note commitment<br>         ,...<br>       ],<br>       \"onetimePubKey\" : \"hex\",  (string) the onetime public key used to encrypt the ciphertexts<br>       \"randomSeed\" : \"hex\",     (string) the random seed<br>       \"macs\" : [                  (json array of string)<br>         \"hex\"                     (string) input note MAC<br>         ,...<br>       ],<br>       \"proof\" : \"hex\",          (string) the zero-knowledge proof<br>       \"ciphertexts\" : [           (json array of string)<br>         \"hex\"                     (string) output note ciphertext<br>         ,...<br>       ]<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> zcash-cli getrawtransaction \"mytxid\"<br> zcash-cli getrawtransaction \"mytxid\" 1<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> zcash-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> zcash-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> zcash-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\",   (string, required for P2SH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"privatekeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br>5.  \"branchid\"       (string, optional) The hex representation of the consensus branch id to sign with. This can be used to force signing with consensus rules that are ahead of the node's current height.<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> zcash-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"       (string, required) A json array of keys which are Zcash addresses or hex-encoded public keys<br>     [<br>       \"key\"    (string) Zcash address or hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 addresses<br> zcash-cli createmultisig 2 \"[\"t16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"t171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"t16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"t171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "estimatefee": "estimatefee nblocks<br><br>Estimates the approximate fee per kilobyte<br>needed for a transaction to begin confirmation<br>within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>n :    (numeric) estimated fee-per-kilobyte<br><br>-1.0 is returned if not enough transactions and<br>blocks have been observed to make an estimate.<br><br>Example:<br> zcash-cli estimatefee 6",
            "estimatepriority": "estimatepriority nblocks<br><br>Estimates the approximate priority<br>a zero-fee transaction needs to begin confirmation<br>within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>n :    (numeric) estimated priority<br><br>-1.0 is returned if not enough transactions and<br>blocks have been observed to make an estimate.<br><br>Example:<br> zcash-cli estimatepriority 6",
            "validateaddress": "validateaddress \"zcashaddress\"<br><br>Return information about the given Zcash address.<br><br>Arguments:<br>1. \"zcashaddress\"     (string, required) The Zcash address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"zcashaddress\",   (string) The Zcash address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,          (boolean) If the address is yours or not<br>  \"isscript\" : true|false,        (boolean) If the key is a script<br>  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key<br>  \"iscompressed\" : true|false,    (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \"\" is the default account<br>}<br><br>Examples:<br> zcash-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "verifymessage": "verifymessage \"zcashaddress\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"zcashaddress\"    (string, required) The Zcash address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> zcash-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> zcash-cli signmessage \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" \"my message\"<br><br>Verify the signature<br> zcash-cli verifymessage \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_validateaddress": "z_validateaddress \"zaddr\"<br><br>Return information about the given z address.<br><br>Arguments:<br>1. \"zaddr\"     (string, required) The z address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,      (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"zaddr\",         (string) The z address validated<br>  \"type\" : \"xxxx\",             (string) \"sprout\" or \"sapling\"<br>  \"ismine\" : true|false,       (boolean) If the address is yours or not<br>  \"payingkey\" : \"hex\",         (string) [sprout] The hex value of the paying key, a_pk<br>  \"transmissionkey\" : \"hex\",   (string) [sprout] The hex value of the transmission key, pk_enc<br>  \"diversifier\" : \"hex\",       (string) [sapling] The hex value of the diversifier, d<br>  \"diversifiedtransmissionkey\" : \"hex\", (string) [sapling] The hex value of pk_d<br>}<br><br>Examples:<br> zcash-cli z_validateaddress \"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validateaddress\", \"params\": [\"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"account\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet.<br>Each key is a Zcash address or hex-encoded public key.<br>If 'account' is specified (DEPRECATED), assign address to that account.<br><br>Arguments:<br>1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keysobject\"   (string, required) A json array of Zcash addresses or hex-encoded public keys<br>     [<br>       \"address\"  (string) Zcash address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"account\"      (string, optional) DEPRECATED. If provided, MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br><br>Result:<br>\"zcashaddress\"  (string) A Zcash address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> zcash-cli addmultisigaddress 2 \"[\"t16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"t171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"t16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"t171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies wallet.dat to destination filename<br><br>Arguments:<br>1. \"destination\"   (string, required) The destination filename, saved in the directory set by -exportdir option.<br><br>Result:<br>\"path\"             (string) The full path of the destination file<br><br>Examples:<br> zcash-cli backupwallet \"backupdata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backupdata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "dumpprivkey": "dumpprivkey \"t-addr\"<br><br>Reveals the private key corresponding to 't-addr'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"t-addr\"   (string, required) The transparent address for the private key<br><br>Result:<br>\"key\"         (string) The private key<br><br>Examples:<br> zcash-cli dumpprivkey \"myaddress\"<br> zcash-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps taddr wallet keys in a human-readable format.  Overwriting an existing file is not permitted.<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename, saved in folder set by zcashd -exportdir option<br><br>Result:<br>\"path\"           (string) The full path of the destination file<br><br>Examples:<br> zcash-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>WARNING: encryptwallet is disabled.<br>To enable it, restart zcashd with the -experimentalfeatures and<br>-developerencryptwallet commandline options, or add these two lines<br>to the zcash.conf file:<br><br>experimentalfeatures=1<br>developerencryptwallet=1<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt you wallet<br> zcash-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending Zcash<br> zcash-cli walletpassphrase \"my pass phrase\"<br><br>Now we can so something like sign<br> zcash-cli signmessage \"zcashaddress\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> zcash-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getaccount": "getaccount \"zcashaddress\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"zcashaddress\"  (string, required) The Zcash address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> zcash-cli getaccount \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getaccountaddress": "getaccountaddress \"account\"<br><br>DEPRECATED. Returns the current Zcash address for receiving payments to this account.<br><br>Arguments:<br>1. \"account\"       (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br><br>Result:<br>\"zcashaddress\"   (string) The account Zcash address<br><br>Examples:<br> zcash-cli getaccountaddress <br> zcash-cli getaccountaddress \"\"<br> zcash-cli getaccountaddress \"myaccount\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"  (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br><br>Result:<br>[                     (json array of string)<br>  \"zcashaddress\"  (string) a Zcash address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> zcash-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getbalance": "getbalance ( \"account\" minconf includeWatchonly )<br><br>Returns the server's total available balance.<br><br>Arguments:<br>1. \"account\"      (string, optional) DEPRECATED. If provided, it MUST be set to the empty string \"\" or to the string \"*\", either of which will give the total available balance. Passing any other string will result in an error.<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in ZEC received for this account.<br><br>Examples:<br><br>The total amount in the wallet<br> zcash-cli getbalance <br><br>The total amount in the wallet at least 5 blocks confirmed<br> zcash-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getnewaddress": "getnewaddress ( \"account\" )<br><br>Returns a new Zcash address for receiving payments.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. If provided, it MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br><br>Result:<br>\"zcashaddress\"    (string) The new Zcash address<br><br>Examples:<br> zcash-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getrawchangeaddress": "getrawchangeaddress<br><br>Returns a new Zcash address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> zcash-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getreceivedbyaccount": "getreceivedbyaccount \"account\" ( minconf )<br><br>DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. \"account\"      (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in ZEC received for this account.<br><br>Examples:<br><br>Amount received by the default account with at least 1 confirmation<br> zcash-cli getreceivedbyaccount \"\"<br><br>Amount received at the tabby account including unconfirmed amounts with zero confirmations<br> zcash-cli getreceivedbyaccount \"tabby\" 0<br><br>The amount with at least 6 confirmation, very safe<br> zcash-cli getreceivedbyaccount \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getreceivedbyaddress": "getreceivedbyaddress \"zcashaddress\" ( minconf )<br><br>Returns the total amount received by the given Zcash address in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"zcashaddress\"  (string, required) The Zcash address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in ZEC received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> zcash-cli getreceivedbyaddress \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> zcash-cli getreceivedbyaddress \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" 0<br><br>The amount with at least 6 confirmations, very safe<br> zcash-cli getreceivedbyaddress \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "gettransaction": "gettransaction \"txid\" ( includeWatchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br>2. \"includeWatchonly\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in ZEC<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The block index<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",  (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.<br>      \"address\" : \"zcashaddress\",   (string) The Zcash address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx                  (numeric) The amount in ZEC<br>      \"vout\" : n,                       (numeric) the vout value<br>    }<br>    ,...<br>  ],<br>  \"vjoinsplit\" : [<br>    {<br>      \"anchor\" : \"treestateref\",          (string) Merkle root of note commitment tree<br>      \"nullifiers\" : [ string, ... ]      (string) Nullifiers of input notes<br>      \"commitments\" : [ string, ... ]     (string) Note commitments for note outputs<br>      \"macs\" : [ string, ... ]            (string) Message authentication tags<br>      \"vpub_old\" : x.xxx                  (numeric) The amount removed from the transparent value pool<br>      \"vpub_new\" : x.xxx,                 (numeric) The amount added to the transparent value pool<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> zcash-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> zcash-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in ZEC<br>  \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed balance of the wallet in ZEC<br>  \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet in ZEC<br>  \"txcount\": xxxxxxx,         (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee configuration, set in ZEC/kB<br>  \"seedfp\": \"uint256\",        (string) the BLAKE2b-256 hash of the HD seed<br>}<br><br>Examples:<br> zcash-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan )<br><br>Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"address\"          (string, required) The address<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Import an address with rescan<br> zcash-cli importaddress \"myaddress\"<br><br>Import using a label without rescan<br> zcash-cli importaddress \"myaddress\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "importprivkey": "importprivkey \"zcashprivkey\" ( \"label\" rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet.<br><br>Arguments:<br>1. \"zcashprivkey\"   (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Dump a private key<br> zcash-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> zcash-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> zcash-cli importprivkey \"mykey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "importwallet": "importwallet \"filename\"<br><br>Imports taddr keys from a wallet dump file (see dumpwallet).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> zcash-cli dumpwallet \"nameofbackup\"<br><br>Import the wallet<br> zcash-cli importwallet \"path/to/exportdir/nameofbackup\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"path/to/exportdir/nameofbackup\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> zcash-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "listaccounts": "listaccounts ( minconf includeWatchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')<br><br>Result:<br>{                      (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> zcash-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> zcash-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> zcash-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"zcashaddress\",     (string) The zcash address<br>      amount,                 (numeric) The amount in ZEC<br>      \"account\"             (string, optional) The account (DEPRECATED)<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> zcash-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> zcash-cli listunspent <br><br>Lock an unspent transaction<br> zcash-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> zcash-cli listlockunspent <br><br>Unlock the transaction again<br> zcash-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "listreceivedbyaccount": "listreceivedbyaccount ( minconf includeempty includeWatchonly)<br><br>DEPRECATED. List balances by account.<br><br>Arguments:<br>1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.<br>3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",  (string) The account name of the receiving account<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account<br>    \"confirmations\" : n           (numeric) The number of confirmations of the most recent transaction included<br>  }<br>  ,...<br>]<br><br>Examples:<br> zcash-cli listreceivedbyaccount <br> zcash-cli listreceivedbyaccount 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf includeempty includeWatchonly)<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. includeempty  (numeric, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. The account of the receiving address. The default account is \"\".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in ZEC received by the address<br>    \"confirmations\" : n                (numeric) The number of confirmations of the most recent transaction included<br>  }<br>  ,...<br>]<br><br>Examples:<br> zcash-cli listreceivedbyaddress <br> zcash-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "listsinceblock": "listsinceblock ( \"blockhash\" target-confirmations includeWatchonly)<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted<br><br>Arguments:<br>1. \"blockhash\"   (string, optional) The block hash to list transactions since<br>2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more<br>3. includeWatchonly:        (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')<br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.<br>    \"address\":\"zcashaddress\",    (string) The Zcash address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in ZEC. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in ZEC. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the last block<br>}<br><br>Examples:<br> zcash-cli listsinceblock <br> zcash-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "listtransactions": "listtransactions ( \"account\" count from includeWatchonly)<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.<br><br>Arguments:<br>1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. from           (numeric, optional, default=0) The number of transactions to skip<br>4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \"\" for the default account.<br>    \"address\":\"zcashaddress\",    (string) The Zcash address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. 'send' and 'receive' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in ZEC. This is negative for the 'send' category, and for the<br>                                         'move' category for moves outbound. It is positive for the 'receive' category,<br>                                         and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in ZEC. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and <br>                                         'receive' category of transactions.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"otheraccount\": \"accountname\",  (string) For the 'move' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>    \"size\": n,                (numeric) Transaction size in bytes<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> zcash-cli listtransactions <br><br>List transactions 100 to 120<br> zcash-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "listunspent": "listunspent ( minconf maxconf  [\"address\",...] )<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br>Results are an array of Objects, each of which has:<br>{txid, vout, scriptPubKey, amount, confirmations}<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"    (string) A json array of Zcash addresses to filter<br>    [<br>      \"address\"   (string) Zcash address<br>      ,...<br>    ]<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"generated\" : true|false  (boolean) true if txout is a coinbase transaction output<br>    \"address\" : \"address\",    (string) the Zcash address<br>    \"account\" : \"account\",    (string) DEPRECATED. The associated account, or \"\" for the default account<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction amount in ZEC<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH<br>    \"spendable\" : xxx         (bool) Whether we have the private keys to spend this output<br>  }<br>  ,...<br>]<br><br>Examples<br> zcash-cli listunspent <br> zcash-cli listunspent 6 9999999 \"[\"t1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"t1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"t1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"t1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "lockunspent": "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>A locked transaction output will not be chosen by automatic coin selection, when spending Zcash.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, required) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> zcash-cli listunspent <br><br>Lock an unspent transaction<br> zcash-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> zcash-cli listlockunspent <br><br>Unlock the transaction again<br> zcash-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"   (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br>2. \"toaccount\"     (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br>3. amount            (numeric) Quantity of ZEC to move between accounts.<br>4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"       (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false           (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 ZEC from the default account to the account named tabby<br> zcash-cli move \"\" \"tabby\" 0.01<br><br>Move 0.01 ZEC timotei to akiko with a comment and funds have 6 confirmations<br> zcash-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "sendfrom": "sendfrom \"fromaccount\" \"tozcashaddress\" amount ( minconf \"comment\" \"comment-to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a Zcash address.<br>The amount is a real and is rounded to the nearest 0.00000001.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br>2. \"tozcashaddress\"  (string, required) The Zcash address to send funds to.<br>3. amount                (numeric, required) The amount in ZEC (transaction fee is added on top).<br>4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                                     This is not part of the transaction, just kept in your wallet.<br>6. \"comment-to\"        (string, optional) An optional comment to store the name of the person or organization <br>                                     to which you're sending the transaction. This is not part of the transaction, <br>                                     it is just kept in your wallet.<br><br>Result:<br>\"transactionid\"        (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 ZEC from the default account to the address, must have at least 1 confirmation<br> zcash-cli sendfrom \"\" \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> zcash-cli sendfrom \"tabby\" \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01 6 \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )<br><br>Send multiple times. Amounts are decimal numbers with at most 8 digits of precision.<br><br>Arguments:<br>1. \"fromaccount\"         (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric) The Zcash address is the key, the numeric amount in ZEC is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefromamount   (string, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less Zcash than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"            (string) Subtract fee from this address<br>      ,...<br>    ]<br><br>Result:<br>\"transactionid\"          (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> zcash-cli sendmany \"\" \"{\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\":0.01,\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> zcash-cli sendmany \"\" \"{\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\":0.01,\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> zcash-cli sendmany \"\" \"{\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\":0.01,\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \"\" \"[\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\",\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\":0.01,\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "sendtoaddress": "sendtoaddress \"zcashaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount )<br><br>Send an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001<br><br>Arguments:<br>1. \"zcashaddress\"  (string, required) The Zcash address to send to.<br>2. \"amount\"      (numeric, required) The amount in ZEC to send. eg 0.1<br>3. \"comment\"     (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment-to\"  (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less Zcash than you enter in the amount field.<br><br>Result:<br>\"transactionid\"  (string) The transaction id.<br><br>Examples:<br> zcash-cli sendtoaddress \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> zcash-cli sendtoaddress \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> zcash-cli sendtoaddress \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"\" \"\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "setaccount": "setaccount \"zcashaddress\" \"account\"<br><br>DEPRECATED. Sets the account associated with the given address.<br><br>Arguments:<br>1. \"zcashaddress\"  (string, required) The Zcash address to be associated with an account.<br>2. \"account\"         (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.<br><br>Examples:<br> zcash-cli setaccount \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB.<br><br>Arguments:<br>1. amount         (numeric, required) The transaction fee in ZEC/kB rounded to the nearest 0.00000001<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> zcash-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "signmessage": "signmessage \"t-addr\" \"message\"<br><br>Sign a message with the private key of a t-addr<br><br>Arguments:<br>1. \"t-addr\"  (string, required) The transparent address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> zcash-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> zcash-cli signmessage \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" \"my message\"<br><br>Verify the signature<br> zcash-cli verifymessage \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_exportkey": "z_exportkey \"zaddr\"<br><br>Reveals the zkey corresponding to 'zaddr'.<br>Then the z_importkey can be used with this output<br><br>Arguments:<br>1. \"zaddr\"   (string, required) The zaddr for the private key<br><br>Result:<br>\"key\"                  (string) The private key<br><br>Examples:<br> zcash-cli z_exportkey \"myaddress\"<br> zcash-cli z_importkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_exportviewingkey": "z_exportviewingkey \"zaddr\"<br><br>Reveals the viewing key corresponding to 'zaddr'.<br>Then the z_importviewingkey can be used with this output<br><br>Arguments:<br>1. \"zaddr\"   (string, required) The zaddr for the viewing key<br><br>Result:<br>\"vkey\"                  (string) The viewing key<br><br>Examples:<br> zcash-cli z_exportviewingkey \"myaddress\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportviewingkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_exportwallet": "z_exportwallet \"filename\"<br><br>Exports all wallet keys, for taddr and zaddr, in a human-readable format.  Overwriting an existing file is not permitted.<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename, saved in folder set by zcashd -exportdir option<br><br>Result:<br>\"path\"           (string) The full path of the destination file<br><br>Examples:<br> zcash-cli z_exportwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_getbalance": "z_getbalance \"address\" ( minconf )<br><br>Returns the balance of a taddr or zaddr belonging to the node's wallet.<br><br>CAUTION: If the wallet has only an incoming viewing key for this address, then spends cannot be<br>detected, and so the returned balance may be larger than the actual balance.<br><br>Arguments:<br>1. \"address\"      (string) The selected address. It may be a transparent or private address.<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in ZEC received for this address.<br><br>Examples:<br><br>The total amount received by address \"myaddress\"<br> zcash-cli z_getbalance \"myaddress\"<br><br>The total amount received by address \"myaddress\" at least 5 blocks confirmed<br> zcash-cli z_getbalance \"myaddress\" 5<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getbalance\", \"params\": [\"myaddress\", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_getmigrationstatus": "z_getmigrationstatus<br>Returns information about the status of the Sprout to Sapling migration.<br>Note: A transaction is defined as finalized if it has at least ten confirmations.<br>Also, it is possible that manually created transactions involving this wallet<br>will be included in the result.<br><br>Result:<br>{<br>  \"enabled\": true|false,                    (boolean) Whether or not migration is enabled<br>  \"destination_address\": \"zaddr\",           (string) The Sapling address that will receive Sprout funds<br>  \"unmigrated_amount\": nnn.n,               (numeric) The total amount of unmigrated ZEC <br>  \"unfinalized_migrated_amount\": nnn.n,     (numeric) The total amount of unfinalized ZEC <br>  \"finalized_migrated_amount\": nnn.n,       (numeric) The total amount of finalized ZEC <br>  \"finalized_migration_transactions\": nnn,  (numeric) The number of migration transactions involving this wallet<br>  \"time_started\": ttt,                      (numeric, optional) The block time of the first migration transaction as a Unix timestamp<br>  \"migration_txids\": [txids]                (json array of strings) An array of all migration txids involving this wallet<br>}",
            "z_getnewaddress": "z_getnewaddress ( type )<br><br>Returns a new shielded address for receiving payments.<br><br>With no arguments, returns a Sapling address.<br><br>Arguments:<br>1. \"type\"         (string, optional, default=\"sapling\") The type of address. One of [\"sprout\", \"sapling\"].<br><br>Result:<br>\"zcashaddress\"    (string) The new shielded address.<br><br>Examples:<br> zcash-cli z_getnewaddress <br> zcash-cli z_getnewaddress sapling<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_getoperationresult": "z_getoperationresult ([\"operationid\", ... ]) <br><br>Retrieve the result and status of an operation which has finished, and then remove the operation from memory.<br><br>Arguments:<br>1. \"operationid\"         (array, optional) A list of operation ids we are interested in.  If not provided, examine all operations known to the node.<br><br>Result:<br>\"    [object, ...]\"      (array) A list of JSON objects<br><br>Examples:<br> zcash-cli z_getoperationresult '[\"operationid\", ... ]'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationresult\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_getoperationstatus": "z_getoperationstatus ([\"operationid\", ... ]) <br><br>Get operation status and any associated result or error data.  The operation will remain in memory.<br><br>Arguments:<br>1. \"operationid\"         (array, optional) A list of operation ids we are interested in.  If not provided, examine all operations known to the node.<br><br>Result:<br>\"    [object, ...]\"      (array) A list of JSON objects<br><br>Examples:<br> zcash-cli z_getoperationstatus '[\"operationid\", ... ]'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_gettotalbalance": "z_gettotalbalance ( minconf includeWatchonly )<br><br>Return the total value of funds stored in the node's wallet.<br><br>CAUTION: If the wallet contains any addresses for which it only has incoming viewing keys,<br>the returned private balance may be larger than the actual balance, because spends cannot<br>be detected with incoming viewing keys.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) Only include private and transparent transactions confirmed at least this many times.<br>2. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress' and 'z_importviewingkey')<br><br>Result:<br>{<br>  \"transparent\": xxxxx,     (numeric) the total balance of transparent funds<br>  \"private\": xxxxx,         (numeric) the total balance of private funds (in both Sprout and Sapling addresses)<br>  \"total\": xxxxx,           (numeric) the total balance of both transparent and private funds<br>}<br><br>Examples:<br><br>The total amount in the wallet<br> zcash-cli z_gettotalbalance <br><br>The total amount in the wallet at least 5 blocks confirmed<br> zcash-cli z_gettotalbalance 5<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettotalbalance\", \"params\": [5] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_importkey": "z_importkey \"zkey\" ( rescan startHeight )<br><br>Adds a zkey (as returned by z_exportkey) to your wallet.<br><br>Arguments:<br>1. \"zkey\"             (string, required) The zkey (see z_exportkey)<br>2. rescan             (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"<br>3. startHeight        (numeric, optional, default=0) Block height to start rescan from<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Export a zkey<br> zcash-cli z_exportkey \"myaddress\"<br><br>Import the zkey with rescan<br> zcash-cli z_importkey \"mykey\"<br><br>Import the zkey with partial rescan<br> zcash-cli z_importkey \"mykey\" whenkeyisnew 30000<br><br>Re-import the zkey with longer partial rescan<br> zcash-cli z_importkey \"mykey\" yes 20000<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_importviewingkey": "z_importviewingkey \"vkey\" ( rescan startHeight )<br><br>Adds a viewing key (as returned by z_exportviewingkey) to your wallet.<br><br>Arguments:<br>1. \"vkey\"             (string, required) The viewing key (see z_exportviewingkey)<br>2. rescan             (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"<br>3. startHeight        (numeric, optional, default=0) Block height to start rescan from<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Import a viewing key<br> zcash-cli z_importviewingkey \"vkey\"<br><br>Import the viewing key without rescan<br> zcash-cli z_importviewingkey \"vkey\", no<br><br>Import the viewing key with partial rescan<br> zcash-cli z_importviewingkey \"vkey\" whenkeyisnew 30000<br><br>Re-import the viewing key with longer partial rescan<br> zcash-cli z_importviewingkey \"vkey\" yes 20000<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importviewingkey\", \"params\": [\"vkey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_importwallet": "z_importwallet \"filename\"<br><br>Imports taddr and zaddr keys from a wallet export file (see z_exportwallet).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> zcash-cli z_exportwallet \"nameofbackup\"<br><br>Import the wallet<br> zcash-cli z_importwallet \"path/to/exportdir/nameofbackup\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importwallet\", \"params\": [\"path/to/exportdir/nameofbackup\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_listaddresses": "z_listaddresses ( includeWatchonly )<br><br>Returns the list of Sprout and Sapling shielded addresses belonging to the wallet.<br><br>Arguments:<br>1. includeWatchonly (bool, optional, default=false) Also include watchonly addresses (see 'z_importviewingkey')<br><br>Result:<br>[                     (json array of string)<br>  \"zaddr\"           (string) a zaddr belonging to the wallet<br>  ,...<br>]<br><br>Examples:<br> zcash-cli z_listaddresses <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listaddresses\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_listoperationids": "z_listoperationids<br><br>Returns the list of operation ids currently known to the wallet.<br><br>Arguments:<br>1. \"status\"         (string, optional) Filter result by the operation's state e.g. \"success\".<br><br>Result:<br>[                     (json array of string)<br>  \"operationid\"       (string) an operation id belonging to the wallet<br>  ,...<br>]<br><br>Examples:<br> zcash-cli z_listoperationids <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listoperationids\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_listreceivedbyaddress": "z_listreceivedbyaddress \"address\" ( minconf )<br><br>Return a list of amounts received by a zaddr belonging to the node's wallet.<br><br>Arguments:<br>1. \"address\"      (string) The private address.<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>{<br>  \"txid\": \"txid\",           (string) the transaction id<br>  \"amount\": xxxxx,         (numeric) the amount of value in the note<br>  \"memo\": xxxxx,           (string) hexadecimal string representation of memo field<br>  \"jsindex\" (sprout) : n,     (numeric) the joinsplit index<br>  \"jsoutindex\" (sprout) : n,     (numeric) the output index of the joinsplit<br>  \"outindex\" (sapling) : n,     (numeric) the output index<br>  \"change\": true|false,    (boolean) true if the address that received the note is also one of the sending addresses<br>}<br><br>Examples:<br> zcash-cli z_listreceivedbyaddress \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listreceivedbyaddress\", \"params\": [\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_listunspent": "z_listunspent ( minconf maxconf includeWatchonly [\"zaddr\",...] )<br><br>Returns array of unspent shielded notes with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include notes sent to specified addresses.<br>When minconf is 0, unspent notes with zero confirmations are returned, even though they are not immediately spendable.<br>Results are an array of Objects, each of which has:<br>{txid, jsindex, jsoutindex, confirmations, address, amount, memo} (Sprout)<br>{txid, outindex, confirmations, address, amount, memo} (Sapling)<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. includeWatchonly (bool, optional, default=false) Also include watchonly addresses (see 'z_importviewingkey')<br>4. \"addresses\"      (string) A json array of zaddrs (both Sprout and Sapling) to filter on.  Duplicate addresses not allowed.<br>    [<br>      \"address\"     (string) zaddr<br>      ,...<br>    ]<br><br>Result<br>[                             (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"jsindex\" (sprout) : n,       (numeric) the joinsplit index<br>    \"jsoutindex\" (sprout) : n,       (numeric) the output index of the joinsplit<br>    \"outindex\" (sapling) : n,       (numeric) the output index<br>    \"confirmations\" : n,       (numeric) the number of confirmations<br>    \"spendable\" : true|false,  (boolean) true if note can be spent by wallet, false if address is watchonly<br>    \"address\" : \"address\",    (string) the shielded address<br>    \"amount\": xxxxx,          (numeric) the amount of value in the note<br>    \"memo\": xxxxx,            (string) hexademical string representation of memo field<br>    \"change\": true|false,     (boolean) true if the address that received the note is also one of the sending addresses<br>  }<br>  ,...<br>]<br><br>Examples<br> zcash-cli z_listunspent <br> zcash-cli z_listunspent 6 9999999 false \"[\"ztbx5DLDxa5ZLFTchHhoPNkKs57QzSyib6UqXpEdy76T1aUdFxJt1w9318Z8DJ73XzbnWHKEZP9Yjg712N5kMmP4QzS9iC9\",\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listunspent\", \"params\": [6 9999999 false \"[\"ztbx5DLDxa5ZLFTchHhoPNkKs57QzSyib6UqXpEdy76T1aUdFxJt1w9318Z8DJ73XzbnWHKEZP9Yjg712N5kMmP4QzS9iC9\",\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_mergetoaddress": "z_mergetoaddress [\"fromaddress\", ... ] \"toaddress\" ( fee ) ( transparent_limit ) ( shielded_limit ) ( memo )<br><br>WARNING: z_mergetoaddress is disabled.<br>To enable it, restart zcashd with the -experimentalfeatures and<br>-zmergetoaddress commandline options, or add these two lines<br>to the zcash.conf file:<br><br>experimentalfeatures=1<br>zmergetoaddress=1<br><br>Merge multiple UTXOs and notes into a single UTXO or note.  Coinbase UTXOs are ignored; use `z_shieldcoinbase`<br>to combine those into a single note.<br><br>This is an asynchronous operation, and UTXOs selected for merging will be locked.  If there is an error, they<br>are unlocked.  The RPC call `listlockunspent` can be used to return a list of locked UTXOs.<br><br>The number of UTXOs and notes selected for merging can be limited by the caller.  If the transparent limit<br>parameter is set to zero, and Overwinter is not yet active, the -mempooltxinputlimit option will determine the<br>number of UTXOs.  After Overwinter has activated -mempooltxinputlimit is ignored and having a transparent<br>input limit of zero will mean limit the number of UTXOs based on the size of the transaction.  Any limit is<br>constrained by the consensus rule defining a maximum transaction size of 100000 bytes before Sapling, and 2000000<br>bytes once Sapling activates.<br><br>Arguments:<br>1. fromaddresses         (array, required) A JSON array with addresses.<br>                         The following special strings are accepted inside the array:<br>                             - \"ANY_TADDR\":   Merge UTXOs from any taddrs belonging to the wallet.<br>                             - \"ANY_SPROUT\":  Merge notes from any Sprout zaddrs belonging to the wallet.<br>                             - \"ANY_SAPLING\": Merge notes from any Sapling zaddrs belonging to the wallet.<br>                         While it is possible to use a variety of different combinations of addresses and the above values,<br>                         it is not possible to send funds from both sprout and sapling addresses simultaneously. If a special<br>                         string is given, any given addresses of that type will be counted as duplicates and cause an error.<br>    [<br>      \"address\"          (string) Can be a taddr or a zaddr<br>      ,...<br>    ]<br>2. \"toaddress\"           (string, required) The taddr or zaddr to send the funds to.<br>3. fee                   (numeric, optional, default=0.0001) The fee amount to attach to this transaction.<br>4. transparent_limit     (numeric, optional, default=50) Limit on the maximum number of UTXOs to merge.  Set to 0 to use node option -mempooltxinputlimit (before Overwinter), or as many as will fit in the transaction (after Overwinter).<br>5. shielded_limit        (numeric, optional, default=20 Sprout or 200 Sapling Notes) Limit on the maximum number of notes to merge.  Set to 0 to merge as many as will fit in the transaction.<br>6. \"memo\"                (string, optional) Encoded as hex. When toaddress is a zaddr, this will be stored in the memo field of the new note.<br><br>Result:<br>{<br>  \"remainingUTXOs\": xxx               (numeric) Number of UTXOs still available for merging.<br>  \"remainingTransparentValue\": xxx    (numeric) Value of UTXOs still available for merging.<br>  \"remainingNotes\": xxx               (numeric) Number of notes still available for merging.<br>  \"remainingShieldedValue\": xxx       (numeric) Value of notes still available for merging.<br>  \"mergingUTXOs\": xxx                 (numeric) Number of UTXOs being merged.<br>  \"mergingTransparentValue\": xxx      (numeric) Value of UTXOs being merged.<br>  \"mergingNotes\": xxx                 (numeric) Number of notes being merged.<br>  \"mergingShieldedValue\": xxx         (numeric) Value of notes being merged.<br>  \"opid\": xxx                         (string) An operationid to pass to z_getoperationstatus to get the result of the operation.<br>}<br><br>Examples:<br> zcash-cli z_mergetoaddress '[\"ANY_SAPLING\", \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\"]' ztestsapling19rnyu293v44f0kvtmszhx35lpdug574twc0lwyf4s7w0umtkrdq5nfcauxrxcyfmh3m7slemqsj<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_mergetoaddress\", \"params\": [[\"ANY_SAPLING\", \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\"], \"ztestsapling19rnyu293v44f0kvtmszhx35lpdug574twc0lwyf4s7w0umtkrdq5nfcauxrxcyfmh3m7slemqsj\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_sendmany": "z_sendmany \"fromaddress\" [{\"address\":... ,\"amount\":...},...] ( minconf ) ( fee )<br><br>Send multiple times. Amounts are decimal numbers with at most 8 digits of precision.<br>Change generated from a taddr flows to a new taddr address, while change generated from a zaddr returns to itself.<br>When sending coinbase UTXOs to a zaddr, change is not allowed. The entire value of the UTXO(s) must be consumed.<br>Before Sapling activates, the maximum number of zaddr outputs is 54 due to transaction size limits.<br><br><br>Arguments:<br>1. \"fromaddress\"         (string, required) The taddr or zaddr to send the funds from.<br>2. \"amounts\"             (array, required) An array of json objects representing the amounts to send.<br>    [{<br>      \"address\":address  (string, required) The address is a taddr or zaddr<br>      \"amount\":amount    (numeric, required) The numeric amount in ZEC is the value<br>      \"memo\":memo        (string, optional) If the address is a zaddr, raw data represented in hexadecimal string format<br>    }, ... ]<br>3. minconf               (numeric, optional, default=1) Only use funds confirmed at least this many times.<br>4. fee                   (numeric, optional, default=0.0001) The fee amount to attach to this transaction.<br><br>Result:<br>\"operationid\"          (string) An operationid to pass to z_getoperationstatus to get the result of the operation.<br><br>Examples:<br> zcash-cli z_sendmany \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" '[{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_sendmany\", \"params\": [\"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", [{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "z_setmigration": "z_setmigration enabled<br>When enabled the Sprout to Sapling migration will attempt to migrate all funds from this wallet\u2019s<br>Sprout addresses to either the address for Sapling account 0 or the address specified by the parameter<br>'-migrationdestaddress'.<br><br>This migration is designed to minimize information leakage. As a result for wallets with a significant<br>Sprout balance, this process may take several weeks. The migration works by sending, up to 5, as many<br>transactions as possible whenever the blockchain reaches a height equal to 499 modulo 500. The transaction<br>amounts are picked according to the random distribution specified in ZIP 308. The migration will end once<br>the wallet\u2019s Sprout balance is below 0.01 ZEC.<br><br>Arguments:<br>1. enabled  (boolean, required) 'true' or 'false' to enable or disable respectively.",
            "z_shieldcoinbase": "z_shieldcoinbase \"fromaddress\" \"tozaddress\" ( fee ) ( limit )<br><br>Shield transparent coinbase funds by sending to a shielded zaddr.  This is an asynchronous operation and utxos<br>selected for shielding will be locked.  If there is an error, they are unlocked.  The RPC call `listlockunspent`<br>can be used to return a list of locked utxos.  The number of coinbase utxos selected for shielding can be limited<br>by the caller.  If the limit parameter is set to zero, and Overwinter is not yet active, the -mempooltxinputlimit<br>option will determine the number of uxtos.  Any limit is constrained by the consensus rule defining a maximum<br>transaction size of 100000 bytes before Sapling, and 2000000 bytes once Sapling activates.<br><br>Arguments:<br>1. \"fromaddress\"         (string, required) The address is a taddr or \"*\" for all taddrs belonging to the wallet.<br>2. \"toaddress\"           (string, required) The address is a zaddr.<br>3. fee                   (numeric, optional, default=0.0001) The fee amount to attach to this transaction.<br>4. limit                 (numeric, optional, default=50) Limit on the maximum number of utxos to shield.  Set to 0 to use node option -mempooltxinputlimit (before Overwinter), or as many as will fit in the transaction (after Overwinter).<br><br>Result:<br>{<br>  \"remainingUTXOs\": xxx       (numeric) Number of coinbase utxos still available for shielding.<br>  \"remainingValue\": xxx       (numeric) Value of coinbase utxos still available for shielding.<br>  \"shieldingUTXOs\": xxx        (numeric) Number of coinbase utxos being shielded.<br>  \"shieldingValue\": xxx        (numeric) Value of coinbase utxos being shielded.<br>  \"opid\": xxx          (string) An operationid to pass to z_getoperationstatus to get the result of the operation.<br>}<br><br>Examples:<br> zcash-cli z_shieldcoinbase \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_shieldcoinbase\", \"params\": [\"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/",
            "zcbenchmark": "zcbenchmark benchmarktype samplecount<br><br>Runs a benchmark of the selected type samplecount times,<br>returning the running times of each sample.<br><br>Output: [<br>  {<br>    \"runningtime\": runningtime<br>  },<br>  {<br>    \"runningtime\": runningtime<br>  }<br>  ...<br>]",
            "zcrawjoinsplit": "zcrawjoinsplit rawtx inputs outputs vpub_old vpub_new<br>  inputs: a JSON object mapping {note: zcsecretkey, ...}<br>  outputs: a JSON object mapping {zcaddr: value, ...}<br><br>DEPRECATED. Splices a joinsplit into rawtx. Inputs are unilaterally confidential.<br>Outputs are confidential between sender/receiver. The vpub_old and<br>vpub_new values are globally public and move transparent value into<br>or out of the confidential value store, respectively.<br><br>Note: The caller is responsible for delivering the output enc1 and<br>enc2 to the appropriate recipients, as well as signing rawtxout and<br>ensuring it is mined. (A future RPC call will deliver the confidential<br>payments in-band on the blockchain.)<br><br>Output: {<br>  \"encryptednote1\": enc1,<br>  \"encryptednote2\": enc2,<br>  \"rawtxn\": rawtxout<br>}",
            "zcrawkeygen": "zcrawkeygen<br><br>DEPRECATED. Generate a zcaddr which can send and receive confidential values.<br><br>Output: {<br>  \"zcaddress\": zcaddr,<br>  \"zcsecretkey\": zcsecretkey,<br>  \"zcviewingkey\": zcviewingkey,<br>}",
            "zcrawreceive": "zcrawreceive zcsecretkey encryptednote<br><br>DEPRECATED. Decrypts encryptednote and checks if the coin commitments<br>are in the blockchain as indicated by the \"exists\" result.<br><br>Output: {<br>  \"amount\": value,<br>  \"note\": noteplaintext,<br>  \"exists\": exists<br>}",
            "zcsamplejoinsplit": "zcsamplejoinsplit<br><br>Perform a joinsplit and return the JSDescription."
        },
        "bch": {
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest blockchain.<br><br>Result:<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples:<br> bitcoin-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblock": "getblock \"blockhash\" ( verbosity )<br><br>If verbosity is 0 or false, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbosity is 1 or true, returns an Object with information about block <hash>.<br>If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.<br><br>Arguments:<br>1. \"blockhash\"           (string, required) The block hash<br>2. verbosity             (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data<br><br>Result (for verbosity = 0):<br>\"data\"                   (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Result (for verbosity = 1):<br>{<br>  \"hash\" : \"hash\",       (string) The block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\",   (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbosity = 2):<br>{<br>  ...,                   Same output as verbosity = 1<br>  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC; different from verbosity = 1 \"tx\" result<br>    ...<br>  ],<br>  ...                    Same output as verbosity = 1<br>}<br><br>Examples:<br> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding blockchain processing.<br>DEPRECATION WARNING: The 'softforks' output has been deprecated and will be<br>removed v0.20. For the time being it will only be shown here when bitcoind<br>is started with -deprecatedrpc=getblockchaininfo.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",              (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,             (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,            (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\",       (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,         (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,         (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"initialblockdownload\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.<br>  \"chainwork\": \"xxxx\"           (string) total amount of work in active chain, in hexadecimal<br>  \"size_on_disk\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk<br>  \"pruned\": xx,                 (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)<br>  \"automatic_pruning\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)<br>  \"prune_target_size\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)<br>  \"softforks\": [                (array) DEPRECATED: status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",           (string) name of softfork<br>        \"version\": xx,          (numeric) block version<br>        \"reject\": {             (object) progress toward rejecting pre-softfork blocks<br>           \"status\": xx,        (boolean) true if threshold reached<br>        },<br>     }, ...<br>  ]<br>  \"warnings\" : \"...\",           (string) any network and blockchain warnings.<br>}<br><br>Examples:<br> bitcoin-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest blockchain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> bitcoin-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash height<br><br>Returns hash of block in best-block-chain at height provided.<br><br>Arguments:<br>1. height         (numeric, required) The height index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> bitcoin-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockstats": "getblockstats hash_or_height ( stats )<br><br>Compute per block statistics for a given window. All amounts are in BCH.<br>It won't work for some heights with pruning.<br>It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.<br><br>Arguments:<br>1. \"hash_or_height\"     (string or numeric, required) The block hash or height of the target block<br>2. \"stats\"              (array,  optional) Values to plot, by default all values (see result below)<br>    [<br>      \"height\",         (string, optional) Selected statistic<br>      \"time\",           (string, optional) Selected statistic<br>      ,...<br>    ]<br><br>Result:<br>{                           (json object)<br>  \"avgfee\": x.xxx,          (numeric) Average fee in the block<br>  \"avgfeerate\": x.xxx,      (numeric) Average feerate (in BCH per byte)<br>  \"avgtxsize\": xxxxx,       (numeric) Average transaction size<br>  \"blockhash\": xxxxx,       (string) The block hash (to check for potential reorgs)<br>  \"height\": xxxxx,          (numeric) The height of the block<br>  \"ins\": xxxxx,             (numeric) The number of inputs (excluding coinbase)<br>  \"maxfee\": xxxxx,          (numeric) Maximum fee in the block<br>  \"maxfeerate\": xxxxx,      (numeric) Maximum feerate (in BCH per byte)<br>  \"maxtxsize\": xxxxx,       (numeric) Maximum transaction size<br>  \"medianfee\": x.xxx,       (numeric) Truncated median fee in the block<br>  \"medianfeerate\": x.xxx,   (numeric) Truncated median feerate (in BCH per byte)<br>  \"mediantime\": xxxxx,      (numeric) The block median time past<br>  \"mediantxsize\": xxxxx,    (numeric) Truncated median transaction size<br>  \"minfee\": x.xxx,          (numeric) Minimum fee in the block<br>  \"minfeerate\": xx.xx,      (numeric) Minimum feerate (in BCH per byte)<br>  \"mintxsize\": xxxxx,       (numeric) Minimum transaction size<br>  \"outs\": xxxxx,            (numeric) The number of outputs<br>  \"subsidy\": x.xxx,         (numeric) The block subsidy<br>  \"time\": xxxxx,            (numeric) The block time<br>  \"total_out\": x.xxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])<br>  \"total_size\": xxxxx,      (numeric) Total size of all non-coinbase transactions<br>  \"totalfee\": x.xxx,        (numeric) The fee total<br>  \"txs\": xxxxx,             (numeric) The number of transactions (excluding coinbase)<br>  \"utxo_increase\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs<br>  \"utxo_size_inc\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)<br>}<br><br>Examples:<br> bitcoin-cli getblockstats 1000 '[\"minfeerate\",\"avgfeerate\"]'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockstats\", \"params\": [1000 '[\"minfeerate\",\"avgfeerate\"]'] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"parked\"                This branch contains at least one parked block<br>3.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>4.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>5.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>6.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> bitcoin-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintxstats": "getchaintxstats ( nblocks blockhash )<br><br>Compute statistics about the total number and rate of transactions in the chain.<br><br>Arguments:<br>1. nblocks      (numeric, optional) Size of the window in number of blocks (default: one month).<br>2. \"blockhash\"  (string, optional) The hash of the block that ends the window.<br><br>Result:<br>{<br>  \"time\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.<br>  \"txcount\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.<br>  \"window_final_block_hash\": \"...\",      (string) The hash of the final block in the window.<br>  \"window_block_count\": xxxxx,           (numeric) Size of the window in number of blocks.<br>  \"window_tx_count\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0.<br>  \"window_interval\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0.<br>  \"txrate\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0.<br>}<br><br>Examples:<br> bitcoin-cli getchaintxstats <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> bitcoin-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolancestors": "getmempoolancestors txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool ancestors.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) transaction size.<br>    \"fee\" : n,              (numeric) transaction fee in BCH<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempoolancestors \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempooldescendants": "getmempooldescendants txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool descendants.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) transaction size.<br>    \"fee\" : n,              (numeric) transaction fee in BCH<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempooldescendants \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolentry": "getmempoolentry txid<br><br>Returns mempool data for given transaction<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br><br>Result:<br>{                           (json object)<br>    \"size\" : n,             (numeric) transaction size.<br>    \"fee\" : n,              (numeric) transaction fee in BCH<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>}<br><br>Examples:<br> bitcoin-cli getmempoolentry \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Transaction size.<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum fee rate in BCH/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee<br>  \"minrelaytxfee\": xxxxx       (numeric) Current minimum relay fee for transactions<br>}<br><br>Examples:<br> bitcoin-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Hint: use getmempoolentry to fetch a specific transaction from the mempool.<br><br>Arguments:<br>1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) transaction size.<br>    \"fee\" : n,              (numeric) transaction fee in BCH<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction<br>        \"transactionid\",    (string) child transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxout": "gettxout \"txid\" n ( include_mempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"             (string, required) The transaction id<br>2. \"n\"                (numeric, required) vout number<br>3. \"include_mempool\"  (boolean, optional) Whether to include the mempool. Default: true.     Note that an unspent output that is spent in the mempool won't appear.<br><br>Result:<br>{<br>  \"bestblock\" : \"hash\",    (string) the block hash<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in BCH<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of bitcoin addresses<br>        \"address\"     (string) bitcoin address<br>        ,...<br>     ]<br>  },<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> bitcoin-cli listunspent <br><br>View the details<br> bitcoin-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included manually (by blockhash).<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"blockhash\"   (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) the best block hash hex<br>  \"transactions\": n,      (numeric) The number of transactions<br>  \"txouts\": n,            (numeric) The number of output transactions<br>  \"bogosize\": n,          (numeric) A database-independent metric for UTXO set size<br>  \"hash_serialized\": \"hash\",   (string) The serialized hash<br>  \"disk_size\": n,         (numeric) The estimated size of the chainstate on disk<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> bitcoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "preciousblock": "preciousblock \"blockhash\"<br><br>Treats a block as if it were received before others with the same work.<br><br>A later preciousblock call can override the effect of an earlier one.<br><br>The effects of preciousblock are not retained across restarts.<br><br>Arguments:<br>1. \"blockhash\"   (string, required) the hash of the block to mark as precious<br><br>Result:<br><br>Examples:<br> bitcoin-cli preciousblock \"blockhash\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "pruneblockchain": "pruneblockchain<br><br>Arguments:<br>1. \"height\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp<br>                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.<br><br>Result:<br>n    (numeric) Height of the last block pruned.<br><br>Examples:<br> bitcoin-cli pruneblockchain 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "savemempool": "savemempool<br><br>Dumps the mempool to disk. It will fail until the previous dump is fully loaded.<br><br>Examples:<br> bitcoin-cli savemempool <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"savemempool\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel nblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. nblocks      (numeric, optional, default=6, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> bitcoin-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.",
            "getmemoryinfo": "getmemoryinfo (\"mode\")<br>Returns an object containing information about memory usage.<br>Arguments:<br>1. \"mode\" determines what kind of information is returned. This argument is optional, the default mode is \"stats\".<br>  - \"stats\" returns general statistics about memory usage in the daemon.<br>  - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).<br><br>Result (mode \"stats\"):<br>{<br>  \"locked\": {               (json object) Information about locked memory manager<br>    \"used\": xxxxx,          (numeric) Number of bytes used<br>    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas<br>    \"total\": xxxxxxx,       (numeric) Total number of bytes managed<br>    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.<br>    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks<br>    \"chunks_free\": xxxxx,   (numeric) Number unused chunks<br>  }<br>}<br><br>Result (mode \"mallocinfo\"):<br>\"<malloc version=\"1\">...\"<br><br>Examples:<br> bitcoin-cli getmemoryinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "stop": "stop<br><br>Stop Bitcoin server.",
            "uptime": "uptime<br><br>Returns the total uptime of the server.<br><br>Result:<br>ttt        (numeric) The number of seconds that the server has been running<br><br>Examples:<br> bitcoin-cli uptime <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"uptime\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "generate": "generate nblocks ( maxtries )<br><br>Mine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> bitcoin-cli generate 11",
            "generatetoaddress": "generatetoaddress nblocks address (maxtries)<br><br>Mine blocks immediately to a specified address (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. address      (string, required) The address to send the newly generated bitcoin to.<br>3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks to myaddress<br> bitcoin-cli generatetoaddress 11 \"myaddress\"",
            "getblocktemplate": "getblocktemplate ( TemplateRequest )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>For full specification, see BIPs 22, 23, 9, and 145:<br>    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes<br>    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki<br><br>Arguments:<br>1. template_request         (json object, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted<br>       \"capabilities\":[     (array, optional) A list of strings<br>           \"support\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>       ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The preferred block version<br>  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal<br>         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)<br>         \"depends\" : [                (array) array of numbers <br>             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero<br>         \"required\" : true|false      (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig<br>  },<br>  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)<br>  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",                (string) The hash target<br>  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                     (array of string) list of ways the block template may be changed <br>     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> bitcoin-cli getblocktemplate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblocksize\": nnn,   (numeric) The last block size<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"networkhashps\": nnn,      (numeric) The network hashes per second<br>  \"pooledtx\": n              (numeric) The size of the mempool<br>  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"warnings\": \"...\"          (string) any network and blockchain warnings<br>  \"errors\": \"...\"            (string) DEPRECATED. Same as warnings. Only shown when bitcoind is started with -deprecatedrpc=getmininginfo<br>}<br><br>Examples:<br> bitcoin-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( nblocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height      (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> bitcoin-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "prioritisetransaction": "prioritisetransaction <txid> <priority delta> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. priority_delta (numeric, required) The priority to add or subtract.<br>                  The transaction selection algorithm considers the tx as it would have a higher priority.<br>                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) <br>3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result:<br>true              (boolean) Returns true<br><br>Examples:<br> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\"  ( \"dummy\" )<br><br>Attempts to submit new block to network.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"        (string, required) the hex-encoded block data to submit<br>2. \"dummy\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.<br><br>Result:<br><br>Examples:<br> bitcoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts to add or remove a node from the addnode list.<br>Or try a connection to a node once.<br>Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be<br>full nodes as other outbound peers are (though such peers will not be synced from).<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> bitcoin-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "disconnectnode": "disconnectnode \"[address]\" [nodeid]<br><br>Immediately disconnects from the specified peer node.<br><br>Strictly one out of 'address' and 'nodeid' can be provided to identify the node.<br><br>To disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.<br><br>Arguments:<br>1. \"address\"     (string, optional) The IP address/port of the node<br>2. \"nodeid\"      (number, optional) The node ID (see getpeerinfo for node IDs)<br><br>Examples:<br> bitcoin-cli disconnectnode \"192.168.0.6:8333\"<br> bitcoin-cli disconnectnode \"\" 1<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddednodeinfo": "getaddednodeinfo ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br><br>Arguments:<br>1. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node IP address or name (as provided to addnode)<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [                    (list of objects) Only when connected = true<br>       {<br>         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server IP and port we're connected to<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddednodeinfo \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> bitcoin-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getexcessiveblock": "getexcessiveblock<br><br>Return the excessive block size.<br>Result<br>  excessiveBlockSize (integer) block size in bytes<br><br>Examples:<br> bitcoin-cli getexcessiveblock <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexcessiveblock\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networkactive\": true|false,           (bool) whether p2p networking is enabled<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in BCH/kB<br>  \"excessutxocharge\": x.xxxxxxxx,        (numeric) minimum charge for excess utxos in BCH<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network and blockchain warnings<br>}<br><br>Examples:<br> bitcoin-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The IP address and port of the peer<br>    \"addrbind\":\"ip:port\",    (string) Bind address of the connection to the peer<br>    \"addrlocal\":\"ip:port\",   (string) Local address as reported by the peer<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time (if available)<br>    \"minping\": n,              (numeric) minimum observed ping time (if any at all)<br>    \"pingwait\": n,             (numeric) ping wait (if non-zero)<br>    \"version\": v,              (numeric) The peer version, such as 70001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"addnode\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ],<br>    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted<br>    \"bytessent_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes sent aggregated by message type<br>       ...<br>    },<br>    \"bytesrecv_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes received aggregated by message type<br>       ...<br>    }<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> bitcoin-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> bitcoin-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setban": "setban \"subnet\" \"add|remove\" (bantime) (absolute)<br><br>Attempts to add or remove a IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"subnet\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)<br>2. \"command\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400<br> bitcoin-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setexcessiveblock": "setexcessiveblock blockSize<br><br>Set the excessive block size. Excessive blocks will not be used in the active chain or relayed. This  discourages the propagation of blocks that you consider excessively large.<br>Result<br>  blockSize (integer) excessive block size in bytes<br><br>Examples:<br> bitcoin-cli setexcessiveblock <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setexcessiveblock\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setnetworkactive": "setnetworkactive true|false<br><br>Disable/enable all p2p network activity.<br><br>Arguments:<br>1. \"state\"        (boolean, required) true to enable networking, false to disable",
            "combinerawtransaction": "combinerawtransaction [\"hexstring\",...]<br><br>Combine multiple partially signed transactions into one transaction.<br>The combined transaction may be another partially signed transaction or a <br>fully signed transaction.<br>Arguments:<br>1. \"txs\"         (string) A json array of hex strings of partially signed transactions<br>    [<br>      \"hexstring\"     (string) A transaction hash<br>      ,...<br>    ]<br><br>Result:<br>\"hex\"            (string) The hex-encoded raw transaction with signature(s)<br><br>Examples:<br> bitcoin-cli combinerawtransaction [\"myhex1\", \"myhex2\", \"myhex3\"]",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] [{\"address\":amount},{\"data\":\"hex\"},...] ( locktime )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"inputs\"                (array, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",      (string, required) The transaction id<br>         \"vout\":n,         (numeric, required) The output number<br>         \"sequence\":n      (numeric, optional) The sequence number<br>       } <br>       ,...<br>     ]<br>2. \"outputs\"               (array, required) a json array with outputs (key-value pairs)<br>   [<br>    {<br>      \"address\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BCH<br>    },<br>    {<br>      \"data\": \"hex\"        (obj, optional) A key-value pair. The key must be \"data\", the value is hex encoded data<br>    }<br>    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also<br>                             accepted as second parameter.<br>   ]<br>3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br><br>Result:<br>\"transaction\"              (string) hex string of the transaction<br><br>Examples:<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"address\":0.01}]\"<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"[{\"data\":\"00010203\"}]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"[{\"address\":0.01}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"[{\"data\":\"00010203\"}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\"<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hexstring\"      (string, required) The transaction hex string<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BCH<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> bitcoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hexstring\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hexstring\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) bitcoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).<br>}<br><br>Examples:<br> bitcoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" ( options )<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add at most one change output to the outputs.<br>No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must be<br>in the wallet using importaddress or addmultisigaddress (to calculate fees).<br>You can see whether this is the case by checking the \"solvable\" field in the listunspent output.<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. \"hexstring\"           (string, required) The hex string of the raw transaction<br>2. options                 (object, optional)<br>   {<br>     \"changeAddress\"          (string, optional, default pool address) The bitcoin address to receive the change<br>     \"changePosition\"         (numeric, optional, default random) The index of the change output<br>     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only<br>     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs<br>     \"reserveChangeKey\"       (boolean, optional) DEPRECATED.  Reserves the change output key from the keypool<br>     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in BCH/kB<br>     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.<br>                              The fee will be equally deducted from the amount of each specified output.<br>                              The outputs are specified by their zero-based index, before any change output is added.<br>                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                              If no outputs are specified here, the sender pays the fee.<br>                                  [vout_index,...]<br>   }<br>                         for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee in BCH the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> bitcoin-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> bitcoin-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> bitcoin-cli sendrawtransaction \"signedtransactionhex\"",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose \"blockhash\" )<br><br>NOTE: By default this function only works for mempool transactions. If the -txindex option is<br>enabled, it also works for blockchain transactions. If the block which contains the transaction<br>is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is<br>provided, only that block will be searched and if the transaction is in the mempool or other<br>blocks, or if this node does not have the given block available, the transaction will not be found.<br>DEPRECATED: for now, it also works for transactions with unspent outputs.<br><br>Return the raw transaction data.<br><br>If verbose is 'true', returns an Object with information about 'txid'.<br>If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object<br>3. \"blockhash\" (string, optional) The block in which to look for the transaction<br><br>Result (if verbose is not set or set to false):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose is set to true):<br>{<br>  \"in_active_chain\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \"blockhash\" argument)<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The serialized transaction size<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BCH<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"address\"        (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> bitcoin-cli getrawtransaction \"mytxid\"<br> bitcoin-cli getrawtransaction \"mytxid\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> bitcoin-cli getrawtransaction \"mytxid\" false \"myblockhash\"<br> bitcoin-cli getrawtransaction \"mytxid\" true \"myblockhash\"",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> bitcoin-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>DEPRECATED.Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\",   (string, required for P2SH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"privkeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL|FORKID\"<br>       \"NONE|FORKID\"<br>       \"SINGLE|FORKID\"<br>       \"ALL|FORKID|ANYONECANPAY\"<br>       \"NONE|FORKID|ANYONECANPAY\"<br>       \"SINGLE|FORKID|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransactionwithkey": "signrawtransactionwithkey \"hexstring\" [\"privatekey1\",...] ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second argument is an array of base58-encoded private<br>keys that will be the only keys used to sign the transaction.<br>The third optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br><br>Arguments:<br>1. \"hexstring\"                      (string, required) The transaction hex string<br>2. \"privkeys\"                       (string, required) A json array of base58-encoded private keys for signing<br>    [                               (json array of strings)<br>      \"privatekey\"                  (string) private key in base58-encoding<br>      ,...<br>    ]<br>3. \"prevtxs\"                        (string, optional) An json array of previous dependent transaction outputs<br>     [                              (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",               (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",     (string, required) script key<br>         \"redeemScript\": \"hex\",     (string, required for P2SH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>4. \"sighashtype\"                    (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL|FORKID\"<br>       \"NONE|FORKID\"<br>       \"SINGLE|FORKID\"<br>       \"ALL|FORKID|ANYONECANPAY\"<br>       \"NONE|FORKID|ANYONECANPAY\"<br>       \"SINGLE|FORKID|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",                  (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,          (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                      (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",              (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                   (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",          (string) The hex-encoded signature script<br>      \"sequence\" : n,               (numeric) Script sequence number<br>      \"error\" : \"text\"              (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransactionwithkey \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransactionwithkey\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "testmempoolaccept": "testmempoolaccept [\"rawtxs\"] ( allowhighfees )<br><br>Returns if raw transaction (serialized, hex-encoded) would be accepted by mempool.<br><br>This checks if the transaction violates the consensus or policy rules.<br><br>See sendrawtransaction call.<br><br>Arguments:<br>1. [\"rawtxs\"]       (array, required) An array of hex strings of raw transactions.<br>                                        Length must be one for now.<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.<br>                            Length is exactly one for now.<br> {<br>  \"txid\"           (string) The transaction hash in hex<br>  \"allowed\"        (boolean) If the mempool allows this tx to be inserted<br>  \"reject-reason\"  (string) Rejection string (only present when 'allowed' is false)<br> }<br>]<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Test acceptance of the transaction (signed hex)<br> bitcoin-cli testmempoolaccept \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"testmempoolaccept\", \"params\": [[\"signedhex\"]] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br>DEPRECATION WARNING: Using addresses with createmultisig is deprecated. Clients must<br>transition to using addmultisigaddress to create multisig addresses with addresses known<br>to the wallet before upgrading to v0.20. To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig<br><br>Arguments:<br>1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"       (string, required) A json array of hex-encoded public keys<br>     [<br>       \"key\"    (string) The hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 public keys<br> bitcoin-cli createmultisig 2 \"[\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\",\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "estimatefee": "estimatefee<br><br>Estimates the approximate fee per kilobyte needed for a transaction<br><br>Result:<br>n              (numeric) estimated fee-per-kilobyte<br><br>Example:<br> bitcoin-cli estimatefee",
            "signmessagewithprivkey": "signmessagewithprivkey \"privkey\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"privkey\"         (string, required) The private key to sign the message with.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Create the signature<br> bitcoin-cli signmessagewithprivkey \"privkey\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "validateaddress": "validateaddress \"address\"<br><br>Return information about the given bitcoin address.<br>DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must<br>transition to using getaddressinfo to access this information before upgrading to v0.20. The following deprecated<br>fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,<br>script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.<br><br>Arguments:<br>1. \"address\"                    (string, required) The bitcoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"address\",        (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>}<br><br>Examples:<br> bitcoin-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"address\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already abandoned.<br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br><br>Result:<br><br>Examples:<br> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abortrescan": "abortrescan<br><br>Stops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.<br><br>Examples:<br><br>Import a private key<br> bitcoin-cli importprivkey \"mykey\"<br><br>Abort the running wallet rescan<br> bitcoin-cli abortrescan <br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abortrescan\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"label\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.<br>Each key is a Bitcoin address or hex-encoded public key.<br>If 'label' is specified (DEPRECATED), assign address to that label.<br><br>Arguments:<br>1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"         (string, required) A json array of bitcoin addresses or hex-encoded public keys<br>     [<br>       \"address\"  (string) bitcoin address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"label\"                        (string, optional) A label to assign the addresses to.<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",    (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"         (string) The string value of the hex-encoded redemption script.<br>}<br><br>Result (DEPRECATED. To see this result in v0.19.6 instead, please start bitcoind with -deprecatedrpc=addmultisigaddress).<br>        clients should transition to the new output api before upgrading to v0.20.<br>\"address\"                         (string) A bitcoin address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> bitcoin-cli addmultisigaddress 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies current wallet file to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> bitcoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpprivkey": "dumpprivkey \"address\"<br><br>Reveals the private key corresponding to 'address'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"address\"   (string, required) The bitcoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> bitcoin-cli dumpprivkey \"myaddress\"<br> bitcoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.<br>Imported scripts are included in the dumpsfile, but corresponding addresses may not be added automatically by importwallet.<br>Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by<br>only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename with path (either absolute or relative to bitcoind)<br><br>Result:<br>{                           (json object)<br>  \"filename\" : {        (string) The filename with full absolute path<br>}<br><br>Examples:<br> bitcoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt your wallet<br> bitcoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending bitcoin<br> bitcoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can do something like sign<br> bitcoin-cli signmessage \"address\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> bitcoin-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccount": "getaccount \"address\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> bitcoin-cli getaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getlabeladdress": "",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"        (string, required) The account name.<br><br>Result:<br>[                     (json array of string)<br>  \"address\"         (string) a bitcoin address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressinfo": "getaddressinfo \"address\"<br><br>Return information about the given bitcoin address. Some information requires the address<br>to be in the wallet.<br><br>Arguments:<br>1. \"address\"                    (string, required) The bitcoin address to get the information of.<br><br>Result:<br>{<br>  \"address\" : \"address\",        (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"script\" : \"type\"             (string, optional) The output script type. Only if \"isscript\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown<br>  \"hex\" : \"hex\",                (string, optional) The redeemscript for the p2sh address<br>  \"pubkeys\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \"script\" is \"multisig\")<br>    [<br>      \"pubkey\"<br>      ,...<br>    ]<br>  \"sigsrequired\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \"script\" is \"multisig\")<br>  \"pubkey\" : \"publickeyhex\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)<br>  \"embedded\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\"timestamp\", \"hdkeypath\", \"hdmasterkeyid\") and relation to the wallet (\"ismine\", \"iswatchonly\", \"account\").<br>  \"iscompressed\" : true|false,  (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) The account associated with the address, \"\" is the default account<br>  \"timestamp\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)<br>  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available<br>  \"hdmasterkeyid\" : \"<hash160>\" (string, optional) The Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> bitcoin-cli getaddressinfo \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressinfo\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"account\" minconf include_watchonly )<br><br>If account is not specified, returns the server's total available balance.<br>The available balance is what the wallet considers currently spendable,<br>and is thus affected by options which limit spendability such as -spendzeroconfchange.<br>If account is specified (DEPRECATED), returns the balance in the account.<br>Note that the account \"\" is not the same as leaving the parameter out.<br>The server total may be different to the balance in the default \"\" account.<br><br>Arguments:<br>1. \"account\"         (string, optional) DEPRECATED. The account string may be given as a<br>                     specific account name to find the balance associated with wallet keys in<br>                     a named account, or as the empty string (\"\") to find the balance<br>                     associated with wallet keys not in any named account, or as \"*\" to find<br>                     the balance associated with all wallet keys regardless of account.<br>                     When this option is specified, it calculates the balance in a different<br>                     way than when it is not specified, and which can count spends twice when<br>                     there are conflicting pending transactions temporarily resulting in low<br>                     or even negative balances.<br>                     In general, account balance calculation is not considered reliable and<br>                     has resulted in confusing outcomes, so it is recommended to avoid passing<br>                     this argument.<br>2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in BCH received for this account.<br><br>Examples:<br><br>The total amount in the wallet with 1 or more confirmations<br> bitcoin-cli getbalance <br><br>The total amount in the wallet at least 6 blocks confirmed<br> bitcoin-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"label\" )<br><br>Returns a new Bitcoin address for receiving payments.<br>If 'label' is specified, it is added to the address book <br>so payments received with the address will be associated with 'label'.<br><br>Arguments:<br>1. \"label\"          (string, optional) The label name for the address to be linked to. If not provided, the default label \"\" is used. It can also be set to the empty string \"\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.<br><br>Result:<br>\"address\"    (string) The new bitcoin address<br><br>Examples:<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress<br><br>Returns a new Bitcoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> bitcoin-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbylabel": "",
            "getreceivedbyaddress": "getreceivedbyaddress \"address\" ( minconf )<br><br>Returns the total amount received by the given address in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in BCH received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 0<br><br>The amount with at least 6 confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( include_watchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"                  (string, required) The transaction id<br>2. \"include_watchonly\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in BCH<br>  \"fee\": x.xxx,            (numeric) The amount of the fee in BCH. This is negative and only available for the <br>                              'send' category of transactions.<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",      (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.<br>      \"address\" : \"address\",          (string) The bitcoin address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx,                 (numeric) The amount in BCH<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                       (numeric) the vout value<br>      \"fee\": x.xxx,                     (numeric) The amount of the fee in BCH. This is negative and only available for the <br>                                           'send' category of transactions.<br>      \"abandoned\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                           'send' category of transactions.<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletname\": xxxxx,             (string) the wallet name<br>  \"walletversion\": xxxxx,          (numeric) the wallet version<br>  \"balance\": xxxxxxx,              (numeric) the total confirmed balance of the wallet in BCH<br>  \"unconfirmed_balance\": xxx,      (numeric) the total unconfirmed balance of the wallet in BCH<br>  \"immature_balance\": xxxxxx,      (numeric) the total immature balance of the wallet in BCH<br>  \"txcount\": xxxxxxx,              (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,         (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,             (numeric) how many new keys are pre-generated (only counts external keys)<br>  \"keypoolsize_hd_internal\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)<br>  \"unlocked_until\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,              (numeric) the transaction fee configuration, set in BCH/kB<br>  \"hdmasterkeyid\": \"<hash160>\"     (string, optional) the Hash160 of the HD master pubkey (only present when HD is enabled)<br>}<br><br>Examples:<br> bitcoin-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Arguments:<br>1. \"script\"           (string, required) The hex-encoded script (or address)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls<br>may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br>If you have the full public key, you should call importpubkey instead of this.<br><br>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated<br>as change, and not show up in many RPCs.<br><br>Examples:<br><br>Import a script with rescan<br> bitcoin-cli importaddress \"myscript\"<br><br>Import using a label without rescan<br> bitcoin-cli importaddress \"myscript\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myscript\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importmulti": "importmulti \"requests\" ( \"options\" )<br><br>Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.<br><br>Arguments:<br>1. requests     (array, required) Data to be imported<br>  [     (array of json objects)<br>    {<br>      \"scriptPubKey\": \"<script>\" | { \"address\":\"<address>\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)<br>      \"timestamp\": timestamp | \"now\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),<br>                                                              or the string \"now\" to substitute the current synced blockchain time. The timestamp of the oldest<br>                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.<br>                                                              \"now\" can be specified to bypass scanning, for keys which are known to never have been used, and<br>                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key<br>                                                              creation time of all keys being imported by the importmulti call will be scanned.<br>      \"redeemscript\": \"<script>\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey<br>      \"pubkeys\": [\"<pubKey>\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript<br>      \"keys\": [\"<key>\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript<br>      \"internal\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments<br>      \"watchonly\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty<br>      \"label\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false<br>    }<br>  ,...<br>  ]<br>2. options                 (json, optional)<br>  {<br>     \"rescan\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports<br>  }<br><br>Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls<br>may report that the imported keys, addresses or scripts exists but related transactions are still missing.<br><br>Examples:<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'<br><br>Response is an array with the same size as the input that has the execution result :<br>  [{ \"success\": true } , { \"success\": false, \"error\": { \"code\": -1, \"message\": \"Internal Server Error\"} }, ... ]",
            "importprivkey": "importprivkey \"privkey\" ( \"label\" ) ( rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.<br><br>Arguments:<br>1. \"privkey\"   (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls<br>may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br><br>Examples:<br><br>Dump a private key<br> bitcoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> bitcoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"testing\" false<br><br>Import using default blank label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprunedfunds": "importprunedfunds<br><br>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.<br><br>Arguments:<br>1. \"rawtransaction\" (string, required) A raw transaction in hex funding an already-existing address in wallet<br>2. \"txoutproof\"     (string, required) The hex output from gettxoutproof that contains the transaction",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.<br><br>Arguments:<br>1. \"pubkey\"           (string, required) The hex-encoded public key<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls<br>may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.<br><br>Examples:<br><br>Import a public key with rescan<br> bitcoin-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> bitcoin-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> bitcoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> bitcoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> bitcoin-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaccounts": "listaccounts ( minconf include_watchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see 'importaddress')<br><br>Result:<br>{                      (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> bitcoin-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> bitcoin-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> bitcoin-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"address\",            (string) The bitcoin address<br>      amount,                 (numeric) The amount in BCH<br>      \"label\"               (string, optional) The label<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbylabel": "",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf include_empty include_watchonly address_filter )<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br>4. address_filter    (string, optional) If present, only return information on this address.<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. Backwards compatible alias for label.<br> \"\".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in BCH received by the address<br>    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\",               (string) The label of the receiving address. The default label is \"\".<br>    \"txids\": [<br>       n,                                (numeric) The ids of transactions received with the address <br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaddress <br> bitcoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true, \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listsinceblock": "listsinceblock ( \"blockhash\" target_confirmations include_watchonly include_removed )<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted.<br>If \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included.<br>Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.<br><br>Arguments:<br>1. \"blockhash\"            (string, optional) The block hash to list transactions since<br>2. target_confirmations:    (numeric, optional, default=1) Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value<br>3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br>4. include_removed:         (bool, optional, default=true) Show transactions that were removed due to a reorg in the \"removed\" array<br>                                                           (not guaranteed to work on pruned nodes)<br><br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in BCH. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BCH. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>                                          When it's < 0, it means the transaction conflicted that many blocks ago.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"abandoned\": xxx,         (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"       (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"removed\": [<br>    <structure is the same as \"transactions\" above, only present if include_removed=true><br>    Note: transactions that were readded in the active chain will appear as-is in this array, and may thus have a positive confirmation count.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones<br>}<br><br>Examples:<br> bitcoin-cli listsinceblock <br> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions ( \"account\" count skip include_watchonly)<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.<br><br>Arguments:<br>1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. skip           (numeric, optional, default=0) The number of transactions to skip<br>4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \"\" for the default account.<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. 'send' and 'receive' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in BCH. This is negative for the 'send' category, and for the<br>                                         'move' category for moves outbound. It is positive for the 'receive' category,<br>                                         and for the 'move' category for inbound funds.<br>    \"label\": \"label\",       (string) A comment for the address/transaction, if any<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BCH. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and <br>                                         'receive' category of transactions. Negative confirmations indicate the<br>                                         transaction conflicts with the block chain<br>    \"trusted\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"otheraccount\": \"accountname\",  (string) DEPRECATED. For the 'move' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                         'send' category of transactions.<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> bitcoin-cli listtransactions <br><br>List transactions 100 to 120<br> bitcoin-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf  [\"addresses\",...] [include_unsafe] [query_options])<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"      (string) A json array of bitcoin addresses to filter<br>    [<br>      \"address\"     (string) bitcoin address<br>      ,...<br>    ]<br>4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend<br>                  See description of \"safe\" attribute below.<br>5. query_options    (json, optional) JSON with query options<br>    {<br>      \"minimumAmount\"    (numeric or string, default=0) Minimum value of each UTXO in BCH<br>      \"maximumAmount\"    (numeric or string, default=unlimited) Maximum value of each UTXO in BCH<br>      \"maximumCount\"     (numeric or string, default=unlimited) Maximum number of UTXOs<br>      \"minimumSumAmount\" (numeric or string, default=unlimited) Minimum sum value of all UTXOs in BCH<br>    }<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",    (string) the bitcoin address<br>    \"label\" : \"label\",        (string) The associated label, or \"\" for the default label<br>    \"account\" : \"account\",    (string) DEPRECATED. Backwards compatible alias for label.<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction output amount in BCH<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH<br>    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output<br>    \"solvable\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys<br>    \"safe\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions<br>                              from outside keys are considered unsafe and are not eligible for spending by<br>                              fundrawtransaction and sendtoaddress.<br>  }<br>  ,...<br>]<br><br>Examples<br> bitcoin-cli listunspent <br> bitcoin-cli listunspent 6 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> bitcoin-cli listunspent 6 9999999 '[]' true '{ \"minimumAmount\": 0.005 }'<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999, [] , true, { \"minimumAmount\": 0.005 } ] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listwallets": "listwallets<br>Returns a list of currently loaded wallets.<br>For full information on the wallet, use \"getwalletinfo\"<br><br>Result:<br>[                         (json array of strings)<br>  \"walletname\"            (string) the wallet name<br>   ...<br>]<br><br>Examples:<br> bitcoin-cli listwallets <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listwallets\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "loadwallet": "loadwallet \"filename\"<br><br>Loads a wallet from a wallet file or directory.<br>Note that all wallet command-line options used when starting bitcoind will be<br>applied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet directory or .dat file.<br><br>Result:<br>{<br>  \"name\" :    <wallet_name>,        (string) The wallet name if loaded successfully.<br>  \"warning\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.<br>}<br><br>Examples:<br> bitcoin-cli loadwallet \"test.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"loadwallet\", \"params\": [\"test.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock ([{\"txid\":\"txid\",\"vout\":n},...])<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.<br>A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"   (string, required) The name of the account to move funds from. May be the default account using \"\".<br>2. \"toaccount\"     (string, required) The name of the account to move funds to. May be the default account using \"\".<br>3. amount            (numeric) Quantity of BCH to move between accounts.<br>4. (dummy)           (numeric, optional) Ignored. Remains for backward compatibility.<br>5. \"comment\"       (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false           (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 BCH from the default account to the account named tabby<br> bitcoin-cli move \"\" \"tabby\" 0.01<br><br>Move 0.01 BCH timotei to akiko with a comment and funds have 6 confirmations<br> bitcoin-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "removeprunedfunds": "removeprunedfunds \"txid\"<br><br>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.<br><br>Arguments:<br>1. \"txid\"           (string, required) The hex-encoded id of the transaction you are deleting<br><br>Examples:<br> bitcoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removeprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "rescanblockchain": "rescanblockchain (\"start_height\") (\"stop_height\")<br><br>Rescan the local blockchain for wallet related transactions.<br><br>Arguments:<br>1. \"start_height\"    (numeric, optional) block height where the rescan should start<br>2. \"stop_height\"     (numeric, optional) the last block height that should be scanned<br><br>Result:<br>{<br>  \"start_height\"     (numeric) The block height where the rescan has started. If omitted, rescan started from the genesis block.<br>  \"stop_height\"      (numeric) The height of the last rescanned block. If omitted, rescan stopped at the chain tip.<br>}<br><br>Examples:<br> bitcoin-cli rescanblockchain 100000 120000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"rescanblockchain\", \"params\": [100000 120000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendfrom": "sendfrom \"fromaccount\" \"toaddress\" amount ( minconf \"comment\" \"comment_to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) The name of the account to send funds from. May be the default account using \"\".<br>                       Specifying an account does not influence coin selection, but it does associate the newly created<br>                       transaction with the account, so the account's balance computation and transaction history can reflect<br>                       the spend.<br>2. \"toaddress\"         (string, required) The bitcoin address to send funds to.<br>3. amount                (numeric or string, required) The amount in BCH (transaction fee is added on top).<br>4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                                     This is not part of the transaction, just kept in your wallet.<br>6. \"comment_to\"        (string, optional) An optional comment to store the name of the person or organization <br>                                     to which you're sending the transaction. This is not part of the transaction, <br>                                     it is just kept in your wallet.<br><br>Result:<br>\"txid\"                 (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 BCH from the default account to the address, must have at least 1 confirmation<br> bitcoin-cli sendfrom \"\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> bitcoin-cli sendfrom \"tabby\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01 6 \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br><br>Arguments:<br>1. \"fromaccount\"         (string, required) DEPRECATED. The account to send the funds from. Should be \"\" for the default account<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in BCH is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefrom         (array, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"          (string) Subtract fee from this address<br>      ,...<br>    ]<br><br>Result:<br>\"txid\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \"\" \"[\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"address\" amount ( \"comment\" \"comment_to\" subtractfeefromamount )<br><br>Send an amount to a given address.<br><br>Arguments:<br>1. \"address\"            (string, required) The bitcoin address to send to.<br>2. \"amount\"             (numeric or string, required) The amount in BCH to send. eg 0.1<br>3. \"comment\"            (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment_to\"         (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less bitcoins than you enter in the amount field.<br><br>Result:<br>\"txid\"                  (string) The transaction id.<br><br>Examples:<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"\" \"\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setlabel": "",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.<br><br>Arguments:<br>1. amount         (numeric or string, required) The transaction fee in BCH/kB<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> bitcoin-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"address\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransactionwithwallet": "signrawtransactionwithwallet \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br><br><br>Arguments:<br>1. \"hexstring\"                      (string, required) The transaction hex string<br>2. \"prevtxs\"                        (string, optional) An json array of previous dependent transaction outputs<br>     [                              (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",               (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",     (string, required) script key<br>         \"redeemScript\": \"hex\",     (string, required for P2SH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"sighashtype\"                    (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL|FORKID\"<br>       \"NONE|FORKID\"<br>       \"SINGLE|FORKID\"<br>       \"ALL|FORKID|ANYONECANPAY\"<br>       \"NONE|FORKID|ANYONECANPAY\"<br>       \"SINGLE|FORKID|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",                  (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,          (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                      (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",              (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                   (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",          (string) The hex-encoded signature script<br>      \"sequence\" : n,               (numeric) Script sequence number<br>      \"error\" : \"text\"              (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransactionwithwallet \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransactionwithwallet\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
        },
        "14": {
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest blockchain.<br><br>Result:<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples:<br> bitcoin-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblock": "getblock \"blockhash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbose is true, returns an Object with information about block <hash>.<br><br>Arguments:<br>1. \"blockhash\"          (string, required) The block hash<br>2. verbose                (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"strippedsize\" : n,    (numeric) The block size excluding witness data<br>  \"weight\" : n           (numeric) The block weight as defined in BIP 141<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding blockchain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",        (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\", (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,     (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,     (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal<br>  \"pruned\": xx,             (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,    (numeric) lowest-height complete block stored<br>  \"softforks\": [            (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",        (string) name of softfork<br>        \"version\": xx,         (numeric) block version<br>        \"reject\": {            (object) progress toward rejecting pre-softfork blocks<br>           \"status\": xx,       (boolean) true if threshold reached<br>        },<br>     }, ...<br>  ],<br>  \"bip9_softforks\": {          (object) status of BIP9 softforks in progress<br>     \"xxxx\" : {                (string) name of the softfork<br>        \"status\": \"xxxx\",    (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"<br>        \"bit\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)<br>        \"startTime\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning<br>        \"timeout\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in<br>        \"since\": xx            (numeric) height of the first block to which the status applies<br>     }<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest blockchain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> bitcoin-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash height<br><br>Returns hash of block in best-block-chain at height provided.<br><br>Arguments:<br>1. height         (numeric, required) The height index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> bitcoin-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> bitcoin-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> bitcoin-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolancestors": "getmempoolancestors txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool ancestors.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempoolancestors \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempooldescendants": "getmempooldescendants txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool descendants.<br><br>Arguments:<br>1. \"txid\"                 (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getmempooldescendants \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolentry": "getmempoolentry txid<br><br>Returns mempool data for given transaction<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br><br>Result:<br>{                           (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>}<br><br>Examples:<br> bitcoin-cli getmempoolentry \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum fee for tx to be accepted<br>}<br><br>Examples:<br> bitcoin-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Hint: use getmempoolentry to fetch a specific transaction from the mempool.<br><br>Arguments:<br>1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) DEPRECATED. Priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) DEPRECATED. Transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples:<br> bitcoin-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxout": "gettxout \"txid\" n ( include_mempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id<br>2. n              (numeric, required) vout number<br>3. include_mempool  (boolean, optional) Whether to include the mempool<br><br>Result:<br>{<br>  \"bestblock\" : \"hash\",    (string) the block hash<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in BTC<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of bitcoin addresses<br>        \"address\"     (string) bitcoin address<br>        ,...<br>     ]<br>  },<br>  \"version\" : n,            (numeric) The version<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> bitcoin-cli listunspent <br><br>View the details<br> bitcoin-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included manually (by blockhash).<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"blockhash\"   (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) the best block hash hex<br>  \"transactions\": n,      (numeric) The number of transactions<br>  \"txouts\": n,            (numeric) The number of output transactions<br>  \"bytes_serialized\": n,  (numeric) The serialized size<br>  \"hash_serialized\": \"hash\",   (string) The serialized hash<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> bitcoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "preciousblock": "preciousblock \"blockhash\"<br><br>Treats a block as if it were received before others with the same work.<br><br>A later preciousblock call can override the effect of an earlier one.<br><br>The effects of preciousblock are not retained across restarts.<br><br>Arguments:<br>1. \"blockhash\"   (string, required) the hash of the block to mark as precious<br><br>Result:<br><br>Examples:<br> bitcoin-cli preciousblock \"blockhash\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "pruneblockchain": "pruneblockchain<br><br>Arguments:<br>1. \"height\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp<br>                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.<br><br>Result:<br>n    (numeric) Height of the last block pruned.<br><br>Examples:<br> bitcoin-cli pruneblockchain 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"pruneblockchain\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel nblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. nblocks      (numeric, optional, default=6, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> bitcoin-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid",
            "getinfo": "getinfo<br><br>DEPRECATED. Returns an object containing various state info.<br><br>Result:<br>{<br>  \"version\": xxxxx,           (numeric) the server version<br>  \"protocolversion\": xxxxx,   (numeric) the protocol version<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet<br>  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server<br>  \"timeoffset\": xxxxx,        (numeric) the time offset<br>  \"connections\": xxxxx,       (numeric) the number of connections<br>  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server<br>  \"difficulty\": xxxxxx,       (numeric) the current difficulty<br>  \"testnet\": true|false,      (boolean) if the server is using testnet or not<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in BTC/kB<br>  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in BTC/kB<br>  \"errors\": \"...\"           (string) any error messages<br>}<br><br>Examples:<br> bitcoin-cli getinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmemoryinfo": "getmemoryinfo<br>Returns an object containing information about memory usage.<br><br>Result:<br>{<br>  \"locked\": {               (json object) Information about locked memory manager<br>    \"used\": xxxxx,          (numeric) Number of bytes used<br>    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas<br>    \"total\": xxxxxxx,       (numeric) Total number of bytes managed<br>    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.<br>    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks<br>    \"chunks_free\": xxxxx,   (numeric) Number unused chunks<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getmemoryinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "stop": "stop<br><br>Stop Bitcoin server.",
            "generate": "generate nblocks ( maxtries )<br><br>Mine up to nblocks blocks immediately (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> bitcoin-cli generate 11",
            "generatetoaddress": "generatetoaddress nblocks address (maxtries)<br><br>Mine blocks immediately to a specified address (before the RPC call returns)<br><br>Arguments:<br>1. nblocks      (numeric, required) How many blocks are generated immediately.<br>2. address      (string, required) The address to send the newly generated bitcoin to.<br>3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result:<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks to myaddress<br> bitcoin-cli generatetoaddress 11 \"myaddress\"",
            "getblocktemplate": "getblocktemplate ( TemplateRequest )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>For full specification, see BIPs 22, 23, 9, and 145:<br>    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes<br>    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki<br><br>Arguments:<br>1. template_request         (json object, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted<br>       \"capabilities\":[     (array, optional) A list of strings<br>           \"support\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>       ],<br>       \"rules\":[            (array, optional) A list of strings<br>           \"support\"          (string) client side supported softfork deployment<br>           ,...<br>       ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The preferred block version<br>  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced<br>  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments<br>      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule<br>      ,...<br>  },<br>  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions<br>  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal<br>         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)<br>         \"depends\" : [                (array) array of numbers <br>             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero<br>         \"weight\" : n,                (numeric) total transaction weight, as counted for purposes of block limits<br>         \"required\" : true|false      (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig<br>  },<br>  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)<br>  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",                (string) The hash target<br>  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                     (array of string) list of ways the block template may be changed <br>     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"weightlimit\" : n,                (numeric) limit of block weight<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> bitcoin-cli getblocktemplate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblocksize\": nnn,   (numeric) The last block size<br>  \"currentblockweight\": nnn, (numeric) The last block weight<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"errors\": \"...\"            (string) Current errors<br>  \"networkhashps\": nnn,      (numeric) The network hashes per second<br>  \"pooledtx\": n              (numeric) The size of the mempool<br>  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)<br>}<br><br>Examples:<br> bitcoin-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( nblocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height      (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> bitcoin-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "prioritisetransaction": "prioritisetransaction <txid> <priority delta> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. priority_delta (numeric, required) The priority to add or subtract.<br>                  The transaction selection algorithm considers the tx as it would have a higher priority.<br>                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) <br>3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result:<br>true              (boolean) Returns true<br><br>Examples:<br> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\" ( \"jsonparametersobject\" )<br><br>Attempts to submit new block to network.<br>The 'jsonparametersobject' parameter is currently ignored.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"        (string, required) the hex-encoded block data to submit<br>2. \"parameters\"     (string, optional) object of optional parameters<br>    {<br>      \"workid\" : \"id\"    (string, optional) if the server provided a workid, it MUST be included with submissions<br>    }<br><br>Result:<br><br>Examples:<br> bitcoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts add or remove a node from the addnode list.<br>Or try a connection to a node once.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> bitcoin-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "disconnectnode": "disconnectnode \"address\" <br><br>Immediately disconnects from the specified node.<br><br>Arguments:<br>1. \"address\"     (string, required) The IP address/port of the node<br><br>Examples:<br> bitcoin-cli disconnectnode \"192.168.0.6:8333\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddednodeinfo": "getaddednodeinfo ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br><br>Arguments:<br>1. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node ip address or name (as provided to addnode)<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [                    (list of objects) Only when connected = true<br>       {<br>         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server IP and port we're connected to<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddednodeinfo true<br> bitcoin-cli getaddednodeinfo true \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> bitcoin-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networkactive\": true|false,           (bool) whether p2p networking is enabled<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in BTC/kB<br>  \"incrementalfee\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network warnings<br>}<br><br>Examples:<br> bitcoin-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The ip address and port of the peer<br>    \"addrlocal\":\"ip:port\",   (string) local address<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time (if available)<br>    \"minping\": n,              (numeric) minimum observed ping time (if any at all)<br>    \"pingwait\": n,             (numeric) ping wait (if non-zero)<br>    \"version\": v,              (numeric) The peer version, such as 7001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"addnode\": true|false,     (boolean) Whether connection was due to addnode and is using an addnode slot<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ],<br>    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted<br>    \"bytessent_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes sent aggregated by message type<br>       ...<br>    },<br>    \"bytesrecv_per_msg\": {<br>       \"addr\": n,              (numeric) The total bytes received aggregated by message type<br>       ...<br>    }<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> bitcoin-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> bitcoin-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setban": "setban \"subnet\" \"add|remove\" (bantime) (absolute)<br><br>Attempts add or remove a IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"subnet\"       (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)<br>2. \"command\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400<br> bitcoin-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setnetworkactive": "setnetworkactive true|false<br><br>Disable/enable all p2p network activity.<br><br>Arguments:<br>1. \"state\"        (boolean, required) true to enable networking, false to disable",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,\"data\":\"hex\",...} ( locktime )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"inputs\"                (array, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",    (string, required) The transaction id<br>         \"vout\":n,         (numeric, required) The output number<br>         \"sequence\":n      (numeric, optional) The sequence number<br>       } <br>       ,...<br>     ]<br>2. \"outputs\"               (object, required) a json object with outputs<br>    {<br>      \"address\": x.xxx,    (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the BTC amount<br>      \"data\": \"hex\"      (string, required) The key is \"data\", the value is hex encoded data<br>      ,...<br>    }<br>3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br><br>Result:<br>\"transaction\"              (string) hex string of the transaction<br><br>Examples:<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"data\":\"00010203\"}\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"data\":\"00010203\"}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\"<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hexstring\"      (string, required) The transaction hex string<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> bitcoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hexstring\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hexstring\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) bitcoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).<br>}<br><br>Examples:<br> bitcoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" ( options )<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add at most one change output to the outputs.<br>No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must be<br>in the wallet using importaddress or addmultisigaddress (to calculate fees).<br>You can see whether this is the case by checking the \"solvable\" field in the listunspent output.<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. \"hexstring\"           (string, required) The hex string of the raw transaction<br>2. options                 (object, optional)<br>   {<br>     \"changeAddress\"          (string, optional, default pool address) The bitcoin address to receive the change<br>     \"changePosition\"         (numeric, optional, default random) The index of the change output<br>     \"includeWatching\"        (boolean, optional, default false) Also select inputs which are watch only<br>     \"lockUnspents\"           (boolean, optional, default false) Lock selected unspent outputs<br>     \"reserveChangeKey\"       (boolean, optional, default true) Reserves the change output key from the keypool<br>     \"feeRate\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (BTC per KB)<br>     \"subtractFeeFromOutputs\" (array, optional) A json array of integers.<br>                              The fee will be equally deducted from the amount of each specified output.<br>                              The outputs are specified by their zero-based index, before any change output is added.<br>                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                              If no outputs are specified here, the sender pays the fee.<br>                                  [vout_index,...]<br>   }<br>                         for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee in BTC the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> bitcoin-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> bitcoin-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> bitcoin-cli sendrawtransaction \"signedtransactionhex\"",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose )<br><br>NOTE: By default this function only works for mempool transactions. If the -txindex option is<br>enabled, it also works for blockchain transactions.<br>DEPRECATED: for now, it also works for transactions with unspent outputs.<br><br>Return the raw transaction data.<br><br>If verbose is 'true', returns an Object with information about 'txid'.<br>If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose       (bool, optional, default=false) If false, return a string, otherwise return a json object<br><br>Result (if verbose is not set or set to false):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose is set to true):<br>{<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The serialized transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"address\"        (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> bitcoin-cli getrawtransaction \"mytxid\"<br> bitcoin-cli getrawtransaction \"mytxid\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> bitcoin-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\",   (string, required for P2SH or P2WSH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"privkeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"       (string, required) A json array of keys which are bitcoin addresses or hex-encoded public keys<br>     [<br>       \"key\"    (string) bitcoin address or hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 addresses<br> bitcoin-cli createmultisig 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "estimatefee": "estimatefee nblocks<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks. Uses virtual transaction size of transaction<br>as defined in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. nblocks     (numeric, required)<br><br>Result:<br>n              (numeric) estimated fee-per-kilobyte<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br>-1 is always returned for nblocks == 1 as it is impossible to calculate<br>a fee that is high enough to get reliably included in the next block.<br><br>Example:<br> bitcoin-cli estimatefee 6",
            "estimatepriority": "estimatepriority nblocks<br><br>DEPRECATED. Estimates the approximate priority a zero-fee transaction needs to begin<br>confirmation within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric, required)<br><br>Result:<br>n              (numeric) estimated priority<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br><br>Example:<br> bitcoin-cli estimatepriority 6",
            "estimatesmartfee": "estimatesmartfee nblocks<br><br>WARNING: This interface is unstable and may disappear or change!<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks if possible and return the number of blocks<br>for which the estimate is valid. Uses virtual transaction size as defined<br>in BIP 141 (witness data is discounted).<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>{<br>  \"feerate\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br>However it will not return a value below the mempool reject fee.<br><br>Example:<br> bitcoin-cli estimatesmartfee 6",
            "estimatesmartpriority": "estimatesmartpriority nblocks<br><br>DEPRECATED. WARNING: This interface is unstable and may disappear or change!<br><br>Estimates the approximate priority a zero-fee transaction needs to begin<br>confirmation within nblocks blocks if possible and return the number of blocks<br>for which the estimate is valid.<br><br>Arguments:<br>1. nblocks     (numeric, required)<br><br>Result:<br>{<br>  \"priority\" : x.x,    (numeric) estimated priority<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br>However if the mempool reject fee is set it will return 1e9 * MAX_MONEY.<br><br>Example:<br> bitcoin-cli estimatesmartpriority 6",
            "signmessagewithprivkey": "signmessagewithprivkey \"privkey\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"privkey\"         (string, required) The private key to sign the message with.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Create the signature<br> bitcoin-cli signmessagewithprivkey \"privkey\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "validateaddress": "validateaddress \"address\"<br><br>Return information about the given bitcoin address.<br><br>Arguments:<br>1. \"address\"     (string, required) The bitcoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"address\", (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key<br>  \"iscompressed\" : true|false,  (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \"\" is the default account<br>  \"timestamp\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)<br>  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available<br>  \"hdmasterkeyid\" : \"<hash160>\" (string, optional) The Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> bitcoin-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"address\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already conflicted or abandoned.<br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br><br>Result:<br><br>Examples:<br> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"account\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet.<br>Each key is a Bitcoin address or hex-encoded public key.<br>If 'account' is specified (DEPRECATED), assign address to that account.<br><br>Arguments:<br>1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"         (string, required) A json array of bitcoin addresses or hex-encoded public keys<br>     [<br>       \"address\"  (string) bitcoin address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"account\"      (string, optional) DEPRECATED. An account to assign the addresses to.<br><br>Result:<br>\"address\"         (string) A bitcoin address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> bitcoin-cli addmultisigaddress 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addwitnessaddress": "addwitnessaddress \"address\"<br><br>Add a witness address for a script (with pubkey or redeemscript known).<br>It returns the witness script.<br><br>Arguments:<br>1. \"address\"       (string, required) An address known to the wallet<br><br>Result:<br>\"witnessaddress\",  (string) The value of the new address (P2SH of witness script).<br>}",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies current wallet file to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> bitcoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "bumpfee": "bumpfee \"txid\" ( options ) <br><br>Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.<br>An opt-in RBF transaction with the given txid must be in the wallet.<br>The command will pay the additional fee by decreasing (or perhaps removing) its change output.<br>If the change output is not big enough to cover the increased fee, the command will currently fail<br>instead of adding new inputs to compensate. (A future implementation could improve this.)<br>The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.<br>By default, the new fee will be calculated automatically using estimatefee.<br>The user can specify a confirmation target for estimatefee.<br>Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.<br>At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee<br>returned by getnetworkinfo) to enter the node's mempool.<br><br>Arguments:<br>1. txid                  (string, required) The txid to be bumped<br>2. options               (object, optional)<br>   {<br>     \"confTarget\"        (numeric, optional) Confirmation target (in blocks)<br>     \"totalFee\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.<br>                         In rare cases, the actual fee paid might be slightly higher than the specified<br>                         totalFee if the tx change output has to be removed because it is too close to<br>                         the dust threshold.<br>     \"replaceable\"       (boolean, optional, default true) Whether the new transaction should still be<br>                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will<br>                         be left unchanged from the original. If false, any input sequence numbers in the<br>                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe<br>                         so the new transaction will not be explicitly bip-125 replaceable (though it may<br>                         still be replacable in practice, for example if it has unconfirmed ancestors which<br>                         are replaceable).<br>   }<br><br>Result:<br>{<br>  \"txid\":    \"value\",   (string)  The id of the new transaction<br>  \"origfee\":  n,         (numeric) Fee of the replaced transaction<br>  \"fee\":      n,         (numeric) Fee of the new transaction<br>  \"errors\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)<br>}<br><br>Examples:<br><br>Bump the fee, get the new transaction's txid<br> bitcoin-cli bumpfee <txid>",
            "dumpprivkey": "dumpprivkey \"address\"<br><br>Reveals the private key corresponding to 'address'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"address\"   (string, required) The bitcoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> bitcoin-cli dumpprivkey \"myaddress\"<br> bitcoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format.<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename<br><br>Examples:<br> bitcoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt you wallet<br> bitcoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending bitcoin<br> bitcoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can so something like sign<br> bitcoin-cli signmessage \"address\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> bitcoin-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccount": "getaccount \"address\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> bitcoin-cli getaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccountaddress": "getaccountaddress \"account\"<br><br>DEPRECATED. Returns the current Bitcoin address for receiving payments to this account.<br><br>Arguments:<br>1. \"account\"       (string, required) The account name for the address. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.<br><br>Result:<br>\"address\"          (string) The account bitcoin address<br><br>Examples:<br> bitcoin-cli getaccountaddress <br> bitcoin-cli getaccountaddress \"\"<br> bitcoin-cli getaccountaddress \"myaccount\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"        (string, required) The account name.<br><br>Result:<br>[                     (json array of string)<br>  \"address\"         (string) a bitcoin address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"account\" minconf include_watchonly )<br><br>If account is not specified, returns the server's total available balance.<br>If account is specified (DEPRECATED), returns the balance in the account.<br>Note that the account \"\" is not the same as leaving the parameter out.<br>The server total may be different to the balance in the default \"\" account.<br><br>Arguments:<br>1. \"account\"         (string, optional) DEPRECATED. The account string may be given as a<br>                     specific account name to find the balance associated with wallet keys in<br>                     a named account, or as the empty string (\"\") to find the balance<br>                     associated with wallet keys not in any named account, or as \"*\" to find<br>                     the balance associated with all wallet keys regardless of account.<br>                     When this option is specified, it calculates the balance in a different<br>                     way than when it is not specified, and which can count spends twice when<br>                     there are conflicting pending transactions (such as those created by<br>                     the bumpfee command), temporarily resulting in low or even negative<br>                     balances. In general, account balance calculation is not considered<br>                     reliable and has resulted in confusing outcomes, so it is recommended to<br>                     avoid passing this argument.<br>2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>The total amount in the wallet<br> bitcoin-cli getbalance <br><br>The total amount in the wallet at least 5 blocks confirmed<br> bitcoin-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"account\" )<br><br>Returns a new Bitcoin address for receiving payments.<br>If 'account' is specified (DEPRECATED), it is added to the address book <br>so payments received with the address will be credited to 'account'.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \"\" is used. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.<br><br>Result:<br>\"address\"    (string) The new bitcoin address<br><br>Examples:<br> bitcoin-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress<br><br>Returns a new Bitcoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> bitcoin-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaccount": "getreceivedbyaccount \"account\" ( minconf )<br><br>DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. \"account\"      (string, required) The selected account, may be the default account using \"\".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>Amount received by the default account with at least 1 confirmation<br> bitcoin-cli getreceivedbyaccount \"\"<br><br>Amount received at the tabby account including unconfirmed amounts with zero confirmations<br> bitcoin-cli getreceivedbyaccount \"tabby\" 0<br><br>The amount with at least 6 confirmation, very safe<br> bitcoin-cli getreceivedbyaccount \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaddress": "getreceivedbyaddress \"address\" ( minconf )<br><br>Returns the total amount received by the given address in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in BTC received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 0<br><br>The amount with at least 6 confirmation, very safe<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( include_watchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"                  (string, required) The transaction id<br>2. \"include_watchonly\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in BTC<br>  \"fee\": x.xxx,            (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                              'send' category of transactions.<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",      (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.<br>      \"address\" : \"address\",          (string) The bitcoin address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx,                 (numeric) The amount in BTC<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                       (numeric) the vout value<br>      \"fee\": x.xxx,                     (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                           'send' category of transactions.<br>      \"abandoned\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                           'send' category of transactions.<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletversion\": xxxxx,       (numeric) the wallet version<br>  \"balance\": xxxxxxx,           (numeric) the total confirmed balance of the wallet in BTC<br>  \"unconfirmed_balance\": xxx,   (numeric) the total unconfirmed balance of the wallet in BTC<br>  \"immature_balance\": xxxxxx,   (numeric) the total immature balance of the wallet in BTC<br>  \"txcount\": xxxxxxx,           (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,      (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,          (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,           (numeric) the transaction fee configuration, set in BTC/kB<br>  \"hdmasterkeyid\": \"<hash160>\" (string) the Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> bitcoin-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"script\"           (string, required) The hex-encoded script (or address)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Note: This call can take minutes to complete if rescan is true.<br>If you have the full public key, you should call importpubkey instead of this.<br><br>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated<br>as change, and not show up in many RPCs.<br><br>Examples:<br><br>Import a script with rescan<br> bitcoin-cli importaddress \"myscript\"<br><br>Import using a label without rescan<br> bitcoin-cli importaddress \"myscript\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myscript\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importmulti": "importmulti \"requests\" \"options\"<br><br>Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).<br><br>Arguments:<br>1. requests     (array, required) Data to be imported<br>  [     (array of json objects)<br>    {<br>      \"scriptPubKey\": \"<script>\" | { \"address\":\"<address>\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)<br>      \"timestamp\": timestamp | \"now\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),<br>                                                              or the string \"now\" to substitute the current synced blockchain time. The timestamp of the oldest<br>                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.<br>                                                              \"now\" can be specified to bypass scanning, for keys which are known to never have been used, and<br>                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key<br>                                                              creation time of all keys being imported by the importmulti call will be scanned.<br>      \"redeemscript\": \"<script>\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey<br>      \"pubkeys\": [\"<pubKey>\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript<br>      \"keys\": [\"<key>\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript<br>      \"internal\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments<br>      \"watchonly\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty<br>      \"label\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false<br>    }<br>  ,...<br>  ]<br>2. options                 (json, optional)<br>  {<br>     \"rescan\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports<br>  }<br><br>Examples:<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'<br> bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'<br><br>Response is an array with the same size as the input that has the execution result :<br>  [{ \"success\": true } , { \"success\": false, \"error\": { \"code\": -1, \"message\": \"Internal Server Error\"} }, ... ]",
            "importprivkey": "importprivkey \"bitcoinprivkey\" ( \"label\" ) ( rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet.<br><br>Arguments:<br>1. \"bitcoinprivkey\"   (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Dump a private key<br> bitcoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> bitcoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"testing\" false<br><br>Import using default blank label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprunedfunds": "importprunedfunds<br><br>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.<br><br>Arguments:<br>1. \"rawtransaction\" (string, required) A raw transaction in hex funding an already-existing address in wallet<br>2. \"txoutproof\"     (string, required) The hex output from gettxoutproof that contains the transaction",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"pubkey\"           (string, required) The hex-encoded public key<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Import a public key with rescan<br> bitcoin-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> bitcoin-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> bitcoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> bitcoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> bitcoin-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaccounts": "listaccounts ( minconf include_watchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see 'importaddress')<br><br>Result:<br>{                      (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> bitcoin-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> bitcoin-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> bitcoin-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"address\",            (string) The bitcoin address<br>      amount,                 (numeric) The amount in BTC<br>      \"account\"             (string, optional) DEPRECATED. The account<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaccount": "listreceivedbyaccount ( minconf include_empty include_watchonly)<br><br>DEPRECATED. List balances by account.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include accounts that haven't received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",  (string) The account name of the receiving account<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account<br>    \"confirmations\" : n,          (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"           (string) A comment for the address/transaction, if any<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaccount <br> bitcoin-cli listreceivedbyaccount 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf include_empty include_watchonly)<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. The account of the receiving address. The default account is \"\".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in BTC received by the address<br>    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\",               (string) A comment for the address/transaction, if any<br>    \"txids\": [<br>       n,                                (numeric) The ids of transactions received with the address <br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaddress <br> bitcoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listsinceblock": "listsinceblock ( \"blockhash\" target_confirmations include_watchonly)<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted<br><br>Arguments:<br>1. \"blockhash\"            (string, optional) The block hash to list transactions since<br>2. target_confirmations:    (numeric, optional) The confirmations required, must be 1 or more<br>3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>                                          When it's < 0, it means the transaction conflicted that many blocks ago.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx,         (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"       (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the last block<br>}<br><br>Examples:<br> bitcoin-cli listsinceblock <br> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions ( \"account\" count skip include_watchonly)<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.<br><br>Arguments:<br>1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. skip           (numeric, optional, default=0) The number of transactions to skip<br>4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \"\" for the default account.<br>    \"address\":\"address\",    (string) The bitcoin address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. 'send' and 'receive' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the<br>                                         'move' category for moves outbound. It is positive for the 'receive' category,<br>                                         and for the 'move' category for inbound funds.<br>    \"label\": \"label\",       (string) A comment for the address/transaction, if any<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and <br>                                         'receive' category of transactions. Negative confirmations indicate the<br>                                         transaction conflicts with the block chain<br>    \"trusted\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"otheraccount\": \"accountname\",  (string) DEPRECATED. For the 'move' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>    \"bip125-replaceable\": \"yes|no|unknown\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                     may be unknown for unconfirmed transactions not in the mempool<br>    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the <br>                                         'send' category of transactions.<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> bitcoin-cli listtransactions <br><br>List transactions 100 to 120<br> bitcoin-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf  [\"addresses\",...] [include_unsafe] )<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"    (string) A json array of bitcoin addresses to filter<br>    [<br>      \"address\"   (string) bitcoin address<br>      ,...<br>    ]<br>4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend<br>                  because they come from unconfirmed untrusted transactions or unconfirmed<br>                  replacement transactions (cases where we are less sure that a conflicting<br>                  transaction won't be mined).<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",    (string) the bitcoin address<br>    \"account\" : \"account\",    (string) DEPRECATED. The associated account, or \"\" for the default account<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction output amount in BTC<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH<br>    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output<br>    \"solvable\" : xxx          (bool) Whether we know how to spend this output, ignoring the lack of keys<br>  }<br>  ,...<br>]<br><br>Examples<br> bitcoin-cli listunspent <br> bitcoin-cli listunspent 6 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock ([{\"txid\":\"txid\",\"vout\":n},...])<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.<br>A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"   (string, required) The name of the account to move funds from. May be the default account using \"\".<br>2. \"toaccount\"     (string, required) The name of the account to move funds to. May be the default account using \"\".<br>3. amount            (numeric) Quantity of BTC to move between accounts.<br>4. (dummy)           (numeric, optional) Ignored. Remains for backward compatibility.<br>5. \"comment\"       (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false           (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 BTC from the default account to the account named tabby<br> bitcoin-cli move \"\" \"tabby\" 0.01<br><br>Move 0.01 BTC timotei to akiko with a comment and funds have 6 confirmations<br> bitcoin-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "removeprunedfunds": "removeprunedfunds \"txid\"<br><br>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.<br><br>Arguments:<br>1. \"txid\"           (string, required) The hex-encoded id of the transaction you are deleting<br><br>Examples:<br> bitcoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendfrom": "sendfrom \"fromaccount\" \"toaddress\" amount ( minconf \"comment\" \"comment_to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) The name of the account to send funds from. May be the default account using \"\".<br>                       Specifying an account does not influence coin selection, but it does associate the newly created<br>                       transaction with the account, so the account's balance computation and transaction history can reflect<br>                       the spend.<br>2. \"toaddress\"         (string, required) The bitcoin address to send funds to.<br>3. amount                (numeric or string, required) The amount in BTC (transaction fee is added on top).<br>4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                                     This is not part of the transaction, just kept in your wallet.<br>6. \"comment_to\"        (string, optional) An optional comment to store the name of the person or organization <br>                                     to which you're sending the transaction. This is not part of the transaction, <br>                                     it is just kept in your wallet.<br><br>Result:<br>\"txid\"                 (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 BTC from the default account to the address, must have at least 1 confirmation<br> bitcoin-cli sendfrom \"\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> bitcoin-cli sendfrom \"tabby\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01 6 \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br><br>Arguments:<br>1. \"fromaccount\"         (string, required) DEPRECATED. The account to send the funds from. Should be \"\" for the default account<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in BTC is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefrom         (array, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"          (string) Subtract fee from this address<br>      ,...<br>    ]<br><br>Result:<br>\"txid\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \"\" \"[\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"address\" amount ( \"comment\" \"comment_to\" subtractfeefromamount )<br><br>Send an amount to a given address.<br><br>Arguments:<br>1. \"address\"            (string, required) The bitcoin address to send to.<br>2. \"amount\"             (numeric or string, required) The amount in BTC to send. eg 0.1<br>3. \"comment\"            (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment_to\"         (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less bitcoins than you enter in the amount field.<br><br>Result:<br>\"txid\"                  (string) The transaction id.<br><br>Examples:<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"\" \"\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setaccount": "setaccount \"address\" \"account\"<br><br>DEPRECATED. Sets the account associated with the given address.<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to be associated with an account.<br>2. \"account\"         (string, required) The account to assign the address to.<br><br>Examples:<br> bitcoin-cli setaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB. Overwrites the paytxfee parameter.<br><br>Arguments:<br>1. amount         (numeric or string, required) The transaction fee in BTC/kB<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> bitcoin-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"address\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"address\"         (string, required) The bitcoin address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
        },
        "11": {
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest block chain.<br><br>Result<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples<br> bitcoin-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblock": "getblock \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbose is true, returns an Object with information about block <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding block chain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",        (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\", (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,     (numeric) the current difficulty<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal<br>  \"softforks\": [            (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",        (string) name of softfork<br>        \"version\": xx,         (numeric) block version<br>        \"enforce\": {           (object) progress toward enforcing the softfork rules for new-version blocks<br>           \"status\": xx,       (boolean) true if threshold reached<br>           \"found\": xx,        (numeric) number of blocks with the new version found<br>           \"required\": xx,     (numeric) number of blocks required to trigger<br>           \"window\": xx,       (numeric) maximum size of examined window of recent blocks<br>        },<br>        \"reject\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \"enforce\")<br>     }, ...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest block chain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> bitcoin-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash index<br><br>Returns hash of block in best-block-chain at index provided.<br><br>Arguments:<br>1. index         (numeric, required) The block index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> bitcoin-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> bitcoin-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> bitcoin-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx                (numeric) Current tx count<br>  \"bytes\": xxxxx               (numeric) Sum of all tx sizes<br>}<br><br>Examples:<br> bitcoin-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Arguments:<br>1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) transaction size in bytes<br>    \"fee\" : n,              (numeric) transaction fee in bitcoins<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) transaction priority now<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples<br> bitcoin-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxout": "gettxout \"txid\" n ( includemempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id<br>2. n              (numeric, required) vout value<br>3. includemempool  (boolean, optional) Whether to included the mem pool<br><br>Result:<br>{<br>  \"bestblock\" : \"hash\",    (string) the block hash<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in btc<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of bitcoin addresses<br>        \"bitcoinaddress\"     (string) bitcoin address<br>        ,...<br>     ]<br>  },<br>  \"version\" : n,            (numeric) The version<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> bitcoin-cli listunspent <br><br>View the details<br> bitcoin-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included in manually (by blockhash).<br><br>Return the raw transaction data.<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"block hash\"  (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) the best block hash hex<br>  \"transactions\": n,      (numeric) The number of transactions<br>  \"txouts\": n,            (numeric) The number of output transactions<br>  \"bytes_serialized\": n,  (numeric) The serialized size<br>  \"hash_serialized\": \"hash\",   (string) The serialized hash<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> bitcoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel numblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> bitcoin-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid",
            "getinfo": "getinfo<br>Returns an object containing various state info.<br><br>Result:<br>{<br>  \"version\": xxxxx,           (numeric) the server version<br>  \"protocolversion\": xxxxx,   (numeric) the protocol version<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet<br>  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server<br>  \"timeoffset\": xxxxx,        (numeric) the time offset<br>  \"connections\": xxxxx,       (numeric) the number of connections<br>  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server<br>  \"difficulty\": xxxxxx,       (numeric) the current difficulty<br>  \"testnet\": true|false,      (boolean) if the server is using testnet or not<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in btc/kb<br>  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in btc/kb<br>  \"errors\": \"...\"           (string) any error messages<br>}<br><br>Examples:<br> bitcoin-cli getinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "stop": "stop<br><br>Stop Bitcoin server.",
            "generate": "generate numblocks<br><br>Mine blocks immediately (before the RPC call returns)<br><br>Note: this function can only be used on the regtest network<br><br>Arguments:<br>1. numblocks    (numeric) How many blocks are generated immediately.<br><br>Result<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> bitcoin-cli generate 11",
            "getgenerate": "getgenerate<br><br>Return if the server is set to generate coins or not. The default is false.<br>It is set with the command line argument -gen (or bitcoin.conf setting gen)<br>It can also be set with the setgenerate call.<br><br>Result<br>true|false      (boolean) If the server is set to generate coins or not<br><br>Examples:<br> bitcoin-cli getgenerate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setgenerate": "setgenerate generate ( genproclimit )<br><br>Set 'generate' true or false to turn generation on or off.<br>Generation is limited to 'genproclimit' processors, -1 is unlimited.<br>See the getgenerate call for the current setting.<br><br>Arguments:<br>1. generate         (boolean, required) Set to true to turn on generation, off to turn off.<br>2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.<br><br>Examples:<br><br>Set the generation on with a limit of one processor<br> bitcoin-cli setgenerate true 1<br><br>Check the setting<br> bitcoin-cli getgenerate <br><br>Turn off generation<br> bitcoin-cli setgenerate false<br><br>Using json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblocktemplate": "getblocktemplate ( \"jsonrequestobject\" )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments:<br>1. \"jsonrequestobject\"       (string, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\" or omitted<br>       \"capabilities\":[       (array, optional) A list of strings<br>           \"support\"           (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>         ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The block version<br>  \"previousblockhash\" : \"xxxx\",    (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",          (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"hash\" : \"xxxx\",          (string) hash/id encoded in little-endian hexadecimal<br>         \"depends\" : [              (array) array of numbers <br>             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,               (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any<br>         \"required\" : true|false     (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                  (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"flags\"            (string) <br>  },<br>  \"coinbasevalue\" : n,               (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)<br>  \"coinbasetxn\" : { ... },           (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",               (string) The hash target<br>  \"mintime\" : xxx,                   (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                      (array of string) list of ways the block template may be changed <br>     \"value\"                         (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",   (string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxx\",                 (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> bitcoin-cli getblocktemplate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblocksize\": nnn,   (numeric) The last block size<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"errors\": \"...\"          (string) Current errors<br>  \"generate\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)<br>  \"genproclimit\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)<br>  \"pooledtx\": n              (numeric) The size of the mem pool<br>  \"testnet\": true|false      (boolean) If using testnet or not<br>  \"chain\": \"xxxx\",         (string) current network name as defined in BIP70 (main, test, regtest)<br>}<br><br>Examples:<br> bitcoin-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( blocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height     (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> bitcoin-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "prioritisetransaction": "prioritisetransaction <txid> <priority delta> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. priority delta (numeric, required) The priority to add or subtract.<br>                  The transaction selection algorithm considers the tx as it would have a higher priority.<br>                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) <br>3. fee delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result<br>true              (boolean) Returns true<br><br>Examples:<br> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\" ( \"jsonparametersobject\" )<br><br>Attempts to submit new block to network.<br>The 'jsonparametersobject' parameter is currently ignored.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"    (string, required) the hex-encoded block data to submit<br>2. \"jsonparametersobject\"     (string, optional) object of optional parameters<br>    {<br>      \"workid\" : \"id\"    (string, optional) if the server provided a workid, it MUST be included with submissions<br>    }<br><br>Result:<br><br>Examples:<br> bitcoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts add or remove a node from the addnode list.<br>Or try a connection to a node once.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddednodeinfo": "getaddednodeinfo dns ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br>If dns is false, only a list of added nodes will be provided,<br>otherwise connected information will also be available.<br><br>Arguments:<br>1. dns        (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available.<br>2. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node ip address<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [<br>       {<br>         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server host and port<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>       ,...<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddednodeinfo true<br> bitcoin-cli getaddednodeinfo true \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>bResult:<br>n          (numeric) The connection count<br><br>Examples:<br> bitcoin-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t        (numeric) Total cpu time<br>}<br><br>Examples:<br> bitcoin-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in btc/kb<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>bResult:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The ip address and port of the peer<br>    \"addrlocal\":\"ip:port\",   (string) local address<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time<br>    \"pingwait\": n,             (numeric) ping wait<br>    \"version\": v,              (numeric) The peer version, such as 7001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> bitcoin-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...}<br><br>Create a transaction spending the given inputs and sending to the given addresses.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"transactions\"        (string, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",  (string, required) The transaction id<br>         \"vout\":n        (numeric, required) The output number<br>       }<br>       ,...<br>     ]<br>2. \"addresses\"           (string, required) a json object with addresses as keys and amounts as values<br>    {<br>      \"address\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the btc amount<br>      ,...<br>    }<br><br>Result:<br>\"transaction\"            (string) hex string of the transaction<br><br>Examples<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\"<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hex\"      (string, required) The transaction hex string<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in btc<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> bitcoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hex\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hex\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) bitcoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) script address<br>}<br><br>Examples:<br> bitcoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose )<br><br>NOTE: By default this function only works sometimes. This is when the tx is in the mempool<br>or there is an unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option.<br><br>Return the raw transaction data.<br><br>If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.<br>If verbose is non-zero, returns an Object with information about 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose       (numeric, optional, default=0) If 0, return a string, other return a json object<br><br>Result (if verbose is not set or set to 0):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose > 0):<br>{<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in btc<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"bitcoinaddress\"        (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> bitcoin-cli getrawtransaction \"mytxid\"<br> bitcoin-cli getrawtransaction \"mytxid\" 1<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> bitcoin-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\"    (string, required for P2SH) redeem script<br>       }<br>       ,...<br>    ]<br>3. \"privatekeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"       (string, required) A json array of keys which are bitcoin addresses or hex-encoded public keys<br>     [<br>       \"key\"    (string) bitcoin address or hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 addresses<br> bitcoin-cli createmultisig 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "estimatefee": "estimatefee nblocks<br><br>Estimates the approximate fee per kilobyte<br>needed for a transaction to begin confirmation<br>within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>n :    (numeric) estimated fee-per-kilobyte<br><br>-1.0 is returned if not enough transactions and<br>blocks have been observed to make an estimate.<br><br>Example:<br> bitcoin-cli estimatefee 6",
            "estimatepriority": "estimatepriority nblocks<br><br>Estimates the approximate priority<br>a zero-fee transaction needs to begin confirmation<br>within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>n :    (numeric) estimated priority<br><br>-1.0 is returned if not enough transactions and<br>blocks have been observed to make an estimate.<br><br>Example:<br> bitcoin-cli estimatepriority 6",
            "validateaddress": "validateaddress \"bitcoinaddress\"<br><br>Return information about the given bitcoin address.<br><br>Arguments:<br>1. \"bitcoinaddress\"     (string, required) The bitcoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"bitcoinaddress\", (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,          (boolean) If the address is yours or not<br>  \"isscript\" : true|false,        (boolean) If the key is a script<br>  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key<br>  \"iscompressed\" : true|false,    (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \"\" is the default account<br>}<br><br>Examples:<br> bitcoin-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"bitcoinaddress\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"account\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet.<br>Each key is a Bitcoin address or hex-encoded public key.<br>If 'account' is specified (DEPRECATED), assign address to that account.<br><br>Arguments:<br>1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keysobject\"   (string, required) A json array of bitcoin addresses or hex-encoded public keys<br>     [<br>       \"address\"  (string) bitcoin address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"account\"      (string, optional) DEPRECATED. An account to assign the addresses to.<br><br>Result:<br>\"bitcoinaddress\"  (string) A bitcoin address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> bitcoin-cli addmultisigaddress 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies wallet.dat to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> bitcoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpprivkey": "dumpprivkey \"bitcoinaddress\"<br><br>Reveals the private key corresponding to 'bitcoinaddress'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"bitcoinaddress\"   (string, required) The bitcoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> bitcoin-cli dumpprivkey \"myaddress\"<br> bitcoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format.<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename<br><br>Examples:<br> bitcoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt you wallet<br> bitcoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending bitcoin<br> bitcoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can so something like sign<br> bitcoin-cli signmessage \"bitcoinaddress\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> bitcoin-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccount": "getaccount \"bitcoinaddress\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> bitcoin-cli getaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccountaddress": "getaccountaddress \"account\"<br><br>DEPRECATED. Returns the current Bitcoin address for receiving payments to this account.<br><br>Arguments:<br>1. \"account\"       (string, required) The account name for the address. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.<br><br>Result:<br>\"bitcoinaddress\"   (string) The account bitcoin address<br><br>Examples:<br> bitcoin-cli getaccountaddress <br> bitcoin-cli getaccountaddress \"\"<br> bitcoin-cli getaccountaddress \"myaccount\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"  (string, required) The account name.<br><br>Result:<br>[                     (json array of string)<br>  \"bitcoinaddress\"  (string) a bitcoin address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"account\" minconf includeWatchonly )<br><br>If account is not specified, returns the server's total available balance.<br>If account is specified (DEPRECATED), returns the balance in the account.<br>Note that the account \"\" is not the same as leaving the parameter out.<br>The server total may be different to the balance in the default \"\" account.<br><br>Arguments:<br>1. \"account\"      (string, optional) DEPRECATED. The selected account, or \"*\" for entire wallet. It may be the default account using \"\".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in btc received for this account.<br><br>Examples:<br><br>The total amount in the wallet<br> bitcoin-cli getbalance <br><br>The total amount in the wallet at least 5 blocks confirmed<br> bitcoin-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"account\" )<br><br>Returns a new Bitcoin address for receiving payments.<br>If 'account' is specified (DEPRECATED), it is added to the address book <br>so payments received with the address will be credited to 'account'.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \"\" is used. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.<br><br>Result:<br>\"bitcoinaddress\"    (string) The new bitcoin address<br><br>Examples:<br> bitcoin-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress<br><br>Returns a new Bitcoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> bitcoin-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaccount": "getreceivedbyaccount \"account\" ( minconf )<br><br>DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. \"account\"      (string, required) The selected account, may be the default account using \"\".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in btc received for this account.<br><br>Examples:<br><br>Amount received by the default account with at least 1 confirmation<br> bitcoin-cli getreceivedbyaccount \"\"<br><br>Amount received at the tabby account including unconfirmed amounts with zero confirmations<br> bitcoin-cli getreceivedbyaccount \"tabby\" 0<br><br>The amount with at least 6 confirmation, very safe<br> bitcoin-cli getreceivedbyaccount \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaddress": "getreceivedbyaddress \"bitcoinaddress\" ( minconf )<br><br>Returns the total amount received by the given bitcoinaddress in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in btc received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" 0<br><br>The amount with at least 6 confirmation, very safe<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( includeWatchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br>2. \"includeWatchonly\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in btc<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The block index<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",  (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.<br>      \"address\" : \"bitcoinaddress\",   (string) The bitcoin address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx                  (numeric) The amount in btc<br>      \"vout\" : n,                       (numeric) the vout value<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total confirmed bitcoin balance of the wallet<br>  \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed bitcoin balance of the wallet<br>  \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet<br>  \"txcount\": xxxxxxx,         (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>}<br><br>Examples:<br> bitcoin-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan )<br><br>Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"address\"          (string, required) The address<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Import an address with rescan<br> bitcoin-cli importaddress \"myaddress\"<br><br>Import using a label without rescan<br> bitcoin-cli importaddress \"myaddress\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprivkey": "importprivkey \"bitcoinprivkey\" ( \"label\" rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet.<br><br>Arguments:<br>1. \"bitcoinprivkey\"   (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Dump a private key<br> bitcoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> bitcoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> bitcoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> bitcoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> bitcoin-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaccounts": "listaccounts ( minconf includeWatchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')<br><br>Result:<br>{                      (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> bitcoin-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> bitcoin-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> bitcoin-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"bitcoinaddress\",     (string) The bitcoin address<br>      amount,                 (numeric) The amount in btc<br>      \"account\"             (string, optional) The account (DEPRECATED)<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaccount": "listreceivedbyaccount ( minconf includeempty includeWatchonly)<br><br>DEPRECATED. List balances by account.<br><br>Arguments:<br>1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.<br>3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",  (string) The account name of the receiving account<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account<br>    \"confirmations\" : n           (numeric) The number of confirmations of the most recent transaction included<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaccount <br> bitcoin-cli listreceivedbyaccount 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf includeempty includeWatchonly)<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. includeempty  (numeric, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. The account of the receiving address. The default account is \"\".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in btc received by the address<br>    \"confirmations\" : n                (numeric) The number of confirmations of the most recent transaction included<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaddress <br> bitcoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listsinceblock": "listsinceblock ( \"blockhash\" target-confirmations includeWatchonly)<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted<br><br>Arguments:<br>1. \"blockhash\"   (string, optional) The block hash to list transactions since<br>2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more<br>3. includeWatchonly:        (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')<br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.<br>    \"address\":\"bitcoinaddress\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the last block<br>}<br><br>Examples:<br> bitcoin-cli listsinceblock <br> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions ( \"account\" count from includeWatchonly)<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.<br><br>Arguments:<br>1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. from           (numeric, optional, default=0) The number of transactions to skip<br>4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \"\" for the default account.<br>    \"address\":\"bitcoinaddress\",    (string) The bitcoin address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. 'send' and 'receive' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the<br>                                         'move' category for moves outbound. It is positive for the 'receive' category,<br>                                         and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and <br>                                         'receive' category of transactions.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"otheraccount\": \"accountname\",  (string) For the 'move' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> bitcoin-cli listtransactions <br><br>List transactions 100 to 120<br> bitcoin-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf  [\"address\",...] )<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br>Results are an array of Objects, each of which has:<br>{txid, vout, scriptPubKey, amount, confirmations}<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"    (string) A json array of bitcoin addresses to filter<br>    [<br>      \"address\"   (string) bitcoin address<br>      ,...<br>    ]<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",        (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",  (string) the bitcoin address<br>    \"account\" : \"account\",  (string) DEPRECATED. The associated account, or \"\" for the default account<br>    \"scriptPubKey\" : \"key\", (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction amount in btc<br>    \"confirmations\" : n       (numeric) The number of confirmations<br>  }<br>  ,...<br>]<br><br>Examples<br> bitcoin-cli listunspent <br> bitcoin-cli listunspent 6 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, required) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"   (string, required) The name of the account to move funds from. May be the default account using \"\".<br>2. \"toaccount\"     (string, required) The name of the account to move funds to. May be the default account using \"\".<br>3. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>4. \"comment\"       (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false           (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 btc from the default account to the account named tabby<br> bitcoin-cli move \"\" \"tabby\" 0.01<br><br>Move 0.01 btc timotei to akiko with a comment and funds have 6 confirmations<br> bitcoin-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendfrom": "sendfrom \"fromaccount\" \"tobitcoinaddress\" amount ( minconf \"comment\" \"comment-to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.<br>The amount is a real and is rounded to the nearest 0.00000001.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) The name of the account to send funds from. May be the default account using \"\".<br>2. \"tobitcoinaddress\"  (string, required) The bitcoin address to send funds to.<br>3. amount                (numeric, required) The amount in btc. (transaction fee is added on top).<br>4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                                     This is not part of the transaction, just kept in your wallet.<br>6. \"comment-to\"        (string, optional) An optional comment to store the name of the person or organization <br>                                     to which you're sending the transaction. This is not part of the transaction, <br>                                     it is just kept in your wallet.<br><br>Result:<br>\"transactionid\"        (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 btc from the default account to the address, must have at least 1 confirmation<br> bitcoin-cli sendfrom \"\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> bitcoin-cli sendfrom \"tabby\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01 6 \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br><br>Arguments:<br>1. \"fromaccount\"         (string, required) DEPRECATED. The account to send the funds from. Should be \"\" for the default account<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric) The bitcoin address is the key, the numeric amount in btc is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefromamount   (string, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"            (string) Subtract fee from this address<br>      ,...<br>    ]<br><br>Result:<br>\"transactionid\"          (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \"\" \"[\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"bitcoinaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount )<br><br>Send an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to send to.<br>2. \"amount\"      (numeric, required) The amount in btc to send. eg 0.1<br>3. \"comment\"     (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment-to\"  (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less bitcoins than you enter in the amount field.<br><br>Result:<br>\"transactionid\"  (string) The transaction id.<br><br>Examples:<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"\" \"\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setaccount": "setaccount \"bitcoinaddress\" \"account\"<br><br>DEPRECATED. Sets the account associated with the given address.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to be associated with an account.<br>2. \"account\"         (string, required) The account to assign the address to.<br><br>Examples:<br> bitcoin-cli setaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB.<br><br>Arguments:<br>1. amount         (numeric, required) The transaction fee in BTC/kB rounded to the nearest 0.00000001<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> bitcoin-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"bitcoinaddress\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
        },
        "12": {
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest block chain.<br><br>Result<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples<br> bitcoin-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblock": "getblock \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbose is true, returns an Object with information about block <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding block chain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",        (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\", (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,     (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,     (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal<br>  \"pruned\": xx,             (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,    (numeric) heighest block available<br>  \"softforks\": [            (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",        (string) name of softfork<br>        \"version\": xx,         (numeric) block version<br>        \"enforce\": {           (object) progress toward enforcing the softfork rules for new-version blocks<br>           \"status\": xx,       (boolean) true if threshold reached<br>           \"found\": xx,        (numeric) number of blocks with the new version found<br>           \"required\": xx,     (numeric) number of blocks required to trigger<br>           \"window\": xx,       (numeric) maximum size of examined window of recent blocks<br>        },<br>        \"reject\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \"enforce\")<br>     }, ...<br>  ],<br>  \"bip9_softforks\": [       (array) status of BIP9 softforks in progress<br>     {<br>        \"id\": \"xxxx\",        (string) name of the softfork<br>        \"status\": \"xxxx\",    (string) one of \"defined\", \"started\", \"lockedin\", \"active\", \"failed\"<br>     }<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest block chain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> bitcoin-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash index<br><br>Returns hash of block in best-block-chain at index provided.<br><br>Arguments:<br>1. index         (numeric, required) The block index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> bitcoin-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> bitcoin-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> bitcoin-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Sum of all tx sizes<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum fee for tx to be accepted<br>}<br><br>Examples:<br> bitcoin-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Arguments:<br>1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) transaction size in bytes<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples<br> bitcoin-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxout": "gettxout \"txid\" n ( includemempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id<br>2. n              (numeric, required) vout value<br>3. includemempool  (boolean, optional) Whether to included the mem pool<br><br>Result:<br>{<br>  \"bestblock\" : \"hash\",    (string) the block hash<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in BTC<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of bitcoin addresses<br>        \"bitcoinaddress\"     (string) bitcoin address<br>        ,...<br>     ]<br>  },<br>  \"version\" : n,            (numeric) The version<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> bitcoin-cli listunspent <br><br>View the details<br> bitcoin-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included in manually (by blockhash).<br><br>Return the raw transaction data.<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"block hash\"  (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) the best block hash hex<br>  \"transactions\": n,      (numeric) The number of transactions<br>  \"txouts\": n,            (numeric) The number of output transactions<br>  \"bytes_serialized\": n,  (numeric) The serialized size<br>  \"hash_serialized\": \"hash\",   (string) The serialized hash<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> bitcoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel numblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> bitcoin-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid",
            "getinfo": "getinfo<br>Returns an object containing various state info.<br><br>Result:<br>{<br>  \"version\": xxxxx,           (numeric) the server version<br>  \"protocolversion\": xxxxx,   (numeric) the protocol version<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet<br>  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server<br>  \"timeoffset\": xxxxx,        (numeric) the time offset<br>  \"connections\": xxxxx,       (numeric) the number of connections<br>  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server<br>  \"difficulty\": xxxxxx,       (numeric) the current difficulty<br>  \"testnet\": true|false,      (boolean) if the server is using testnet or not<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in BTC/kB<br>  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in BTC/kB<br>  \"errors\": \"...\"           (string) any error messages<br>}<br><br>Examples:<br> bitcoin-cli getinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "stop": "stop<br><br>Stop Bitcoin server.",
            "generate": "generate numblocks<br><br>Mine blocks immediately (before the RPC call returns)<br><br>Note: this function can only be used on the regtest network<br><br>Arguments:<br>1. numblocks    (numeric, required) How many blocks are generated immediately.<br><br>Result<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> bitcoin-cli generate 11",
            "getgenerate": "getgenerate<br><br>Return if the server is set to generate coins or not. The default is false.<br>It is set with the command line argument -gen (or bitcoin.conf setting gen)<br>It can also be set with the setgenerate call.<br><br>Result<br>true|false      (boolean) If the server is set to generate coins or not<br><br>Examples:<br> bitcoin-cli getgenerate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setgenerate": "setgenerate generate ( genproclimit )<br><br>Set 'generate' true or false to turn generation on or off.<br>Generation is limited to 'genproclimit' processors, -1 is unlimited.<br>See the getgenerate call for the current setting.<br><br>Arguments:<br>1. generate         (boolean, required) Set to true to turn on generation, off to turn off.<br>2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.<br><br>Examples:<br><br>Set the generation on with a limit of one processor<br> bitcoin-cli setgenerate true 1<br><br>Check the setting<br> bitcoin-cli getgenerate <br><br>Turn off generation<br> bitcoin-cli setgenerate false<br><br>Using json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblocktemplate": "getblocktemplate ( \"jsonrequestobject\" )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments:<br>1. \"jsonrequestobject\"       (string, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\" or omitted<br>       \"capabilities\":[       (array, optional) A list of strings<br>           \"support\"           (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>         ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The block version<br>  \"previousblockhash\" : \"xxxx\",    (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",          (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"hash\" : \"xxxx\",          (string) hash/id encoded in little-endian hexadecimal<br>         \"depends\" : [              (array) array of numbers <br>             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,               (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any<br>         \"required\" : true|false     (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                  (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"flags\"            (string) <br>  },<br>  \"coinbasevalue\" : n,               (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)<br>  \"coinbasetxn\" : { ... },           (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",               (string) The hash target<br>  \"mintime\" : xxx,                   (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                      (array of string) list of ways the block template may be changed <br>     \"value\"                         (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",   (string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxx\",                 (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> bitcoin-cli getblocktemplate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblocksize\": nnn,   (numeric) The last block size<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"errors\": \"...\"          (string) Current errors<br>  \"generate\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)<br>  \"genproclimit\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)<br>  \"pooledtx\": n              (numeric) The size of the mem pool<br>  \"testnet\": true|false      (boolean) If using testnet or not<br>  \"chain\": \"xxxx\",         (string) current network name as defined in BIP70 (main, test, regtest)<br>}<br><br>Examples:<br> bitcoin-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( blocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height     (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> bitcoin-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "prioritisetransaction": "prioritisetransaction <txid> <priority delta> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. priority delta (numeric, required) The priority to add or subtract.<br>                  The transaction selection algorithm considers the tx as it would have a higher priority.<br>                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) <br>3. fee delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result<br>true              (boolean) Returns true<br><br>Examples:<br> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\" ( \"jsonparametersobject\" )<br><br>Attempts to submit new block to network.<br>The 'jsonparametersobject' parameter is currently ignored.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"    (string, required) the hex-encoded block data to submit<br>2. \"jsonparametersobject\"     (string, optional) object of optional parameters<br>    {<br>      \"workid\" : \"id\"    (string, optional) if the server provided a workid, it MUST be included with submissions<br>    }<br><br>Result:<br><br>Examples:<br> bitcoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts add or remove a node from the addnode list.<br>Or try a connection to a node once.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> bitcoin-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "disconnectnode": "disconnectnode \"node\" <br><br>Immediately disconnects from the specified node.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br><br>Examples:<br> bitcoin-cli disconnectnode \"192.168.0.6:8333\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddednodeinfo": "getaddednodeinfo dns ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br>If dns is false, only a list of added nodes will be provided,<br>otherwise connected information will also be available.<br><br>Arguments:<br>1. dns        (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available.<br>2. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node ip address<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [<br>       {<br>         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server host and port<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>       ,...<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddednodeinfo true<br> bitcoin-cli getaddednodeinfo true \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> bitcoin-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Total cpu time<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in BTC/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network warnings (such as alert messages) <br>}<br><br>Examples:<br> bitcoin-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The ip address and port of the peer<br>    \"addrlocal\":\"ip:port\",   (string) local address<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time<br>    \"minping\": n,              (numeric) minimum observed ping time<br>    \"pingwait\": n,             (numeric) ping wait<br>    \"version\": v,              (numeric) The peer version, such as 7001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> bitcoin-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> bitcoin-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setban": "setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)<br><br>Attempts add or remove a IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)<br>2. \"command\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400<br> bitcoin-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,\"data\":\"hex\",...} ( locktime )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"transactions\"        (string, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",    (string, required) The transaction id<br>         \"vout\":n        (numeric, required) The output number<br>       }<br>       ,...<br>     ]<br>2. \"outputs\"             (string, required) a json object with outputs<br>    {<br>      \"address\": x.xxx   (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the BTC amount<br>      \"data\": \"hex\",     (string, required) The key is \"data\", the value is hex encoded data<br>      ...<br>    }<br>3. locktime                (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br><br>Result:<br>\"transaction\"            (string) hex string of the transaction<br><br>Examples<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"data\":\"00010203\"}\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"data\":\"00010203\"}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\"<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hex\"      (string, required) The transaction hex string<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"size\" : n,             (numeric) The transaction size<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> bitcoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hex\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hex\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) bitcoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) script address<br>}<br><br>Examples:<br> bitcoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" includeWatching<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add one change output to the outputs.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must bein the wallet using importaddress or addmultisigaddress (to calculate fees).<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. \"hexstring\"     (string, required) The hex string of the raw transaction<br>2. includeWatching (boolean, optional, default false) Also select inputs which are watch only<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br>\"hex\"             <br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> bitcoin-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> bitcoin-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> bitcoin-cli sendrawtransaction \"signedtransactionhex\"",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose )<br><br>NOTE: By default this function only works sometimes. This is when the tx is in the mempool<br>or there is an unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option.<br><br>Return the raw transaction data.<br><br>If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.<br>If verbose is non-zero, returns an Object with information about 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose       (numeric, optional, default=0) If 0, return a string, other return a json object<br><br>Result (if verbose is not set or set to 0):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose > 0):<br>{<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"bitcoinaddress\"        (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> bitcoin-cli getrawtransaction \"mytxid\"<br> bitcoin-cli getrawtransaction \"mytxid\" 1<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> bitcoin-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\"    (string, required for P2SH) redeem script<br>       }<br>       ,...<br>    ]<br>3. \"privatekeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"       (string, required) A json array of keys which are bitcoin addresses or hex-encoded public keys<br>     [<br>       \"key\"    (string) bitcoin address or hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 addresses<br> bitcoin-cli createmultisig 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "estimatefee": "estimatefee nblocks<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>n              (numeric) estimated fee-per-kilobyte<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br><br>Example:<br> bitcoin-cli estimatefee 6",
            "estimatepriority": "estimatepriority nblocks<br><br>Estimates the approximate priority a zero-fee transaction needs to begin<br>confirmation within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>n              (numeric) estimated priority<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br><br>Example:<br> bitcoin-cli estimatepriority 6",
            "estimatesmartfee": "estimatesmartfee nblocks<br><br>WARNING: This interface is unstable and may disappear or change!<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks if possible and return the number of blocks<br>for which the estimate is valid.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>{<br>  \"feerate\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br>However it will not return a value below the mempool reject fee.<br><br>Example:<br> bitcoin-cli estimatesmartfee 6",
            "estimatesmartpriority": "estimatesmartpriority nblocks<br><br>WARNING: This interface is unstable and may disappear or change!<br><br>Estimates the approximate priority a zero-fee transaction needs to begin<br>confirmation within nblocks blocks if possible and return the number of blocks<br>for which the estimate is valid.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>{<br>  \"priority\" : x.x,    (numeric) estimated priority<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br>However if the mempool reject fee is set it will return 1e9 * MAX_MONEY.<br><br>Example:<br> bitcoin-cli estimatesmartpriority 6",
            "validateaddress": "validateaddress \"bitcoinaddress\"<br><br>Return information about the given bitcoin address.<br><br>Arguments:<br>1. \"bitcoinaddress\"     (string, required) The bitcoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"bitcoinaddress\", (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key<br>  \"iscompressed\" : true|false,  (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \"\" is the default account<br>}<br><br>Examples:<br> bitcoin-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"bitcoinaddress\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already conflicted or abandoned.<br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br><br>Result:<br><br>Examples:<br> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"account\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet.<br>Each key is a Bitcoin address or hex-encoded public key.<br>If 'account' is specified (DEPRECATED), assign address to that account.<br><br>Arguments:<br>1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keysobject\"   (string, required) A json array of bitcoin addresses or hex-encoded public keys<br>     [<br>       \"address\"  (string) bitcoin address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"account\"      (string, optional) DEPRECATED. An account to assign the addresses to.<br><br>Result:<br>\"bitcoinaddress\"  (string) A bitcoin address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> bitcoin-cli addmultisigaddress 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies wallet.dat to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> bitcoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpprivkey": "dumpprivkey \"bitcoinaddress\"<br><br>Reveals the private key corresponding to 'bitcoinaddress'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"bitcoinaddress\"   (string, required) The bitcoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> bitcoin-cli dumpprivkey \"myaddress\"<br> bitcoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format.<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename<br><br>Examples:<br> bitcoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt you wallet<br> bitcoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending bitcoin<br> bitcoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can so something like sign<br> bitcoin-cli signmessage \"bitcoinaddress\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> bitcoin-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccount": "getaccount \"bitcoinaddress\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> bitcoin-cli getaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccountaddress": "getaccountaddress \"account\"<br><br>DEPRECATED. Returns the current Bitcoin address for receiving payments to this account.<br><br>Arguments:<br>1. \"account\"       (string, required) The account name for the address. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.<br><br>Result:<br>\"bitcoinaddress\"   (string) The account bitcoin address<br><br>Examples:<br> bitcoin-cli getaccountaddress <br> bitcoin-cli getaccountaddress \"\"<br> bitcoin-cli getaccountaddress \"myaccount\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"  (string, required) The account name.<br><br>Result:<br>[                     (json array of string)<br>  \"bitcoinaddress\"  (string) a bitcoin address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"account\" minconf includeWatchonly )<br><br>If account is not specified, returns the server's total available balance.<br>If account is specified (DEPRECATED), returns the balance in the account.<br>Note that the account \"\" is not the same as leaving the parameter out.<br>The server total may be different to the balance in the default \"\" account.<br><br>Arguments:<br>1. \"account\"      (string, optional) DEPRECATED. The selected account, or \"*\" for entire wallet. It may be the default account using \"\".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>The total amount in the wallet<br> bitcoin-cli getbalance <br><br>The total amount in the wallet at least 5 blocks confirmed<br> bitcoin-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"account\" )<br><br>Returns a new Bitcoin address for receiving payments.<br>If 'account' is specified (DEPRECATED), it is added to the address book <br>so payments received with the address will be credited to 'account'.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \"\" is used. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.<br><br>Result:<br>\"bitcoinaddress\"    (string) The new bitcoin address<br><br>Examples:<br> bitcoin-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress<br><br>Returns a new Bitcoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> bitcoin-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaccount": "getreceivedbyaccount \"account\" ( minconf )<br><br>DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. \"account\"      (string, required) The selected account, may be the default account using \"\".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>Amount received by the default account with at least 1 confirmation<br> bitcoin-cli getreceivedbyaccount \"\"<br><br>Amount received at the tabby account including unconfirmed amounts with zero confirmations<br> bitcoin-cli getreceivedbyaccount \"tabby\" 0<br><br>The amount with at least 6 confirmation, very safe<br> bitcoin-cli getreceivedbyaccount \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaddress": "getreceivedbyaddress \"bitcoinaddress\" ( minconf )<br><br>Returns the total amount received by the given bitcoinaddress in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in BTC received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" 0<br><br>The amount with at least 6 confirmation, very safe<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( includeWatchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br>2. \"includeWatchonly\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in BTC<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The block index<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"bip125-replaceable\": \"yes|no|unknown\"  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",  (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.<br>      \"address\" : \"bitcoinaddress\",   (string) The bitcoin address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx,                 (numeric) The amount in BTC<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                       (numeric) the vout value<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in BTC<br>  \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed balance of the wallet in BTC<br>  \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet in BTC<br>  \"txcount\": xxxxxxx,         (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee configuration, set in BTC/kB<br>}<br><br>Examples:<br> bitcoin-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"script\"           (string, required) The hex-encoded script (or address)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Note: This call can take minutes to complete if rescan is true.<br>If you have the full public key, you should call importpublickey instead of this.<br><br>Examples:<br><br>Import a script with rescan<br> bitcoin-cli importaddress \"myscript\"<br><br>Import using a label without rescan<br> bitcoin-cli importaddress \"myscript\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myscript\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprivkey": "importprivkey \"bitcoinprivkey\" ( \"label\" rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet.<br><br>Arguments:<br>1. \"bitcoinprivkey\"   (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Dump a private key<br> bitcoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> bitcoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"pubkey\"           (string, required) The hex-encoded public key<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Import a public key with rescan<br> bitcoin-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> bitcoin-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> bitcoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> bitcoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> bitcoin-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaccounts": "listaccounts ( minconf includeWatchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')<br><br>Result:<br>{                      (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> bitcoin-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> bitcoin-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> bitcoin-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"bitcoinaddress\",     (string) The bitcoin address<br>      amount,                 (numeric) The amount in BTC<br>      \"account\"             (string, optional) The account (DEPRECATED)<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaccount": "listreceivedbyaccount ( minconf includeempty includeWatchonly)<br><br>DEPRECATED. List balances by account.<br><br>Arguments:<br>1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.<br>3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",  (string) The account name of the receiving account<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account<br>    \"confirmations\" : n,          (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"           (string) A comment for the address/transaction, if any<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaccount <br> bitcoin-cli listreceivedbyaccount 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf includeempty includeWatchonly)<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. includeempty  (numeric, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. The account of the receiving address. The default account is \"\".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in BTC received by the address<br>    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"                (string) A comment for the address/transaction, if any<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaddress <br> bitcoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listsinceblock": "listsinceblock ( \"blockhash\" target-confirmations includeWatchonly)<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted<br><br>Arguments:<br>1. \"blockhash\"   (string, optional) The block hash to list transactions since<br>2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more<br>3. includeWatchonly:        (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')<br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.<br>    \"address\":\"bitcoinaddress\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"       (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the last block<br>}<br><br>Examples:<br> bitcoin-cli listsinceblock <br> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions ( \"account\" count from includeWatchonly)<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.<br><br>Arguments:<br>1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. from           (numeric, optional, default=0) The number of transactions to skip<br>4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \"\" for the default account.<br>    \"address\":\"bitcoinaddress\",    (string) The bitcoin address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. 'send' and 'receive' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the<br>                                         'move' category for moves outbound. It is positive for the 'receive' category,<br>                                         and for the 'move' category for inbound funds.<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and <br>                                         'receive' category of transactions. Negative confirmations indicate the<br>                                         transation conflicts with the block chain<br>    \"trusted\": xxx            (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\": \"label\"        (string) A comment for the address/transaction, if any<br>    \"otheraccount\": \"accountname\",  (string) For the 'move' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>    \"bip125-replaceable\": \"yes|no|unknown\"  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                     may be unknown for unconfirmed transactions not in the mempool<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> bitcoin-cli listtransactions <br><br>List transactions 100 to 120<br> bitcoin-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf  [\"address\",...] )<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br>Results are an array of Objects, each of which has:<br>{txid, vout, scriptPubKey, amount, confirmations}<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"    (string) A json array of bitcoin addresses to filter<br>    [<br>      \"address\"   (string) bitcoin address<br>      ,...<br>    ]<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",        (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",  (string) the bitcoin address<br>    \"account\" : \"account\",  (string) DEPRECATED. The associated account, or \"\" for the default account<br>    \"scriptPubKey\" : \"key\", (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction amount in BTC<br>    \"confirmations\" : n       (numeric) The number of confirmations<br>  }<br>  ,...<br>]<br><br>Examples<br> bitcoin-cli listunspent <br> bitcoin-cli listunspent 6 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, required) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"   (string, required) The name of the account to move funds from. May be the default account using \"\".<br>2. \"toaccount\"     (string, required) The name of the account to move funds to. May be the default account using \"\".<br>3. amount            (numeric) Quantity of BTC to move between accounts.<br>4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"       (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false           (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 BTC from the default account to the account named tabby<br> bitcoin-cli move \"\" \"tabby\" 0.01<br><br>Move 0.01 BTC timotei to akiko with a comment and funds have 6 confirmations<br> bitcoin-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendfrom": "sendfrom \"fromaccount\" \"tobitcoinaddress\" amount ( minconf \"comment\" \"comment-to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) The name of the account to send funds from. May be the default account using \"\".<br>2. \"tobitcoinaddress\"  (string, required) The bitcoin address to send funds to.<br>3. amount                (numeric or string, required) The amount in BTC (transaction fee is added on top).<br>4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                                     This is not part of the transaction, just kept in your wallet.<br>6. \"comment-to\"        (string, optional) An optional comment to store the name of the person or organization <br>                                     to which you're sending the transaction. This is not part of the transaction, <br>                                     it is just kept in your wallet.<br><br>Result:<br>\"transactionid\"        (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 BTC from the default account to the address, must have at least 1 confirmation<br> bitcoin-cli sendfrom \"\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> bitcoin-cli sendfrom \"tabby\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01 6 \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br><br>Arguments:<br>1. \"fromaccount\"         (string, required) DEPRECATED. The account to send the funds from. Should be \"\" for the default account<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in BTC is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefromamount   (string, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"            (string) Subtract fee from this address<br>      ,...<br>    ]<br><br>Result:<br>\"transactionid\"          (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \"\" \"[\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"bitcoinaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount )<br><br>Send an amount to a given address.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to send to.<br>2. \"amount\"      (numeric or string, required) The amount in BTC to send. eg 0.1<br>3. \"comment\"     (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment-to\"  (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less bitcoins than you enter in the amount field.<br><br>Result:<br>\"transactionid\"  (string) The transaction id.<br><br>Examples:<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"\" \"\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setaccount": "setaccount \"bitcoinaddress\" \"account\"<br><br>DEPRECATED. Sets the account associated with the given address.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to be associated with an account.<br>2. \"account\"         (string, required) The account to assign the address to.<br><br>Examples:<br> bitcoin-cli setaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB. Overwrites the paytxfee parameter.<br><br>Arguments:<br>1. amount         (numeric or sting, required) The transaction fee in BTC/kB<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> bitcoin-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"bitcoinaddress\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
        },
        "13": {
            "getbestblockhash": "getbestblockhash<br><br>Returns the hash of the best (tip) block in the longest block chain.<br><br>Result<br>\"hex\"      (string) the block hash hex encoded<br><br>Examples<br> bitcoin-cli getbestblockhash <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblock": "getblock \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.<br>If verbose is true, returns an Object with information about block <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"size\" : n,            (numeric) The block size<br>  \"strippedsize\" : n,    (numeric) The block size excluding witness data<br>  \"weight\" : n           (numeric) The block weight (BIP 141)<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"tx\" : [               (array of string) The transaction ids<br>     \"transactionid\"     (string) The transaction id<br>     ,...<br>  ],<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\"       (string) The hash of the next block<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockchaininfo": "getblockchaininfo<br>Returns an object containing various state info regarding block chain processing.<br><br>Result:<br>{<br>  \"chain\": \"xxxx\",        (string) current network name as defined in BIP70 (main, test, regtest)<br>  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server<br>  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated<br>  \"bestblockhash\": \"...\", (string) the hash of the currently best block<br>  \"difficulty\": xxxxxx,     (numeric) the current difficulty<br>  \"mediantime\": xxxxxx,     (numeric) median time for the current best block<br>  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]<br>  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal<br>  \"pruned\": xx,             (boolean) if the blocks are subject to pruning<br>  \"pruneheight\": xxxxxx,    (numeric) lowest-height complete block stored<br>  \"softforks\": [            (array) status of softforks in progress<br>     {<br>        \"id\": \"xxxx\",        (string) name of softfork<br>        \"version\": xx,         (numeric) block version<br>        \"enforce\": {           (object) progress toward enforcing the softfork rules for new-version blocks<br>           \"status\": xx,       (boolean) true if threshold reached<br>           \"found\": xx,        (numeric) number of blocks with the new version found<br>           \"required\": xx,     (numeric) number of blocks required to trigger<br>           \"window\": xx,       (numeric) maximum size of examined window of recent blocks<br>        },<br>        \"reject\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \"enforce\")<br>     }, ...<br>  ],<br>  \"bip9_softforks\": {          (object) status of BIP9 softforks in progress<br>     \"xxxx\" : {                (string) name of the softfork<br>        \"status\": \"xxxx\",    (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"<br>        \"bit\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)<br>        \"startTime\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning<br>        \"timeout\": xx          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in<br>     }<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getblockchaininfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockcount": "getblockcount<br><br>Returns the number of blocks in the longest block chain.<br><br>Result:<br>n    (numeric) The current block count<br><br>Examples:<br> bitcoin-cli getblockcount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockhash": "getblockhash index<br><br>Returns hash of block in best-block-chain at index provided.<br><br>Arguments:<br>1. index         (numeric, required) The block index<br><br>Result:<br>\"hash\"         (string) The block hash<br><br>Examples:<br> bitcoin-cli getblockhash 1000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getblockheader": "getblockheader \"hash\" ( verbose )<br><br>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.<br>If verbose is true, returns an Object with information about blockheader <hash>.<br><br>Arguments:<br>1. \"hash\"          (string, required) The block hash<br>2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data<br><br>Result (for verbose = true):<br>{<br>  \"hash\" : \"hash\",     (string) the block hash (same as provided)<br>  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain<br>  \"height\" : n,          (numeric) The block height or index<br>  \"version\" : n,         (numeric) The block version<br>  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal<br>  \"merkleroot\" : \"xxxx\", (string) The merkle root<br>  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"nonce\" : n,           (numeric) The nonce<br>  \"bits\" : \"1d00ffff\", (string) The bits<br>  \"difficulty\" : x.xxx,  (numeric) The difficulty<br>  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block<br>  \"nextblockhash\" : \"hash\",      (string) The hash of the next block<br>  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)<br>}<br><br>Result (for verbose=false):<br>\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.<br><br>Examples:<br> bitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getchaintips": "getchaintips<br>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.<br><br>Result:<br>[<br>  {<br>    \"height\": xxxx,         (numeric) height of the chain tip<br>    \"hash\": \"xxxx\",         (string) block hash of the tip<br>    \"branchlen\": 0          (numeric) zero for main chain<br>    \"status\": \"active\"      (string) \"active\" for the main chain<br>  },<br>  {<br>    \"height\": xxxx,<br>    \"hash\": \"xxxx\",<br>    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain<br>    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)<br>  }<br>]<br>Possible values for status:<br>1.  \"invalid\"               This branch contains at least one invalid block<br>2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid<br>3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated<br>4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated<br>5.  \"active\"                This is the tip of the active main chain, which is certainly valid<br><br>Examples:<br> bitcoin-cli getchaintips <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getdifficulty": "getdifficulty<br><br>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Result:<br>n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br>Examples:<br> bitcoin-cli getdifficulty <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolancestors": "getmempoolancestors txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool ancestors.<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) true for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) transaction size in bytes<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples<br> bitcoin-cli getmempoolancestors \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolancestors\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempooldescendants": "getmempooldescendants txid (verbose)<br><br>If txid is in the mempool, returns all in-mempool descendants.<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br>2. verbose                  (boolean, optional, default=false) true for a json object, false for array of transaction ids<br><br>Result (for verbose=false):<br>[                       (json array of strings)<br>  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction<br>  ,...<br>]<br><br>Result (for verbose=true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) transaction size in bytes<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples<br> bitcoin-cli getmempooldescendants \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempooldescendants\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolentry": "getmempoolentry txid<br><br>Returns mempool data for given transaction<br><br>Arguments:<br>1. \"txid\"                   (string, required) The transaction id (must be in mempool)<br><br>Result:<br>{                           (json object)<br>    \"size\" : n,             (numeric) transaction size in bytes<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>}<br><br>Examples<br> bitcoin-cli getmempoolentry \"mytxid\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmempoolinfo": "getmempoolinfo<br><br>Returns details on the active state of the TX memory pool.<br><br>Result:<br>{<br>  \"size\": xxxxx,               (numeric) Current tx count<br>  \"bytes\": xxxxx,              (numeric) Sum of all tx sizes<br>  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool<br>  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool<br>  \"mempoolminfee\": xxxxx       (numeric) Minimum fee for tx to be accepted<br>}<br><br>Examples:<br> bitcoin-cli getmempoolinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawmempool": "getrawmempool ( verbose )<br><br>Returns all transaction ids in memory pool as a json array of string transaction ids.<br><br>Arguments:<br>1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids<br><br>Result: (for verbose = false):<br>[                     (json array of string)<br>  \"transactionid\"     (string) The transaction id<br>  ,...<br>]<br><br>Result: (for verbose = true):<br>{                           (json object)<br>  \"transactionid\" : {       (json object)<br>    \"size\" : n,             (numeric) transaction size in bytes<br>    \"fee\" : n,              (numeric) transaction fee in BTC<br>    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority<br>    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT<br>    \"height\" : n,           (numeric) block height when transaction entered pool<br>    \"startingpriority\" : n, (numeric) priority when transaction entered pool<br>    \"currentpriority\" : n,  (numeric) transaction priority now<br>    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)<br>    \"descendantsize\" : n,   (numeric) size of in-mempool descendants (including this one)<br>    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)<br>    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)<br>    \"ancestorsize\" : n,     (numeric) size of in-mempool ancestors (including this one)<br>    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)<br>    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction<br>        \"transactionid\",    (string) parent transaction id<br>       ... ]<br>  }, ...<br>}<br><br>Examples<br> bitcoin-cli getrawmempool true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxout": "gettxout \"txid\" n ( includemempool )<br><br>Returns details about an unspent transaction output.<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id<br>2. n              (numeric, required) vout number<br>3. includemempool  (boolean, optional) Whether to include the mempool<br><br>Result:<br>{<br>  \"bestblock\" : \"hash\",    (string) the block hash<br>  \"confirmations\" : n,       (numeric) The number of confirmations<br>  \"value\" : x.xxx,           (numeric) The transaction value in BTC<br>  \"scriptPubKey\" : {         (json object)<br>     \"asm\" : \"code\",       (string) <br>     \"hex\" : \"hex\",        (string) <br>     \"reqSigs\" : n,          (numeric) Number of required signatures<br>     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash<br>     \"addresses\" : [          (array of string) array of bitcoin addresses<br>        \"bitcoinaddress\"     (string) bitcoin address<br>        ,...<br>     ]<br>  },<br>  \"version\" : n,            (numeric) The version<br>  \"coinbase\" : true|false   (boolean) Coinbase or not<br>}<br><br>Examples:<br><br>Get unspent transactions<br> bitcoin-cli listunspent <br><br>View the details<br> bitcoin-cli gettxout \"txid\" 1<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettxoutproof": "gettxoutproof [\"txid\",...] ( blockhash )<br><br>Returns a hex-encoded proof that \"txid\" was included in a block.<br><br>NOTE: By default this function only works sometimes. This is when there is an<br>unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option or<br>specify the block in which the transaction is included manually (by blockhash).<br><br>Return the raw transaction data.<br><br>Arguments:<br>1. \"txids\"       (string) A json array of txids to filter<br>    [<br>      \"txid\"     (string) A transaction hash<br>      ,...<br>    ]<br>2. \"block hash\"  (string, optional) If specified, looks for txid in the block with this hash<br><br>Result:<br>\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.",
            "gettxoutsetinfo": "gettxoutsetinfo<br><br>Returns statistics about the unspent transaction output set.<br>Note this call may take some time.<br><br>Result:<br>{<br>  \"height\":n,     (numeric) The current block height (index)<br>  \"bestblock\": \"hex\",   (string) the best block hash hex<br>  \"transactions\": n,      (numeric) The number of transactions<br>  \"txouts\": n,            (numeric) The number of output transactions<br>  \"bytes_serialized\": n,  (numeric) The serialized size<br>  \"hash_serialized\": \"hash\",   (string) The serialized hash<br>  \"total_amount\": x.xxx          (numeric) The total amount<br>}<br><br>Examples:<br> bitcoin-cli gettxoutsetinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifychain": "verifychain ( checklevel numblocks )<br><br>Verifies blockchain database.<br><br>Arguments:<br>1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.<br>2. numblocks    (numeric, optional, default=6, 0=all) The number of blocks to check.<br><br>Result:<br>true|false       (boolean) Verified or not<br><br>Examples:<br> bitcoin-cli verifychain <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifytxoutproof": "verifytxoutproof \"proof\"<br><br>Verifies that a proof points to a transaction in a block, returning the transaction it commits to<br>and throwing an RPC error if the block is not in our best chain<br><br>Arguments:<br>1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof<br><br>Result:<br>[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid",
            "getinfo": "getinfo<br>Returns an object containing various state info.<br><br>Result:<br>{<br>  \"version\": xxxxx,           (numeric) the server version<br>  \"protocolversion\": xxxxx,   (numeric) the protocol version<br>  \"walletversion\": xxxxx,     (numeric) the wallet version<br>  \"balance\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet<br>  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server<br>  \"timeoffset\": xxxxx,        (numeric) the time offset<br>  \"connections\": xxxxx,       (numeric) the number of connections<br>  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server<br>  \"difficulty\": xxxxxx,       (numeric) the current difficulty<br>  \"testnet\": true|false,      (boolean) if the server is using testnet or not<br>  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in BTC/kB<br>  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in BTC/kB<br>  \"errors\": \"...\"           (string) any error messages<br>}<br><br>Examples:<br> bitcoin-cli getinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "help": "help ( \"command\" )<br><br>List all commands, or get help for a specified command.<br><br>Arguments:<br>1. \"command\"     (string, optional) The command to get help on<br><br>Result:<br>\"text\"     (string) The help text",
            "stop": "stop<br><br>Stop Bitcoin server.",
            "generate": "generate numblocks ( maxtries )<br><br>Mine up to numblocks blocks immediately (before the RPC call returns)<br><br>Arguments:<br>1. numblocks    (numeric, required) How many blocks are generated immediately.<br>2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks<br> bitcoin-cli generate 11",
            "generatetoaddress": "generatetoaddress numblocks address (maxtries)<br><br>Mine blocks immediately to a specified address (before the RPC call returns)<br><br>Arguments:<br>1. numblocks    (numeric, required) How many blocks are generated immediately.<br>2. address    (string, required) The address to send the newly generated bitcoin to.<br>3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).<br><br>Result<br>[ blockhashes ]     (array) hashes of blocks generated<br><br>Examples:<br><br>Generate 11 blocks to myaddress<br> bitcoin-cli generatetoaddress 11 \"myaddress\"",
            "getblocktemplate": "getblocktemplate ( TemplateRequest )<br><br>If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.<br>It returns data needed to construct a block to work on.<br>For full specification, see BIPs 22, 23, 9, and 145:<br>    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki<br>    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes<br>    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki<br><br>Arguments:<br>1. TemplateRequest          (json object, optional) A json object in the following spec<br>     {<br>       \"mode\":\"template\"    (string, optional) This must be set to \"template\", \"proposal\" (see BIP 23), or omitted<br>       \"capabilities\":[     (array, optional) A list of strings<br>           \"support\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'<br>           ,...<br>       ],<br>       \"rules\":[            (array, optional) A list of strings<br>           \"support\"          (string) client side supported softfork deployment<br>           ,...<br>       ]<br>     }<br><br><br>Result:<br>{<br>  \"version\" : n,                    (numeric) The preferred block version<br>  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced<br>  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments<br>      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule<br>      ,...<br>  },<br>  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions<br>  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block<br>  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block<br>      {<br>         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)<br>         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal<br>         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)<br>         \"depends\" : [                (array) array of numbers <br>             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is<br>             ,...<br>         ],<br>         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one<br>         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero<br>         \"weight\" : n,                (numeric) total transaction weight, as counted for purposes of block limits<br>         \"required\" : true|false      (boolean) if provided and true, this transaction must be in the final block<br>      }<br>      ,...<br>  ],<br>  \"coinbaseaux\" : {                 (json object) data that should be included in the coinbase's scriptSig content<br>      \"flags\" : \"xx\"                  (string) key name is to be ignored, and value included in scriptSig<br>  },<br>  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)<br>  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction<br>  \"target\" : \"xxxx\",                (string) The hash target<br>  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)<br>  \"mutable\" : [                     (array of string) list of ways the block template may be changed <br>     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'<br>     ,...<br>  ],<br>  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces<br>  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks<br>  \"sizelimit\" : n,                  (numeric) limit of block size<br>  \"weightlimit\" : n,                (numeric) limit of block weight<br>  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)<br>  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block<br>  \"height\" : n                      (numeric) The height of the next block<br>}<br><br>Examples:<br> bitcoin-cli getblocktemplate <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getmininginfo": "getmininginfo<br><br>Returns a json object containing mining-related information.<br>Result:<br>{<br>  \"blocks\": nnn,             (numeric) The current block<br>  \"currentblocksize\": nnn,   (numeric) The last block size<br>  \"currentblockweight\": nnn, (numeric) The last block weight<br>  \"currentblocktx\": nnn,     (numeric) The last block transaction<br>  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty<br>  \"errors\": \"...\"            (string) Current errors<br>  \"networkhashps\": nnn,      (numeric) The network hashes per second<br>  \"pooledtx\": n              (numeric) The size of the mempool<br>  \"testnet\": true|false      (boolean) If using testnet or not<br>  \"chain\": \"xxxx\",           (string) current network name as defined in BIP70 (main, test, regtest)<br>}<br><br>Examples:<br> bitcoin-cli getmininginfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkhashps": "getnetworkhashps ( blocks height )<br><br>Returns the estimated network hashes per second based on the last n blocks.<br>Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.<br>Pass in [height] to estimate the network speed at the time when a certain block was found.<br><br>Arguments:<br>1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.<br>2. height     (numeric, optional, default=-1) To estimate at the time of the given height.<br><br>Result:<br>x             (numeric) Hashes per second estimated<br><br>Examples:<br> bitcoin-cli getnetworkhashps <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "prioritisetransaction": "prioritisetransaction <txid> <priority delta> <fee delta><br>Accepts the transaction into mined blocks at a higher (or lower) priority<br><br>Arguments:<br>1. \"txid\"       (string, required) The transaction id.<br>2. priority delta (numeric, required) The priority to add or subtract.<br>                  The transaction selection algorithm considers the tx as it would have a higher priority.<br>                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) <br>3. fee delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).<br>                  The fee is not actually paid, only the algorithm for selecting transactions into a block<br>                  considers the transaction as it would have paid a higher (or lower) fee.<br><br>Result<br>true              (boolean) Returns true<br><br>Examples:<br> bitcoin-cli prioritisetransaction \"txid\" 0.0 10000<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "submitblock": "submitblock \"hexdata\" ( \"jsonparametersobject\" )<br><br>Attempts to submit new block to network.<br>The 'jsonparametersobject' parameter is currently ignored.<br>See https://en.bitcoin.it/wiki/BIP_0022 for full specification.<br><br>Arguments<br>1. \"hexdata\"    (string, required) the hex-encoded block data to submit<br>2. \"jsonparametersobject\"     (string, optional) object of optional parameters<br>    {<br>      \"workid\" : \"id\"    (string, optional) if the server provided a workid, it MUST be included with submissions<br>    }<br><br>Result:<br><br>Examples:<br> bitcoin-cli submitblock \"mydata\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addnode": "addnode \"node\" \"add|remove|onetry\"<br><br>Attempts add or remove a node from the addnode list.<br>Or try a connection to a node once.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br>2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once<br><br>Examples:<br> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "clearbanned": "clearbanned<br><br>Clear all banned IPs.<br><br>Examples:<br> bitcoin-cli clearbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "disconnectnode": "disconnectnode \"node\" <br><br>Immediately disconnects from the specified node.<br><br>Arguments:<br>1. \"node\"     (string, required) The node (see getpeerinfo for nodes)<br><br>Examples:<br> bitcoin-cli disconnectnode \"192.168.0.6:8333\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddednodeinfo": "getaddednodeinfo dummy ( \"node\" )<br><br>Returns information about the given added node, or all added nodes<br>(note that onetry addnodes are not listed here)<br><br>Arguments:<br>1. dummy      (boolean, required) Kept for historical purposes but ignored<br>2. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.<br><br>Result:<br>[<br>  {<br>    \"addednode\" : \"192.168.0.201\",   (string) The node ip address or name (as provided to addnode)<br>    \"connected\" : true|false,          (boolean) If connected<br>    \"addresses\" : [                    (list of objects) Only when connected = true<br>       {<br>         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server IP and port we're connected to<br>         \"connected\" : \"outbound\"           (string) connection, inbound or outbound<br>       }<br>     ]<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddednodeinfo true<br> bitcoin-cli getaddednodeinfo true \"192.168.0.201\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getconnectioncount": "getconnectioncount<br><br>Returns the number of connections to other nodes.<br><br>Result:<br>n          (numeric) The connection count<br><br>Examples:<br> bitcoin-cli getconnectioncount <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnettotals": "getnettotals<br><br>Returns information about network traffic, including bytes in, bytes out,<br>and current time.<br><br>Result:<br>{<br>  \"totalbytesrecv\": n,   (numeric) Total bytes received<br>  \"totalbytessent\": n,   (numeric) Total bytes sent<br>  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds<br>  \"uploadtarget\":<br>  {<br>    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds<br>    \"target\": n,                            (numeric) Target in bytes<br>    \"target_reached\": true|false,           (boolean) True if target is reached<br>    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks<br>    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle<br>    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle<br>  }<br>}<br><br>Examples:<br> bitcoin-cli getnettotals <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnetworkinfo": "getnetworkinfo<br>Returns an object containing various state info regarding P2P networking.<br><br>Result:<br>{<br>  \"version\": xxxxx,                      (numeric) the server version<br>  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string<br>  \"protocolversion\": xxxxx,              (numeric) the protocol version<br>  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network<br>  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers<br>  \"timeoffset\": xxxxx,                   (numeric) the time offset<br>  \"connections\": xxxxx,                  (numeric) the number of connections<br>  \"networks\": [                          (array) information per network<br>  {<br>    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)<br>    \"limited\": true|false,               (boolean) is the network limited using -onlynet?<br>    \"reachable\": true|false,             (boolean) is the network reachable?<br>    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none<br>  }<br>  ,...<br>  ],<br>  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in BTC/kB<br>  \"localaddresses\": [                    (array) list of local addresses<br>  {<br>    \"address\": \"xxxx\",                 (string) network address<br>    \"port\": xxx,                         (numeric) network port<br>    \"score\": xxx                         (numeric) relative score<br>  }<br>  ,...<br>  ]<br>  \"warnings\": \"...\"                    (string) any network warnings (such as alert messages) <br>}<br><br>Examples:<br> bitcoin-cli getnetworkinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getpeerinfo": "getpeerinfo<br><br>Returns data about each connected network node as a json array of objects.<br><br>Result:<br>[<br>  {<br>    \"id\": n,                   (numeric) Peer index<br>    \"addr\":\"host:port\",      (string) The ip address and port of the peer<br>    \"addrlocal\":\"ip:port\",   (string) local address<br>    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered<br>    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it<br>    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send<br>    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive<br>    \"bytessent\": n,            (numeric) The total bytes sent<br>    \"bytesrecv\": n,            (numeric) The total bytes received<br>    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)<br>    \"timeoffset\": ttt,         (numeric) The time offset in seconds<br>    \"pingtime\": n,             (numeric) ping time (if available)<br>    \"minping\": n,              (numeric) minimum observed ping time (if any at all)<br>    \"pingwait\": n,             (numeric) ping wait (if non-zero)<br>    \"version\": v,              (numeric) The peer version, such as 7001<br>    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version<br>    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)<br>    \"startingheight\": n,       (numeric) The starting height (block) of the peer<br>    \"banscore\": n,             (numeric) The ban score<br>    \"synced_headers\": n,       (numeric) The last header we have in common with this peer<br>    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer<br>    \"inflight\": [<br>       n,                        (numeric) The heights of blocks we're currently asking from this peer<br>       ...<br>    ]<br>    \"bytessent_per_msg\": {<br>       \"addr\": n,             (numeric) The total bytes sent aggregated by message type<br>       ...<br>    }<br>    \"bytesrecv_per_msg\": {<br>       \"addr\": n,             (numeric) The total bytes received aggregated by message type<br>       ...<br>    }<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getpeerinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listbanned": "listbanned<br><br>List all banned IPs/Subnets.<br><br>Examples:<br> bitcoin-cli listbanned <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "ping": "ping<br><br>Requests that a ping be sent to all other nodes, to measure ping time.<br>Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.<br>Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.<br><br>Examples:<br> bitcoin-cli ping <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setban": "setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)<br><br>Attempts add or remove a IP/Subnet from the banned list.<br><br>Arguments:<br>1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)<br>2. \"command\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list<br>3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)<br>4. \"absolute\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)<br><br>Examples:<br> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400<br> bitcoin-cli setban \"192.168.0.0/24\" \"add\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createrawtransaction": "createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,\"data\":\"hex\",...} ( locktime )<br><br>Create a transaction spending the given inputs and creating new outputs.<br>Outputs can be addresses or data.<br>Returns hex-encoded raw transaction.<br>Note that the transaction's inputs are not signed, and<br>it is not stored in the wallet or transmitted to the network.<br><br>Arguments:<br>1. \"transactions\"        (string, required) A json array of json objects<br>     [<br>       {<br>         \"txid\":\"id\",    (string, required) The transaction id<br>         \"vout\":n        (numeric, required) The output number<br>         \"sequence\":n    (numeric, optional) The sequence number<br>       }<br>       ,...<br>     ]<br>2. \"outputs\"             (string, required) a json object with outputs<br>    {<br>      \"address\": x.xxx   (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the BTC amount<br>      \"data\": \"hex\",     (string, required) The key is \"data\", the value is hex encoded data<br>      ...<br>    }<br>3. locktime                (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs<br><br>Result:<br>\"transaction\"            (string) hex string of the transaction<br><br>Examples<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"<br> bitcoin-cli createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"data\":\"00010203\"}\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"data\":\"00010203\"}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decoderawtransaction": "decoderawtransaction \"hexstring\"<br><br>Return a JSON object representing the serialized, hex-encoded transaction.<br><br>Arguments:<br>1. \"hex\"      (string, required) The transaction hex string<br><br>Result:<br>{<br>  \"txid\" : \"id\",        (string) The transaction id<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) The output number<br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>       \"sequence\": n     (numeric) The script sequence number<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [             (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>}<br><br>Examples:<br> bitcoin-cli decoderawtransaction \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "decodescript": "decodescript \"hex\"<br><br>Decode a hex-encoded script.<br><br>Arguments:<br>1. \"hex\"     (string) the hex encoded script<br><br>Result:<br>{<br>  \"asm\":\"asm\",   (string) Script public key<br>  \"hex\":\"hex\",   (string) hex encoded public key<br>  \"type\":\"type\", (string) The output type<br>  \"reqSigs\": n,    (numeric) The required signatures<br>  \"addresses\": [   (json array of string)<br>     \"address\"     (string) bitcoin address<br>     ,...<br>  ],<br>  \"p2sh\",\"address\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).<br>}<br><br>Examples:<br> bitcoin-cli decodescript \"hexstring\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "fundrawtransaction": "fundrawtransaction \"hexstring\" ( options )<br><br>Add inputs to a transaction until it has enough in value to meet its out value.<br>This will not modify existing inputs, and will add one change output to the outputs.<br>Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.<br>The inputs added will not be signed, use signrawtransaction for that.<br>Note that all existing inputs must have their previous output transaction be in the wallet.<br>Note that all inputs selected must be of standard form and P2SH scripts must be<br>in the wallet using importaddress or addmultisigaddress (to calculate fees).<br>You can see whether this is the case by checking the \"solvable\" field in the listunspent output.<br>Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only<br><br>Arguments:<br>1. \"hexstring\"           (string, required) The hex string of the raw transaction<br>2. options               (object, optional)<br>   {<br>     \"changeAddress\"     (string, optional, default pool address) The bitcoin address to receive the change<br>     \"changePosition\"    (numeric, optional, default random) The index of the change output<br>     \"includeWatching\"   (boolean, optional, default false) Also select inputs which are watch only<br>     \"lockUnspents\"      (boolean, optional, default false) Lock selected unspent outputs<br>     \"feeRate\"           (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (BTC per KB)<br>   }<br>                         for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}<br><br>Result:<br>{<br>  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)<br>  \"fee\":       n,         (numeric) Fee in BTC the resulting transaction pays<br>  \"changepos\": n          (numeric) The position of the added change output, or -1<br>}<br>\"hex\"             <br><br>Examples:<br><br>Create a transaction with no inputs<br> bitcoin-cli createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"<br><br>Add sufficient unsigned inputs to meet the output value<br> bitcoin-cli fundrawtransaction \"rawtransactionhex\"<br><br>Sign the transaction<br> bitcoin-cli signrawtransaction \"fundedtransactionhex\"<br><br>Send the transaction<br> bitcoin-cli sendrawtransaction \"signedtransactionhex\"",
            "getrawtransaction": "getrawtransaction \"txid\" ( verbose )<br><br>NOTE: By default this function only works sometimes. This is when the tx is in the mempool<br>or there is an unspent output in the utxo for this transaction. To make it always work,<br>you need to maintain a transaction index, using the -txindex command line option.<br><br>Return the raw transaction data.<br><br>If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.<br>If verbose is non-zero, returns an Object with information about 'txid'.<br><br>Arguments:<br>1. \"txid\"      (string, required) The transaction id<br>2. verbose       (numeric, optional, default=0) If 0, return a string, other return a json object<br><br>Result (if verbose is not set or set to 0):<br>\"data\"      (string) The serialized, hex-encoded data for 'txid'<br><br>Result (if verbose > 0):<br>{<br>  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'<br>  \"txid\" : \"id\",        (string) The transaction id (same as provided)<br>  \"hash\" : \"id\",        (string) The transaction hash (differs from txid for witness transactions)<br>  \"size\" : n,             (numeric) The serialized transaction size<br>  \"vsize\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)<br>  \"version\" : n,          (numeric) The version<br>  \"locktime\" : ttt,       (numeric) The lock time<br>  \"vin\" : [               (array of json objects)<br>     {<br>       \"txid\": \"id\",    (string) The transaction id<br>       \"vout\": n,         (numeric) <br>       \"scriptSig\": {     (json object) The script<br>         \"asm\": \"asm\",  (string) asm<br>         \"hex\": \"hex\"   (string) hex<br>       },<br>       \"sequence\": n      (numeric) The script sequence number<br>       \"txinwitness\": [\"hex\", ...] (array of string) hex-encoded witness data (if any)<br>     }<br>     ,...<br>  ],<br>  \"vout\" : [              (array of json objects)<br>     {<br>       \"value\" : x.xxx,            (numeric) The value in BTC<br>       \"n\" : n,                    (numeric) index<br>       \"scriptPubKey\" : {          (json object)<br>         \"asm\" : \"asm\",          (string) the asm<br>         \"hex\" : \"hex\",          (string) the hex<br>         \"reqSigs\" : n,            (numeric) The required sigs<br>         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'<br>         \"addresses\" : [           (json array of string)<br>           \"bitcoinaddress\"        (string) bitcoin address<br>           ,...<br>         ]<br>       }<br>     }<br>     ,...<br>  ],<br>  \"blockhash\" : \"hash\",   (string) the block hash<br>  \"confirmations\" : n,      (numeric) The confirmations<br>  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)<br>  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)<br>}<br><br>Examples:<br> bitcoin-cli getrawtransaction \"mytxid\"<br> bitcoin-cli getrawtransaction \"mytxid\" 1<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendrawtransaction": "sendrawtransaction \"hexstring\" ( allowhighfees )<br><br>Submits raw transaction (serialized, hex-encoded) to local node and network.<br><br>Also see createrawtransaction and signrawtransaction calls.<br><br>Arguments:<br>1. \"hexstring\"    (string, required) The hex string of the raw transaction)<br>2. allowhighfees    (boolean, optional, default=false) Allow high fees<br><br>Result:<br>\"hex\"             (string) The transaction hash in hex<br><br>Examples:<br><br>Create a transaction<br> bitcoin-cli createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"<br>Sign the transaction, and get back the hex<br> bitcoin-cli signrawtransaction \"myhex\"<br><br>Send the transaction (signed hex)<br> bitcoin-cli sendrawtransaction \"signedhex\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signrawtransaction": "signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )<br><br>Sign inputs for raw transaction (serialized, hex-encoded).<br>The second optional argument (may be null) is an array of previous transaction outputs that<br>this transaction depends on but may not yet be in the block chain.<br>The third optional argument (may be null) is an array of base58-encoded private<br>keys that, if given, will be the only keys used to sign the transaction.<br><br><br>Arguments:<br>1. \"hexstring\"     (string, required) The transaction hex string<br>2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs<br>     [               (json array of json objects, or 'null' if none provided)<br>       {<br>         \"txid\":\"id\",             (string, required) The transaction id<br>         \"vout\":n,                  (numeric, required) The output number<br>         \"scriptPubKey\": \"hex\",   (string, required) script key<br>         \"redeemScript\": \"hex\",   (string, required for P2SH or P2WSH) redeem script<br>         \"amount\": value            (numeric, required) The amount spent<br>       }<br>       ,...<br>    ]<br>3. \"privatekeys\"     (string, optional) A json array of base58-encoded private keys for signing<br>    [                  (json array of strings, or 'null' if none provided)<br>      \"privatekey\"   (string) private key in base58-encoding<br>      ,...<br>    ]<br>4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of<br>       \"ALL\"<br>       \"NONE\"<br>       \"SINGLE\"<br>       \"ALL|ANYONECANPAY\"<br>       \"NONE|ANYONECANPAY\"<br>       \"SINGLE|ANYONECANPAY\"<br><br>Result:<br>{<br>  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)<br>  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures<br>  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)<br>    {<br>      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction<br>      \"vout\" : n,                (numeric) The index of the output to spent and used as input<br>      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script<br>      \"sequence\" : n,            (numeric) Script sequence number<br>      \"error\" : \"text\"           (string) Verification or signing error related to the input<br>    }<br>    ,...<br>  ]<br>}<br><br>Examples:<br> bitcoin-cli signrawtransaction \"myhex\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "createmultisig": "createmultisig nrequired [\"key\",...]<br><br>Creates a multi-signature address with n signature of m keys required.<br>It returns a json object with the address and redeemScript.<br><br>Arguments:<br>1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keys\"       (string, required) A json array of keys which are bitcoin addresses or hex-encoded public keys<br>     [<br>       \"key\"    (string) bitcoin address or hex-encoded public key<br>       ,...<br>     ]<br><br>Result:<br>{<br>  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.<br>  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.<br>}<br><br>Examples:<br><br>Create a multisig address from 2 addresses<br> bitcoin-cli createmultisig 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "estimatefee": "estimatefee nblocks<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>n              (numeric) estimated fee-per-kilobyte<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br>-1 is always returned for nblocks == 1 as it is impossible to calculate<br>a fee that is high enough to get reliably included in the next block.<br><br>Example:<br> bitcoin-cli estimatefee 6",
            "estimatepriority": "estimatepriority nblocks<br><br>Estimates the approximate priority a zero-fee transaction needs to begin<br>confirmation within nblocks blocks.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>n              (numeric) estimated priority<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate.<br><br>Example:<br> bitcoin-cli estimatepriority 6",
            "estimatesmartfee": "estimatesmartfee nblocks<br><br>WARNING: This interface is unstable and may disappear or change!<br><br>Estimates the approximate fee per kilobyte needed for a transaction to begin<br>confirmation within nblocks blocks if possible and return the number of blocks<br>for which the estimate is valid.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>{<br>  \"feerate\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br>However it will not return a value below the mempool reject fee.<br><br>Example:<br> bitcoin-cli estimatesmartfee 6",
            "estimatesmartpriority": "estimatesmartpriority nblocks<br><br>WARNING: This interface is unstable and may disappear or change!<br><br>Estimates the approximate priority a zero-fee transaction needs to begin<br>confirmation within nblocks blocks if possible and return the number of blocks<br>for which the estimate is valid.<br><br>Arguments:<br>1. nblocks     (numeric)<br><br>Result:<br>{<br>  \"priority\" : x.x,    (numeric) estimated priority<br>  \"blocks\" : n         (numeric) block number where estimate was found<br>}<br><br>A negative value is returned if not enough transactions and blocks<br>have been observed to make an estimate for any number of blocks.<br>However if the mempool reject fee is set it will return 1e9 * MAX_MONEY.<br><br>Example:<br> bitcoin-cli estimatesmartpriority 6",
            "signmessagewithprivkey": "signmessagewithprivkey \"privkey\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"privkey\"         (string, required) The private key to sign the message with.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Create the signature<br> bitcoin-cli signmessagewithprivkey \"privkey\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessagewithprivkey\", \"params\": [\"privkey\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "validateaddress": "validateaddress \"bitcoinaddress\"<br><br>Return information about the given bitcoin address.<br><br>Arguments:<br>1. \"bitcoinaddress\"     (string, required) The bitcoin address to validate<br><br>Result:<br>{<br>  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.<br>  \"address\" : \"bitcoinaddress\", (string) The bitcoin address validated<br>  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address<br>  \"ismine\" : true|false,        (boolean) If the address is yours or not<br>  \"iswatchonly\" : true|false,   (boolean) If the address is watchonly<br>  \"isscript\" : true|false,      (boolean) If the key is a script<br>  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key<br>  \"iscompressed\" : true|false,  (boolean) If the address is compressed<br>  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \"\" is the default account<br>  \"hdkeypath\" : \"keypath\"       (string, optional) The HD keypath if the key is HD and available<br>  \"hdmasterkeyid\" : \"<hash160>\" (string, optional) The Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> bitcoin-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "verifymessage": "verifymessage \"bitcoinaddress\" \"signature\" \"message\"<br><br>Verify a signed message<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to use for the signature.<br>2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).<br>3. \"message\"         (string, required) The message that was signed.<br><br>Result:<br>true|false   (boolean) If the signature is verified or not.<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "abandontransaction": "abandontransaction \"txid\"<br><br>Mark in-wallet transaction <txid> as abandoned<br>This will mark this transaction and all its in-wallet descendants as abandoned which will allow<br>for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.<br>It only works on transactions which are not included in a block and are not currently in the mempool.<br>It has no effect on transactions which are already conflicted or abandoned.<br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br><br>Result:<br><br>Examples:<br> bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addmultisigaddress": "addmultisigaddress nrequired [\"key\",...] ( \"account\" )<br><br>Add a nrequired-to-sign multisignature address to the wallet.<br>Each key is a Bitcoin address or hex-encoded public key.<br>If 'account' is specified (DEPRECATED), assign address to that account.<br><br>Arguments:<br>1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.<br>2. \"keysobject\"   (string, required) A json array of bitcoin addresses or hex-encoded public keys<br>     [<br>       \"address\"  (string) bitcoin address or hex-encoded public key<br>       ...,<br>     ]<br>3. \"account\"      (string, optional) DEPRECATED. An account to assign the addresses to.<br><br>Result:<br>\"bitcoinaddress\"  (string) A bitcoin address associated with the keys.<br><br>Examples:<br><br>Add a multisig address from 2 addresses<br> bitcoin-cli addmultisigaddress 2 \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "addwitnessaddress": "addwitnessaddress \"address\"<br><br>Add a witness address for a script (with pubkey or redeemscript known).<br>It returns the witness script.<br><br>Arguments:<br>1. \"address\"       (string, required) An address known to the wallet<br><br>Result:<br>\"witnessaddress\",  (string) The value of the new address (P2SH of witness script).<br>}",
            "backupwallet": "backupwallet \"destination\"<br><br>Safely copies current wallet file to destination, which can be a directory or a path with filename.<br><br>Arguments:<br>1. \"destination\"   (string) The destination directory or file<br><br>Examples:<br> bitcoin-cli backupwallet \"backup.dat\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backup.dat\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpprivkey": "dumpprivkey \"bitcoinaddress\"<br><br>Reveals the private key corresponding to 'bitcoinaddress'.<br>Then the importprivkey can be used with this output<br><br>Arguments:<br>1. \"bitcoinaddress\"   (string, required) The bitcoin address for the private key<br><br>Result:<br>\"key\"                (string) The private key<br><br>Examples:<br> bitcoin-cli dumpprivkey \"myaddress\"<br> bitcoin-cli importprivkey \"mykey\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "dumpwallet": "dumpwallet \"filename\"<br><br>Dumps all wallet keys in a human-readable format.<br><br>Arguments:<br>1. \"filename\"    (string, required) The filename<br><br>Examples:<br> bitcoin-cli dumpwallet \"test\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "encryptwallet": "encryptwallet \"passphrase\"<br><br>Encrypts the wallet with 'passphrase'. This is for first time encryption.<br>After this, any calls that interact with private keys such as sending or signing <br>will require the passphrase to be set prior the making these calls.<br>Use the walletpassphrase call for this, and then walletlock call.<br>If the wallet is already encrypted, use the walletpassphrasechange call.<br>Note that this will shutdown the server.<br><br>Arguments:<br>1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.<br><br>Examples:<br><br>Encrypt you wallet<br> bitcoin-cli encryptwallet \"my pass phrase\"<br><br>Now set the passphrase to use the wallet, such as for signing or sending bitcoin<br> bitcoin-cli walletpassphrase \"my pass phrase\"<br><br>Now we can so something like sign<br> bitcoin-cli signmessage \"bitcoinaddress\" \"test message\"<br><br>Now lock the wallet again by removing the passphrase<br> bitcoin-cli walletlock <br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccount": "getaccount \"bitcoinaddress\"<br><br>DEPRECATED. Returns the account associated with the given address.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address for account lookup.<br><br>Result:<br>\"accountname\"        (string) the account address<br><br>Examples:<br> bitcoin-cli getaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaccountaddress": "getaccountaddress \"account\"<br><br>DEPRECATED. Returns the current Bitcoin address for receiving payments to this account.<br><br>Arguments:<br>1. \"account\"       (string, required) The account name for the address. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.<br><br>Result:<br>\"bitcoinaddress\"   (string) The account bitcoin address<br><br>Examples:<br> bitcoin-cli getaccountaddress <br> bitcoin-cli getaccountaddress \"\"<br> bitcoin-cli getaccountaddress \"myaccount\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getaddressesbyaccount": "getaddressesbyaccount \"account\"<br><br>DEPRECATED. Returns the list of addresses for the given account.<br><br>Arguments:<br>1. \"account\"  (string, required) The account name.<br><br>Result:<br>[                     (json array of string)<br>  \"bitcoinaddress\"  (string) a bitcoin address associated with the given account<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli getaddressesbyaccount \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getbalance": "getbalance ( \"account\" minconf includeWatchonly )<br><br>If account is not specified, returns the server's total available balance.<br>If account is specified (DEPRECATED), returns the balance in the account.<br>Note that the account \"\" is not the same as leaving the parameter out.<br>The server total may be different to the balance in the default \"\" account.<br><br>Arguments:<br>1. \"account\"      (string, optional) DEPRECATED. The selected account, or \"*\" for entire wallet. It may be the default account using \"\".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br>3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>The total amount in the wallet<br> bitcoin-cli getbalance <br><br>The total amount in the wallet at least 5 blocks confirmed<br> bitcoin-cli getbalance \"*\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getnewaddress": "getnewaddress ( \"account\" )<br><br>Returns a new Bitcoin address for receiving payments.<br>If 'account' is specified (DEPRECATED), it is added to the address book <br>so payments received with the address will be credited to 'account'.<br><br>Arguments:<br>1. \"account\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \"\" is used. It can also be set to the empty string \"\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.<br><br>Result:<br>\"bitcoinaddress\"    (string) The new bitcoin address<br><br>Examples:<br> bitcoin-cli getnewaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getrawchangeaddress": "getrawchangeaddress<br><br>Returns a new Bitcoin address, for receiving change.<br>This is for use with raw transactions, NOT normal use.<br><br>Result:<br>\"address\"    (string) The address<br><br>Examples:<br> bitcoin-cli getrawchangeaddress <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaccount": "getreceivedbyaccount \"account\" ( minconf )<br><br>DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.<br><br>Arguments:<br>1. \"account\"      (string, required) The selected account, may be the default account using \"\".<br>2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount              (numeric) The total amount in BTC received for this account.<br><br>Examples:<br><br>Amount received by the default account with at least 1 confirmation<br> bitcoin-cli getreceivedbyaccount \"\"<br><br>Amount received at the tabby account including unconfirmed amounts with zero confirmations<br> bitcoin-cli getreceivedbyaccount \"tabby\" 0<br><br>The amount with at least 6 confirmation, very safe<br> bitcoin-cli getreceivedbyaccount \"tabby\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getreceivedbyaddress": "getreceivedbyaddress \"bitcoinaddress\" ( minconf )<br><br>Returns the total amount received by the given bitcoinaddress in transactions with at least minconf confirmations.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address for transactions.<br>2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.<br><br>Result:<br>amount   (numeric) The total amount in BTC received at this address.<br><br>Examples:<br><br>The amount from transactions with at least 1 confirmation<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\"<br><br>The amount including unconfirmed transactions, zero confirmations<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" 0<br><br>The amount with at least 6 confirmation, very safe<br> bitcoin-cli getreceivedbyaddress \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" 6<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "gettransaction": "gettransaction \"txid\" ( includeWatchonly )<br><br>Get detailed information about in-wallet transaction <txid><br><br>Arguments:<br>1. \"txid\"    (string, required) The transaction id<br>2. \"includeWatchonly\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]<br><br>Result:<br>{<br>  \"amount\" : x.xxx,        (numeric) The transaction amount in BTC<br>  \"confirmations\" : n,     (numeric) The number of confirmations<br>  \"blockhash\" : \"hash\",  (string) The block hash<br>  \"blockindex\" : xx,       (numeric) The index of the transaction in the block that includes it<br>  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)<br>  \"txid\" : \"transactionid\",   (string) The transaction id.<br>  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)<br>  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)<br>  \"bip125-replaceable\": \"yes|no|unknown\"  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                   may be unknown for unconfirmed transactions not in the mempool<br>  \"details\" : [<br>    {<br>      \"account\" : \"accountname\",  (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.<br>      \"address\" : \"bitcoinaddress\",   (string) The bitcoin address involved in the transaction<br>      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'<br>      \"amount\" : x.xxx,                 (numeric) The amount in BTC<br>      \"label\" : \"label\",              (string) A comment for the address/transaction, if any<br>      \"vout\" : n,                       (numeric) the vout value<br>    }<br>    ,...<br>  ],<br>  \"hex\" : \"data\"         (string) Raw data for transaction<br>}<br><br>Examples:<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"<br> bitcoin-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "getunconfirmedbalance": "getunconfirmedbalance<br>Returns the server's total unconfirmed balance",
            "getwalletinfo": "getwalletinfo<br>Returns an object containing various wallet state info.<br><br>Result:<br>{<br>  \"walletversion\": xxxxx,       (numeric) the wallet version<br>  \"balance\": xxxxxxx,           (numeric) the total confirmed balance of the wallet in BTC<br>  \"unconfirmed_balance\": xxx,   (numeric) the total unconfirmed balance of the wallet in BTC<br>  \"immature_balance\": xxxxxx,   (numeric) the total immature balance of the wallet in BTC<br>  \"txcount\": xxxxxxx,           (numeric) the total number of transactions in the wallet<br>  \"keypoololdest\": xxxxxx,      (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool<br>  \"keypoolsize\": xxxx,          (numeric) how many new keys are pre-generated<br>  \"unlocked_until\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked<br>  \"paytxfee\": x.xxxx,           (numeric) the transaction fee configuration, set in BTC/kB<br>  \"hdmasterkeyid\": \"<hash160>\", (string) the Hash160 of the HD master pubkey<br>}<br><br>Examples:<br> bitcoin-cli getwalletinfo <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importaddress": "importaddress \"address\" ( \"label\" rescan p2sh )<br><br>Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"script\"           (string, required) The hex-encoded script (or address)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br>4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well<br><br>Note: This call can take minutes to complete if rescan is true.<br>If you have the full public key, you should call importpubkey instead of this.<br><br>Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated<br>as change, and not show up in many RPCs.<br><br>Examples:<br><br>Import a script with rescan<br> bitcoin-cli importaddress \"myscript\"<br><br>Import using a label without rescan<br> bitcoin-cli importaddress \"myscript\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myscript\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprivkey": "importprivkey \"bitcoinprivkey\" ( \"label\" rescan )<br><br>Adds a private key (as returned by dumpprivkey) to your wallet.<br><br>Arguments:<br>1. \"bitcoinprivkey\"   (string, required) The private key (see dumpprivkey)<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Dump a private key<br> bitcoin-cli dumpprivkey \"myaddress\"<br><br>Import the private key with rescan<br> bitcoin-cli importprivkey \"mykey\"<br><br>Import using a label and without rescan<br> bitcoin-cli importprivkey \"mykey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importprunedfunds": "importprunedfunds<br><br>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.<br><br>Arguments:<br>1. \"rawtransaction\" (string, required) A raw transaction in hex funding an already-existing address in wallet<br>2. \"txoutproof\"     (string, required) The hex output from gettxoutproof that contains the transaction",
            "importpubkey": "importpubkey \"pubkey\" ( \"label\" rescan )<br><br>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.<br><br>Arguments:<br>1. \"pubkey\"           (string, required) The hex-encoded public key<br>2. \"label\"            (string, optional, default=\"\") An optional label<br>3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions<br><br>Note: This call can take minutes to complete if rescan is true.<br><br>Examples:<br><br>Import a public key with rescan<br> bitcoin-cli importpubkey \"mypubkey\"<br><br>Import using a label without rescan<br> bitcoin-cli importpubkey \"mypubkey\" \"testing\" false<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "importwallet": "importwallet \"filename\"<br><br>Imports keys from a wallet dump file (see dumpwallet).<br><br>Arguments:<br>1. \"filename\"    (string, required) The wallet file<br><br>Examples:<br><br>Dump the wallet<br> bitcoin-cli dumpwallet \"test\"<br><br>Import the wallet<br> bitcoin-cli importwallet \"test\"<br><br>Import using the json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "keypoolrefill": "keypoolrefill ( newsize )<br><br>Fills the keypool.<br><br>Arguments<br>1. newsize     (numeric, optional, default=100) The new keypool size<br><br>Examples:<br> bitcoin-cli keypoolrefill <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaccounts": "listaccounts ( minconf includeWatchonly)<br><br>DEPRECATED. Returns Object that has account names as keys, account balances as values.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations<br>2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')<br><br>Result:<br>{                      (json object where keys are account names, and values are numeric balances<br>  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.<br>  ...<br>}<br><br>Examples:<br><br>List account balances where there at least 1 confirmation<br> bitcoin-cli listaccounts <br><br>List account balances including zero confirmation transactions<br> bitcoin-cli listaccounts 0<br><br>List account balances for 6 or more confirmations<br> bitcoin-cli listaccounts 6<br><br>As json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listaddressgroupings": "listaddressgroupings<br><br>Lists groups of addresses which have had their common ownership<br>made public by common use as inputs or as the resulting change<br>in past transactions<br><br>Result:<br>[<br>  [<br>    [<br>      \"bitcoinaddress\",     (string) The bitcoin address<br>      amount,                 (numeric) The amount in BTC<br>      \"account\"             (string, optional) The account (DEPRECATED)<br>    ]<br>    ,...<br>  ]<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listaddressgroupings <br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listlockunspent": "listlockunspent<br><br>Returns list of temporarily unspendable outputs.<br>See the lockunspent call to lock and unlock transactions for spending.<br><br>Result:<br>[<br>  {<br>    \"txid\" : \"transactionid\",     (string) The transaction id locked<br>    \"vout\" : n                      (numeric) The vout value<br>  }<br>  ,...<br>]<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaccount": "listreceivedbyaccount ( minconf includeempty includeWatchonly)<br><br>DEPRECATED. List balances by account.<br><br>Arguments:<br>1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. includeempty (bool, optional, default=false) Whether to include accounts that haven't received any payments.<br>3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction<br>    \"account\" : \"accountname\",  (string) The account name of the receiving account<br>    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account<br>    \"confirmations\" : n,          (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"           (string) A comment for the address/transaction, if any<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaccount <br> bitcoin-cli listreceivedbyaccount 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listreceivedbyaddress": "listreceivedbyaddress ( minconf includeempty includeWatchonly)<br><br>List balances by receiving address.<br><br>Arguments:<br>1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.<br>2. includeempty  (bool, optional, default=false) Whether to include addresses that haven't received any payments.<br>3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').<br><br>Result:<br>[<br>  {<br>    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction<br>    \"address\" : \"receivingaddress\",  (string) The receiving address<br>    \"account\" : \"accountname\",       (string) DEPRECATED. The account of the receiving address. The default account is \"\".<br>    \"amount\" : x.xxx,                  (numeric) The total amount in BTC received by the address<br>    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included<br>    \"label\" : \"label\"                (string) A comment for the address/transaction, if any<br>  }<br>  ,...<br>]<br><br>Examples:<br> bitcoin-cli listreceivedbyaddress <br> bitcoin-cli listreceivedbyaddress 6 true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listsinceblock": "listsinceblock ( \"blockhash\" target-confirmations includeWatchonly)<br><br>Get all transactions in blocks since block [blockhash], or all transactions if omitted<br><br>Arguments:<br>1. \"blockhash\"   (string, optional) The block hash to list transactions since<br>2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more<br>3. includeWatchonly:        (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')<br>Result:<br>{<br>  \"transactions\": [<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.<br>    \"address\":\"bitcoinaddress\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).<br>    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the 'move' category for moves <br>                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.<br>    \"vout\" : n,               (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the 'send' category of transactions.<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive' category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\" : \"label\"       (string) A comment for the address/transaction, if any<br>    \"to\": \"...\",            (string) If a comment to is associated with the transaction.<br>  ],<br>  \"lastblock\": \"lastblockhash\"     (string) The hash of the last block<br>}<br><br>Examples:<br> bitcoin-cli listsinceblock <br> bitcoin-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listtransactions": "listtransactions ( \"account\" count from includeWatchonly)<br><br>Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.<br><br>Arguments:<br>1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".<br>2. count          (numeric, optional, default=10) The number of transactions to return<br>3. from           (numeric, optional, default=0) The number of transactions to skip<br>4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')<br><br>Result:<br>[<br>  {<br>    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. <br>                                                It will be \"\" for the default account.<br>    \"address\":\"bitcoinaddress\",    (string) The bitcoin address of the transaction. Not present for <br>                                                move transactions (category = move).<br>    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)<br>                                                transaction between accounts, and not associated with an address,<br>                                                transaction id or block. 'send' and 'receive' transactions are <br>                                                associated with an address, transaction id and block details<br>    \"amount\": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the<br>                                         'move' category for moves outbound. It is positive for the 'receive' category,<br>                                         and for the 'move' category for inbound funds.<br>    \"vout\": n,                (numeric) the vout value<br>    \"fee\": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the <br>                                         'send' category of transactions.<br>    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable).<br>    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and <br>                                         'receive' category of transactions. Negative confirmations indicate the<br>                                         transaction conflicts with the block chain<br>    \"trusted\": xxx            (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.<br>    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blockindex\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive'<br>                                          category of transactions.<br>    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).<br>    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.<br>    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).<br>    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available <br>                                          for 'send' and 'receive' category of transactions.<br>    \"comment\": \"...\",       (string) If a comment is associated with the transaction.<br>    \"label\": \"label\"        (string) A comment for the address/transaction, if any<br>    \"otheraccount\": \"accountname\",  (string) For the 'move' category of transactions, the account the funds came <br>                                          from (for receiving funds, positive amounts), or went to (for sending funds,<br>                                          negative amounts).<br>    \"bip125-replaceable\": \"yes|no|unknown\"  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);<br>                                                     may be unknown for unconfirmed transactions not in the mempool<br>  }<br>]<br><br>Examples:<br><br>List the most recent 10 transactions in the systems<br> bitcoin-cli listtransactions <br><br>List transactions 100 to 120<br> bitcoin-cli listtransactions \"*\" 20 100<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "listunspent": "listunspent ( minconf maxconf  [\"address\",...] )<br><br>Returns array of unspent transaction outputs<br>with between minconf and maxconf (inclusive) confirmations.<br>Optionally filter to only include txouts paid to specified addresses.<br><br>Arguments:<br>1. minconf          (numeric, optional, default=1) The minimum confirmations to filter<br>2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter<br>3. \"addresses\"    (string) A json array of bitcoin addresses to filter<br>    [<br>      \"address\"   (string) bitcoin address<br>      ,...<br>    ]<br><br>Result<br>[                   (array of json object)<br>  {<br>    \"txid\" : \"txid\",          (string) the transaction id <br>    \"vout\" : n,               (numeric) the vout value<br>    \"address\" : \"address\",    (string) the bitcoin address<br>    \"account\" : \"account\",    (string) DEPRECATED. The associated account, or \"\" for the default account<br>    \"scriptPubKey\" : \"key\",   (string) the script key<br>    \"amount\" : x.xxx,         (numeric) the transaction amount in BTC<br>    \"confirmations\" : n,      (numeric) The number of confirmations<br>    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH<br>    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output<br>    \"solvable\" : xxx          (bool) Whether we know how to spend this output, ignoring the lack of keys<br>  }<br>  ,...<br>]<br><br>Examples<br> bitcoin-cli listunspent <br> bitcoin-cli listunspent 6 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "lockunspent": "lockunspent unlock ([{\"txid\":\"txid\",\"vout\":n},...])<br><br>Updates list of temporarily unspendable outputs.<br>Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.<br>If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.<br>A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.<br>Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list<br>is always cleared (by virtue of process exit) when a node stops or fails.<br>Also see the listunspent call<br><br>Arguments:<br>1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions<br>2. \"transactions\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)<br>     [           (json array of json objects)<br>       {<br>         \"txid\":\"id\",    (string) The transaction id<br>         \"vout\": n         (numeric) The output number<br>       }<br>       ,...<br>     ]<br><br>Result:<br>true|false    (boolean) Whether the command was successful or not<br><br>Examples:<br><br>List the unspent transactions<br> bitcoin-cli listunspent <br><br>Lock an unspent transaction<br> bitcoin-cli lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>List the locked transactions<br> bitcoin-cli listlockunspent <br><br>Unlock the transaction again<br> bitcoin-cli lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "move": "move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )<br><br>DEPRECATED. Move a specified amount from one account in your wallet to another.<br><br>Arguments:<br>1. \"fromaccount\"   (string, required) The name of the account to move funds from. May be the default account using \"\".<br>2. \"toaccount\"     (string, required) The name of the account to move funds to. May be the default account using \"\".<br>3. amount            (numeric) Quantity of BTC to move between accounts.<br>4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"       (string, optional) An optional comment, stored in the wallet only.<br><br>Result:<br>true|false           (boolean) true if successful.<br><br>Examples:<br><br>Move 0.01 BTC from the default account to the account named tabby<br> bitcoin-cli move \"\" \"tabby\" 0.01<br><br>Move 0.01 BTC timotei to akiko with a comment and funds have 6 confirmations<br> bitcoin-cli move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "removeprunedfunds": "removeprunedfunds \"txid\"<br><br>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.<br><br>Arguments:<br>1. \"txid\"           (string, required) The hex-encoded id of the transaction you are deleting<br><br>Examples:<br> bitcoin-cli removeprunedfunds \"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"<br><br>As a JSON-RPC call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"removprunedfunds\", \"params\": [\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendfrom": "sendfrom \"fromaccount\" \"tobitcoinaddress\" amount ( minconf \"comment\" \"comment-to\" )<br><br>DEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.<br><br>Arguments:<br>1. \"fromaccount\"       (string, required) The name of the account to send funds from. May be the default account using \"\".<br>2. \"tobitcoinaddress\"  (string, required) The bitcoin address to send funds to.<br>3. amount                (numeric or string, required) The amount in BTC (transaction fee is added on top).<br>4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.<br>5. \"comment\"           (string, optional) A comment used to store what the transaction is for. <br>                                     This is not part of the transaction, just kept in your wallet.<br>6. \"comment-to\"        (string, optional) An optional comment to store the name of the person or organization <br>                                     to which you're sending the transaction. This is not part of the transaction, <br>                                     it is just kept in your wallet.<br><br>Result:<br>\"transactionid\"        (string) The transaction id.<br><br>Examples:<br><br>Send 0.01 BTC from the default account to the address, must have at least 1 confirmation<br> bitcoin-cli sendfrom \"\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01<br><br>Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations<br> bitcoin-cli sendfrom \"tabby\" \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.01 6 \"donation\" \"seans outpost\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendmany": "sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )<br><br>Send multiple times. Amounts are double-precision floating point numbers.<br><br>Arguments:<br>1. \"fromaccount\"         (string, required) DEPRECATED. The account to send the funds from. Should be \"\" for the default account<br>2. \"amounts\"             (string, required) A json object with addresses and amounts<br>    {<br>      \"address\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in BTC is the value<br>      ,...<br>    }<br>3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.<br>4. \"comment\"             (string, optional) A comment<br>5. subtractfeefromamount   (string, optional) A json array with addresses.<br>                           The fee will be equally deducted from the amount of each selected address.<br>                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.<br>                           If no addresses are specified here, the sender pays the fee.<br>    [<br>      \"address\"            (string) Subtract fee from this address<br>      ,...<br>    ]<br><br>Result:<br>\"transactionid\"          (string) The transaction id for the send. Only 1 transaction is created regardless of <br>                                    the number of addresses.<br><br>Examples:<br><br>Send two amounts to two different addresses:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\"<br><br>Send two amounts to two different addresses setting the confirmation and comment:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 6 \"testing\"<br><br>Send two amounts to two different addresses, subtract fee from amount:<br> bitcoin-cli sendmany \"\" \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\" 1 \"\" \"[\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\",\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\"]\"<br><br>As a json rpc call<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "sendtoaddress": "sendtoaddress \"bitcoinaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount )<br><br>Send an amount to a given address.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to send to.<br>2. \"amount\"      (numeric or string, required) The amount in BTC to send. eg 0.1<br>3. \"comment\"     (string, optional) A comment used to store what the transaction is for. <br>                             This is not part of the transaction, just kept in your wallet.<br>4. \"comment-to\"  (string, optional) A comment to store the name of the person or organization <br>                             to which you're sending the transaction. This is not part of the <br>                             transaction, just kept in your wallet.<br>5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.<br>                             The recipient will receive less bitcoins than you enter in the amount field.<br><br>Result:<br>\"transactionid\"  (string) The transaction id.<br><br>Examples:<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"<br> bitcoin-cli sendtoaddress \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"\" \"\" true<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "setaccount": "setaccount \"bitcoinaddress\" \"account\"<br><br>DEPRECATED. Sets the account associated with the given address.<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to be associated with an account.<br>2. \"account\"         (string, required) The account to assign the address to.<br><br>Examples:<br> bitcoin-cli setaccount \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"tabby\"<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "settxfee": "settxfee amount<br><br>Set the transaction fee per kB. Overwrites the paytxfee parameter.<br><br>Arguments:<br>1. amount         (numeric or string, required) The transaction fee in BTC/kB<br><br>Result<br>true|false        (boolean) Returns true if successful<br><br>Examples:<br> bitcoin-cli settxfee 0.00001<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/",
            "signmessage": "signmessage \"bitcoinaddress\" \"message\"<br><br>Sign a message with the private key of an address<br><br>Arguments:<br>1. \"bitcoinaddress\"  (string, required) The bitcoin address to use for the private key.<br>2. \"message\"         (string, required) The message to create a signature of.<br><br>Result:<br>\"signature\"          (string) The signature of the message encoded in base 64<br><br>Examples:<br><br>Unlock the wallet for 30 seconds<br> bitcoin-cli walletpassphrase \"mypassphrase\" 30<br><br>Create the signature<br> bitcoin-cli signmessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"my message\"<br><br>Verify the signature<br> bitcoin-cli verifymessage \"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\" \"signature\" \"my message\"<br><br>As json rpc<br> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
        }
    }
}